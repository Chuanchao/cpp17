// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_order_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_order_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_order_2eproto;
namespace ORDERS {
class CancelOrder;
struct CancelOrderDefaultTypeInternal;
extern CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class RtnOrder;
struct RtnOrderDefaultTypeInternal;
extern RtnOrderDefaultTypeInternal _RtnOrder_default_instance_;
class RtnTrade;
struct RtnTradeDefaultTypeInternal;
extern RtnTradeDefaultTypeInternal _RtnTrade_default_instance_;
class SubmitOrder;
struct SubmitOrderDefaultTypeInternal;
extern SubmitOrderDefaultTypeInternal _SubmitOrder_default_instance_;
}  // namespace ORDERS
PROTOBUF_NAMESPACE_OPEN
template <>
::ORDERS::CancelOrder* Arena::CreateMaybeMessage<::ORDERS::CancelOrder>(Arena*);
template <>
::ORDERS::RtnOrder* Arena::CreateMaybeMessage<::ORDERS::RtnOrder>(Arena*);
template <>
::ORDERS::RtnTrade* Arena::CreateMaybeMessage<::ORDERS::RtnTrade>(Arena*);
template <>
::ORDERS::SubmitOrder* Arena::CreateMaybeMessage<::ORDERS::SubmitOrder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ORDERS {
enum OrderType : int {
  IOC_ORDER = 0,
  GFD_ORDER = 1,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderType_IsValid(int value);
constexpr OrderType OrderType_MIN = static_cast<OrderType>(0);
constexpr OrderType OrderType_MAX = static_cast<OrderType>(1);
constexpr int OrderType_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
OrderType_descriptor();
template <typename T>
const std::string& OrderType_Name(T value) {
  static_assert(std::is_same<T, OrderType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderType_Name().");
  return OrderType_Name(static_cast<OrderType>(value));
}
template <>
inline const std::string& OrderType_Name(OrderType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<OrderType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool OrderType_Parse(absl::string_view name, OrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderType>(
      OrderType_descriptor(), name, value);
}
enum OrderDirection : int {
  OPEN_LONG = 0,
  OPEN_SHORT = 1,
  CLOSE_LONG = 2,
  CLOSE_SHORT = 3,
  CLOSE_TODAY_LONG = 4,
  CLOSE_TODAY_SHORT = 5,
  UNKNOWN_TRADE = 6,
  ORDER_TASK_BUTT = 7,
  OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderDirection_IsValid(int value);
constexpr OrderDirection OrderDirection_MIN = static_cast<OrderDirection>(0);
constexpr OrderDirection OrderDirection_MAX = static_cast<OrderDirection>(7);
constexpr int OrderDirection_ARRAYSIZE = 7 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
OrderDirection_descriptor();
template <typename T>
const std::string& OrderDirection_Name(T value) {
  static_assert(std::is_same<T, OrderDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderDirection_Name().");
  return OrderDirection_Name(static_cast<OrderDirection>(value));
}
template <>
inline const std::string& OrderDirection_Name(OrderDirection value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<OrderDirection_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool OrderDirection_Parse(absl::string_view name, OrderDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderDirection>(
      OrderDirection_descriptor(), name, value);
}
enum OrderStatus : int {
  WORK_ORDER = 0,
  DONE_ORDER = 1,
  RISKCONTROL_REJECTED = 2,
  EXCHANGE_REJECTED = 3,
  NETWORK_ERROR = 4,
  OrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderStatus_IsValid(int value);
constexpr OrderStatus OrderStatus_MIN = static_cast<OrderStatus>(0);
constexpr OrderStatus OrderStatus_MAX = static_cast<OrderStatus>(4);
constexpr int OrderStatus_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
OrderStatus_descriptor();
template <typename T>
const std::string& OrderStatus_Name(T value) {
  static_assert(std::is_same<T, OrderStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderStatus_Name().");
  return OrderStatus_Name(static_cast<OrderStatus>(value));
}
template <>
inline const std::string& OrderStatus_Name(OrderStatus value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<OrderStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool OrderStatus_Parse(absl::string_view name, OrderStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatus>(
      OrderStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SubmitOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ORDERS.SubmitOrder) */ {
 public:
  inline SubmitOrder() : SubmitOrder(nullptr) {}
  ~SubmitOrder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmitOrder(const SubmitOrder& from);
  SubmitOrder(SubmitOrder&& from) noexcept
    : SubmitOrder() {
    *this = ::std::move(from);
  }

  inline SubmitOrder& operator=(const SubmitOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitOrder& operator=(SubmitOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitOrder* internal_default_instance() {
    return reinterpret_cast<const SubmitOrder*>(
               &_SubmitOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmitOrder& a, SubmitOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmitOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmitOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmitOrder& from) {
    SubmitOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ORDERS.SubmitOrder";
  }
  protected:
  explicit SubmitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStgyIDFieldNumber = 1,
    kProdIDFieldNumber = 2,
    kInstIDFieldNumber = 3,
    kExchIdFieldNumber = 9,
    kPriceFieldNumber = 5,
    kAmountFieldNumber = 4,
    kOrderTFieldNumber = 6,
    kStgyDFieldNumber = 7,
    kRealDFieldNumber = 8,
    kOrderRefFieldNumber = 10,
  };
  // optional string stgyID = 1;
  bool has_stgyid() const;
  void clear_stgyid() ;
  const std::string& stgyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stgyid(Arg_&& arg, Args_... args);
  std::string* mutable_stgyid();
  PROTOBUF_NODISCARD std::string* release_stgyid();
  void set_allocated_stgyid(std::string* ptr);

  private:
  const std::string& _internal_stgyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stgyid(
      const std::string& value);
  std::string* _internal_mutable_stgyid();

  public:
  // optional string prodID = 2;
  bool has_prodid() const;
  void clear_prodid() ;
  const std::string& prodid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prodid(Arg_&& arg, Args_... args);
  std::string* mutable_prodid();
  PROTOBUF_NODISCARD std::string* release_prodid();
  void set_allocated_prodid(std::string* ptr);

  private:
  const std::string& _internal_prodid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prodid(
      const std::string& value);
  std::string* _internal_mutable_prodid();

  public:
  // optional string instID = 3;
  bool has_instid() const;
  void clear_instid() ;
  const std::string& instid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instid(Arg_&& arg, Args_... args);
  std::string* mutable_instid();
  PROTOBUF_NODISCARD std::string* release_instid();
  void set_allocated_instid(std::string* ptr);

  private:
  const std::string& _internal_instid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instid(
      const std::string& value);
  std::string* _internal_mutable_instid();

  public:
  // optional string exchId = 9;
  bool has_exchid() const;
  void clear_exchid() ;
  const std::string& exchid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchid(Arg_&& arg, Args_... args);
  std::string* mutable_exchid();
  PROTOBUF_NODISCARD std::string* release_exchid();
  void set_allocated_exchid(std::string* ptr);

  private:
  const std::string& _internal_exchid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchid(
      const std::string& value);
  std::string* _internal_mutable_exchid();

  public:
  // optional double price = 5;
  bool has_price() const;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // optional int32 amount = 4;
  bool has_amount() const;
  void clear_amount() ;
  ::int32_t amount() const;
  void set_amount(::int32_t value);

  private:
  ::int32_t _internal_amount() const;
  void _internal_set_amount(::int32_t value);

  public:
  // optional .ORDERS.OrderType order_t = 6;
  bool has_order_t() const;
  void clear_order_t() ;
  ::ORDERS::OrderType order_t() const;
  void set_order_t(::ORDERS::OrderType value);

  private:
  ::ORDERS::OrderType _internal_order_t() const;
  void _internal_set_order_t(::ORDERS::OrderType value);

  public:
  // optional .ORDERS.OrderDirection stgy_d = 7;
  bool has_stgy_d() const;
  void clear_stgy_d() ;
  ::ORDERS::OrderDirection stgy_d() const;
  void set_stgy_d(::ORDERS::OrderDirection value);

  private:
  ::ORDERS::OrderDirection _internal_stgy_d() const;
  void _internal_set_stgy_d(::ORDERS::OrderDirection value);

  public:
  // optional .ORDERS.OrderDirection real_d = 8;
  bool has_real_d() const;
  void clear_real_d() ;
  ::ORDERS::OrderDirection real_d() const;
  void set_real_d(::ORDERS::OrderDirection value);

  private:
  ::ORDERS::OrderDirection _internal_real_d() const;
  void _internal_set_real_d(::ORDERS::OrderDirection value);

  public:
  // optional int64 orderRef = 10;
  bool has_orderref() const;
  void clear_orderref() ;
  ::int64_t orderref() const;
  void set_orderref(::int64_t value);

  private:
  ::int64_t _internal_orderref() const;
  void _internal_set_orderref(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ORDERS.SubmitOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stgyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prodid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchid_;
    double price_;
    ::int32_t amount_;
    int order_t_;
    int stgy_d_;
    int real_d_;
    ::int64_t orderref_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};// -------------------------------------------------------------------

class CancelOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ORDERS.CancelOrder) */ {
 public:
  inline CancelOrder() : CancelOrder(nullptr) {}
  ~CancelOrder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CancelOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOrder(const CancelOrder& from);
  CancelOrder(CancelOrder&& from) noexcept
    : CancelOrder() {
    *this = ::std::move(from);
  }

  inline CancelOrder& operator=(const CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrder& operator=(CancelOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOrder* internal_default_instance() {
    return reinterpret_cast<const CancelOrder*>(
               &_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CancelOrder& a, CancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelOrder& from) {
    CancelOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ORDERS.CancelOrder";
  }
  protected:
  explicit CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStgyIDFieldNumber = 1,
    kInstIDFieldNumber = 2,
    kOrderRefFieldNumber = 3,
  };
  // optional string stgyID = 1;
  bool has_stgyid() const;
  void clear_stgyid() ;
  const std::string& stgyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stgyid(Arg_&& arg, Args_... args);
  std::string* mutable_stgyid();
  PROTOBUF_NODISCARD std::string* release_stgyid();
  void set_allocated_stgyid(std::string* ptr);

  private:
  const std::string& _internal_stgyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stgyid(
      const std::string& value);
  std::string* _internal_mutable_stgyid();

  public:
  // optional string instID = 2;
  bool has_instid() const;
  void clear_instid() ;
  const std::string& instid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instid(Arg_&& arg, Args_... args);
  std::string* mutable_instid();
  PROTOBUF_NODISCARD std::string* release_instid();
  void set_allocated_instid(std::string* ptr);

  private:
  const std::string& _internal_instid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instid(
      const std::string& value);
  std::string* _internal_mutable_instid();

  public:
  // optional int64 orderRef = 3;
  bool has_orderref() const;
  void clear_orderref() ;
  ::int64_t orderref() const;
  void set_orderref(::int64_t value);

  private:
  ::int64_t _internal_orderref() const;
  void _internal_set_orderref(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ORDERS.CancelOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stgyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
    ::int64_t orderref_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};// -------------------------------------------------------------------

class RtnTrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ORDERS.RtnTrade) */ {
 public:
  inline RtnTrade() : RtnTrade(nullptr) {}
  ~RtnTrade() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RtnTrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtnTrade(const RtnTrade& from);
  RtnTrade(RtnTrade&& from) noexcept
    : RtnTrade() {
    *this = ::std::move(from);
  }

  inline RtnTrade& operator=(const RtnTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtnTrade& operator=(RtnTrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtnTrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtnTrade* internal_default_instance() {
    return reinterpret_cast<const RtnTrade*>(
               &_RtnTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RtnTrade& a, RtnTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(RtnTrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtnTrade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtnTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtnTrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtnTrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtnTrade& from) {
    RtnTrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtnTrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ORDERS.RtnTrade";
  }
  protected:
  explicit RtnTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStgyIDFieldNumber = 1,
    kProdIDFieldNumber = 2,
    kInstIDFieldNumber = 3,
    kExchIdFieldNumber = 9,
    kAvgPriceFieldNumber = 5,
    kTradedAmountFieldNumber = 4,
    kOrderTFieldNumber = 6,
    kOrderRefFieldNumber = 10,
    kRealDFieldNumber = 7,
  };
  // optional string stgyID = 1;
  bool has_stgyid() const;
  void clear_stgyid() ;
  const std::string& stgyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stgyid(Arg_&& arg, Args_... args);
  std::string* mutable_stgyid();
  PROTOBUF_NODISCARD std::string* release_stgyid();
  void set_allocated_stgyid(std::string* ptr);

  private:
  const std::string& _internal_stgyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stgyid(
      const std::string& value);
  std::string* _internal_mutable_stgyid();

  public:
  // optional string prodID = 2;
  bool has_prodid() const;
  void clear_prodid() ;
  const std::string& prodid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prodid(Arg_&& arg, Args_... args);
  std::string* mutable_prodid();
  PROTOBUF_NODISCARD std::string* release_prodid();
  void set_allocated_prodid(std::string* ptr);

  private:
  const std::string& _internal_prodid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prodid(
      const std::string& value);
  std::string* _internal_mutable_prodid();

  public:
  // optional string instID = 3;
  bool has_instid() const;
  void clear_instid() ;
  const std::string& instid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instid(Arg_&& arg, Args_... args);
  std::string* mutable_instid();
  PROTOBUF_NODISCARD std::string* release_instid();
  void set_allocated_instid(std::string* ptr);

  private:
  const std::string& _internal_instid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instid(
      const std::string& value);
  std::string* _internal_mutable_instid();

  public:
  // optional string exchId = 9;
  bool has_exchid() const;
  void clear_exchid() ;
  const std::string& exchid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchid(Arg_&& arg, Args_... args);
  std::string* mutable_exchid();
  PROTOBUF_NODISCARD std::string* release_exchid();
  void set_allocated_exchid(std::string* ptr);

  private:
  const std::string& _internal_exchid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchid(
      const std::string& value);
  std::string* _internal_mutable_exchid();

  public:
  // optional double avgPrice = 5;
  bool has_avgprice() const;
  void clear_avgprice() ;
  double avgprice() const;
  void set_avgprice(double value);

  private:
  double _internal_avgprice() const;
  void _internal_set_avgprice(double value);

  public:
  // optional int32 tradedAmount = 4;
  bool has_tradedamount() const;
  void clear_tradedamount() ;
  ::int32_t tradedamount() const;
  void set_tradedamount(::int32_t value);

  private:
  ::int32_t _internal_tradedamount() const;
  void _internal_set_tradedamount(::int32_t value);

  public:
  // optional .ORDERS.OrderType order_t = 6;
  bool has_order_t() const;
  void clear_order_t() ;
  ::ORDERS::OrderType order_t() const;
  void set_order_t(::ORDERS::OrderType value);

  private:
  ::ORDERS::OrderType _internal_order_t() const;
  void _internal_set_order_t(::ORDERS::OrderType value);

  public:
  // optional int64 orderRef = 10;
  bool has_orderref() const;
  void clear_orderref() ;
  ::int64_t orderref() const;
  void set_orderref(::int64_t value);

  private:
  ::int64_t _internal_orderref() const;
  void _internal_set_orderref(::int64_t value);

  public:
  // optional .ORDERS.OrderDirection real_d = 7;
  bool has_real_d() const;
  void clear_real_d() ;
  ::ORDERS::OrderDirection real_d() const;
  void set_real_d(::ORDERS::OrderDirection value);

  private:
  ::ORDERS::OrderDirection _internal_real_d() const;
  void _internal_set_real_d(::ORDERS::OrderDirection value);

  public:
  // @@protoc_insertion_point(class_scope:ORDERS.RtnTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stgyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prodid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchid_;
    double avgprice_;
    ::int32_t tradedamount_;
    int order_t_;
    ::int64_t orderref_;
    int real_d_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};// -------------------------------------------------------------------

class RtnOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ORDERS.RtnOrder) */ {
 public:
  inline RtnOrder() : RtnOrder(nullptr) {}
  ~RtnOrder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RtnOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtnOrder(const RtnOrder& from);
  RtnOrder(RtnOrder&& from) noexcept
    : RtnOrder() {
    *this = ::std::move(from);
  }

  inline RtnOrder& operator=(const RtnOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtnOrder& operator=(RtnOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtnOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtnOrder* internal_default_instance() {
    return reinterpret_cast<const RtnOrder*>(
               &_RtnOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RtnOrder& a, RtnOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(RtnOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtnOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtnOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtnOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtnOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtnOrder& from) {
    RtnOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtnOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ORDERS.RtnOrder";
  }
  protected:
  explicit RtnOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStgyIDFieldNumber = 1,
    kProdIDFieldNumber = 2,
    kInstIDFieldNumber = 3,
    kExchIdFieldNumber = 8,
    kStatusFieldNumber = 5,
    kStgyDFieldNumber = 6,
    kOrderRefFieldNumber = 9,
    kRealDFieldNumber = 7,
  };
  // optional string stgyID = 1;
  bool has_stgyid() const;
  void clear_stgyid() ;
  const std::string& stgyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stgyid(Arg_&& arg, Args_... args);
  std::string* mutable_stgyid();
  PROTOBUF_NODISCARD std::string* release_stgyid();
  void set_allocated_stgyid(std::string* ptr);

  private:
  const std::string& _internal_stgyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stgyid(
      const std::string& value);
  std::string* _internal_mutable_stgyid();

  public:
  // optional string prodID = 2;
  bool has_prodid() const;
  void clear_prodid() ;
  const std::string& prodid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prodid(Arg_&& arg, Args_... args);
  std::string* mutable_prodid();
  PROTOBUF_NODISCARD std::string* release_prodid();
  void set_allocated_prodid(std::string* ptr);

  private:
  const std::string& _internal_prodid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prodid(
      const std::string& value);
  std::string* _internal_mutable_prodid();

  public:
  // optional string instID = 3;
  bool has_instid() const;
  void clear_instid() ;
  const std::string& instid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instid(Arg_&& arg, Args_... args);
  std::string* mutable_instid();
  PROTOBUF_NODISCARD std::string* release_instid();
  void set_allocated_instid(std::string* ptr);

  private:
  const std::string& _internal_instid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instid(
      const std::string& value);
  std::string* _internal_mutable_instid();

  public:
  // optional string exchId = 8;
  bool has_exchid() const;
  void clear_exchid() ;
  const std::string& exchid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchid(Arg_&& arg, Args_... args);
  std::string* mutable_exchid();
  PROTOBUF_NODISCARD std::string* release_exchid();
  void set_allocated_exchid(std::string* ptr);

  private:
  const std::string& _internal_exchid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchid(
      const std::string& value);
  std::string* _internal_mutable_exchid();

  public:
  // optional .ORDERS.OrderStatus status = 5;
  bool has_status() const;
  void clear_status() ;
  ::ORDERS::OrderStatus status() const;
  void set_status(::ORDERS::OrderStatus value);

  private:
  ::ORDERS::OrderStatus _internal_status() const;
  void _internal_set_status(::ORDERS::OrderStatus value);

  public:
  // optional .ORDERS.OrderDirection stgy_d = 6;
  bool has_stgy_d() const;
  void clear_stgy_d() ;
  ::ORDERS::OrderDirection stgy_d() const;
  void set_stgy_d(::ORDERS::OrderDirection value);

  private:
  ::ORDERS::OrderDirection _internal_stgy_d() const;
  void _internal_set_stgy_d(::ORDERS::OrderDirection value);

  public:
  // optional int64 orderRef = 9;
  bool has_orderref() const;
  void clear_orderref() ;
  ::int64_t orderref() const;
  void set_orderref(::int64_t value);

  private:
  ::int64_t _internal_orderref() const;
  void _internal_set_orderref(::int64_t value);

  public:
  // optional .ORDERS.OrderDirection real_d = 7;
  bool has_real_d() const;
  void clear_real_d() ;
  ::ORDERS::OrderDirection real_d() const;
  void set_real_d(::ORDERS::OrderDirection value);

  private:
  ::ORDERS::OrderDirection _internal_real_d() const;
  void _internal_set_real_d(::ORDERS::OrderDirection value);

  public:
  // @@protoc_insertion_point(class_scope:ORDERS.RtnOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stgyid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prodid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchid_;
    int status_;
    int stgy_d_;
    ::int64_t orderref_;
    int real_d_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SubmitOrder

// optional string stgyID = 1;
inline bool SubmitOrder::has_stgyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SubmitOrder::clear_stgyid() {
  _impl_.stgyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubmitOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.stgyID)
  return _internal_stgyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitOrder::set_stgyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stgyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.stgyID)
}
inline std::string* SubmitOrder::mutable_stgyid() {
  std::string* _s = _internal_mutable_stgyid();
  // @@protoc_insertion_point(field_mutable:ORDERS.SubmitOrder.stgyID)
  return _s;
}
inline const std::string& SubmitOrder::_internal_stgyid() const {
  return _impl_.stgyid_.Get();
}
inline void SubmitOrder::_internal_set_stgyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.stgyid_.Set(value, GetArenaForAllocation());
}
inline std::string* SubmitOrder::_internal_mutable_stgyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stgyid_.Mutable( GetArenaForAllocation());
}
inline std::string* SubmitOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:ORDERS.SubmitOrder.stgyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stgyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stgyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SubmitOrder::set_allocated_stgyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stgyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stgyid_.IsDefault()) {
          _impl_.stgyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.SubmitOrder.stgyID)
}

// optional string prodID = 2;
inline bool SubmitOrder::has_prodid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SubmitOrder::clear_prodid() {
  _impl_.prodid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SubmitOrder::prodid() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.prodID)
  return _internal_prodid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitOrder::set_prodid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prodid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.prodID)
}
inline std::string* SubmitOrder::mutable_prodid() {
  std::string* _s = _internal_mutable_prodid();
  // @@protoc_insertion_point(field_mutable:ORDERS.SubmitOrder.prodID)
  return _s;
}
inline const std::string& SubmitOrder::_internal_prodid() const {
  return _impl_.prodid_.Get();
}
inline void SubmitOrder::_internal_set_prodid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.prodid_.Set(value, GetArenaForAllocation());
}
inline std::string* SubmitOrder::_internal_mutable_prodid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.prodid_.Mutable( GetArenaForAllocation());
}
inline std::string* SubmitOrder::release_prodid() {
  // @@protoc_insertion_point(field_release:ORDERS.SubmitOrder.prodID)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.prodid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prodid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SubmitOrder::set_allocated_prodid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prodid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prodid_.IsDefault()) {
          _impl_.prodid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.SubmitOrder.prodID)
}

// optional string instID = 3;
inline bool SubmitOrder::has_instid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SubmitOrder::clear_instid() {
  _impl_.instid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SubmitOrder::instid() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.instID)
  return _internal_instid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitOrder::set_instid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.instid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.instID)
}
inline std::string* SubmitOrder::mutable_instid() {
  std::string* _s = _internal_mutable_instid();
  // @@protoc_insertion_point(field_mutable:ORDERS.SubmitOrder.instID)
  return _s;
}
inline const std::string& SubmitOrder::_internal_instid() const {
  return _impl_.instid_.Get();
}
inline void SubmitOrder::_internal_set_instid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.instid_.Set(value, GetArenaForAllocation());
}
inline std::string* SubmitOrder::_internal_mutable_instid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.instid_.Mutable( GetArenaForAllocation());
}
inline std::string* SubmitOrder::release_instid() {
  // @@protoc_insertion_point(field_release:ORDERS.SubmitOrder.instID)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.instid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SubmitOrder::set_allocated_instid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.instid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instid_.IsDefault()) {
          _impl_.instid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.SubmitOrder.instID)
}

// optional int32 amount = 4;
inline bool SubmitOrder::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SubmitOrder::clear_amount() {
  _impl_.amount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t SubmitOrder::amount() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.amount)
  return _internal_amount();
}
inline void SubmitOrder::set_amount(::int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.amount)
}
inline ::int32_t SubmitOrder::_internal_amount() const {
  return _impl_.amount_;
}
inline void SubmitOrder::_internal_set_amount(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.amount_ = value;
}

// optional double price = 5;
inline bool SubmitOrder::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SubmitOrder::clear_price() {
  _impl_.price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SubmitOrder::price() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.price)
  return _internal_price();
}
inline void SubmitOrder::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.price)
}
inline double SubmitOrder::_internal_price() const {
  return _impl_.price_;
}
inline void SubmitOrder::_internal_set_price(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.price_ = value;
}

// optional .ORDERS.OrderType order_t = 6;
inline bool SubmitOrder::has_order_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SubmitOrder::clear_order_t() {
  _impl_.order_t_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::ORDERS::OrderType SubmitOrder::order_t() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.order_t)
  return _internal_order_t();
}
inline void SubmitOrder::set_order_t(::ORDERS::OrderType value) {
   _internal_set_order_t(value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.order_t)
}
inline ::ORDERS::OrderType SubmitOrder::_internal_order_t() const {
  return static_cast<::ORDERS::OrderType>(_impl_.order_t_);
}
inline void SubmitOrder::_internal_set_order_t(::ORDERS::OrderType value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.order_t_ = value;
}

// optional .ORDERS.OrderDirection stgy_d = 7;
inline bool SubmitOrder::has_stgy_d() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SubmitOrder::clear_stgy_d() {
  _impl_.stgy_d_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::ORDERS::OrderDirection SubmitOrder::stgy_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.stgy_d)
  return _internal_stgy_d();
}
inline void SubmitOrder::set_stgy_d(::ORDERS::OrderDirection value) {
   _internal_set_stgy_d(value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.stgy_d)
}
inline ::ORDERS::OrderDirection SubmitOrder::_internal_stgy_d() const {
  return static_cast<::ORDERS::OrderDirection>(_impl_.stgy_d_);
}
inline void SubmitOrder::_internal_set_stgy_d(::ORDERS::OrderDirection value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.stgy_d_ = value;
}

// optional .ORDERS.OrderDirection real_d = 8;
inline bool SubmitOrder::has_real_d() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SubmitOrder::clear_real_d() {
  _impl_.real_d_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::ORDERS::OrderDirection SubmitOrder::real_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.real_d)
  return _internal_real_d();
}
inline void SubmitOrder::set_real_d(::ORDERS::OrderDirection value) {
   _internal_set_real_d(value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.real_d)
}
inline ::ORDERS::OrderDirection SubmitOrder::_internal_real_d() const {
  return static_cast<::ORDERS::OrderDirection>(_impl_.real_d_);
}
inline void SubmitOrder::_internal_set_real_d(::ORDERS::OrderDirection value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.real_d_ = value;
}

// optional string exchId = 9;
inline bool SubmitOrder::has_exchid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SubmitOrder::clear_exchid() {
  _impl_.exchid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SubmitOrder::exchid() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.exchId)
  return _internal_exchid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitOrder::set_exchid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.exchid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.exchId)
}
inline std::string* SubmitOrder::mutable_exchid() {
  std::string* _s = _internal_mutable_exchid();
  // @@protoc_insertion_point(field_mutable:ORDERS.SubmitOrder.exchId)
  return _s;
}
inline const std::string& SubmitOrder::_internal_exchid() const {
  return _impl_.exchid_.Get();
}
inline void SubmitOrder::_internal_set_exchid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.exchid_.Set(value, GetArenaForAllocation());
}
inline std::string* SubmitOrder::_internal_mutable_exchid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.exchid_.Mutable( GetArenaForAllocation());
}
inline std::string* SubmitOrder::release_exchid() {
  // @@protoc_insertion_point(field_release:ORDERS.SubmitOrder.exchId)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.exchid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SubmitOrder::set_allocated_exchid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.exchid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchid_.IsDefault()) {
          _impl_.exchid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.SubmitOrder.exchId)
}

// optional int64 orderRef = 10;
inline bool SubmitOrder::has_orderref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SubmitOrder::clear_orderref() {
  _impl_.orderref_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t SubmitOrder::orderref() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.orderRef)
  return _internal_orderref();
}
inline void SubmitOrder::set_orderref(::int64_t value) {
  _internal_set_orderref(value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.orderRef)
}
inline ::int64_t SubmitOrder::_internal_orderref() const {
  return _impl_.orderref_;
}
inline void SubmitOrder::_internal_set_orderref(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.orderref_ = value;
}

// -------------------------------------------------------------------

// CancelOrder

// optional string stgyID = 1;
inline bool CancelOrder::has_stgyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CancelOrder::clear_stgyid() {
  _impl_.stgyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CancelOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:ORDERS.CancelOrder.stgyID)
  return _internal_stgyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelOrder::set_stgyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stgyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.CancelOrder.stgyID)
}
inline std::string* CancelOrder::mutable_stgyid() {
  std::string* _s = _internal_mutable_stgyid();
  // @@protoc_insertion_point(field_mutable:ORDERS.CancelOrder.stgyID)
  return _s;
}
inline const std::string& CancelOrder::_internal_stgyid() const {
  return _impl_.stgyid_.Get();
}
inline void CancelOrder::_internal_set_stgyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.stgyid_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelOrder::_internal_mutable_stgyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stgyid_.Mutable( GetArenaForAllocation());
}
inline std::string* CancelOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:ORDERS.CancelOrder.stgyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stgyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stgyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CancelOrder::set_allocated_stgyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stgyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stgyid_.IsDefault()) {
          _impl_.stgyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.CancelOrder.stgyID)
}

// optional string instID = 2;
inline bool CancelOrder::has_instid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CancelOrder::clear_instid() {
  _impl_.instid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CancelOrder::instid() const {
  // @@protoc_insertion_point(field_get:ORDERS.CancelOrder.instID)
  return _internal_instid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelOrder::set_instid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.CancelOrder.instID)
}
inline std::string* CancelOrder::mutable_instid() {
  std::string* _s = _internal_mutable_instid();
  // @@protoc_insertion_point(field_mutable:ORDERS.CancelOrder.instID)
  return _s;
}
inline const std::string& CancelOrder::_internal_instid() const {
  return _impl_.instid_.Get();
}
inline void CancelOrder::_internal_set_instid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.instid_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelOrder::_internal_mutable_instid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.instid_.Mutable( GetArenaForAllocation());
}
inline std::string* CancelOrder::release_instid() {
  // @@protoc_insertion_point(field_release:ORDERS.CancelOrder.instID)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.instid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CancelOrder::set_allocated_instid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.instid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instid_.IsDefault()) {
          _impl_.instid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.CancelOrder.instID)
}

// optional int64 orderRef = 3;
inline bool CancelOrder::has_orderref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CancelOrder::clear_orderref() {
  _impl_.orderref_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t CancelOrder::orderref() const {
  // @@protoc_insertion_point(field_get:ORDERS.CancelOrder.orderRef)
  return _internal_orderref();
}
inline void CancelOrder::set_orderref(::int64_t value) {
  _internal_set_orderref(value);
  // @@protoc_insertion_point(field_set:ORDERS.CancelOrder.orderRef)
}
inline ::int64_t CancelOrder::_internal_orderref() const {
  return _impl_.orderref_;
}
inline void CancelOrder::_internal_set_orderref(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.orderref_ = value;
}

// -------------------------------------------------------------------

// RtnTrade

// optional string stgyID = 1;
inline bool RtnTrade::has_stgyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RtnTrade::clear_stgyid() {
  _impl_.stgyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtnTrade::stgyid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.stgyID)
  return _internal_stgyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RtnTrade::set_stgyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stgyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.stgyID)
}
inline std::string* RtnTrade::mutable_stgyid() {
  std::string* _s = _internal_mutable_stgyid();
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnTrade.stgyID)
  return _s;
}
inline const std::string& RtnTrade::_internal_stgyid() const {
  return _impl_.stgyid_.Get();
}
inline void RtnTrade::_internal_set_stgyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.stgyid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtnTrade::_internal_mutable_stgyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stgyid_.Mutable( GetArenaForAllocation());
}
inline std::string* RtnTrade::release_stgyid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnTrade.stgyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stgyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stgyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RtnTrade::set_allocated_stgyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stgyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stgyid_.IsDefault()) {
          _impl_.stgyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnTrade.stgyID)
}

// optional string prodID = 2;
inline bool RtnTrade::has_prodid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RtnTrade::clear_prodid() {
  _impl_.prodid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RtnTrade::prodid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.prodID)
  return _internal_prodid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RtnTrade::set_prodid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prodid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.prodID)
}
inline std::string* RtnTrade::mutable_prodid() {
  std::string* _s = _internal_mutable_prodid();
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnTrade.prodID)
  return _s;
}
inline const std::string& RtnTrade::_internal_prodid() const {
  return _impl_.prodid_.Get();
}
inline void RtnTrade::_internal_set_prodid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.prodid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtnTrade::_internal_mutable_prodid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.prodid_.Mutable( GetArenaForAllocation());
}
inline std::string* RtnTrade::release_prodid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnTrade.prodID)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.prodid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prodid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RtnTrade::set_allocated_prodid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prodid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prodid_.IsDefault()) {
          _impl_.prodid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnTrade.prodID)
}

// optional string instID = 3;
inline bool RtnTrade::has_instid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RtnTrade::clear_instid() {
  _impl_.instid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RtnTrade::instid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.instID)
  return _internal_instid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RtnTrade::set_instid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.instid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.instID)
}
inline std::string* RtnTrade::mutable_instid() {
  std::string* _s = _internal_mutable_instid();
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnTrade.instID)
  return _s;
}
inline const std::string& RtnTrade::_internal_instid() const {
  return _impl_.instid_.Get();
}
inline void RtnTrade::_internal_set_instid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.instid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtnTrade::_internal_mutable_instid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.instid_.Mutable( GetArenaForAllocation());
}
inline std::string* RtnTrade::release_instid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnTrade.instID)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.instid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RtnTrade::set_allocated_instid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.instid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instid_.IsDefault()) {
          _impl_.instid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnTrade.instID)
}

// optional int32 tradedAmount = 4;
inline bool RtnTrade::has_tradedamount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RtnTrade::clear_tradedamount() {
  _impl_.tradedamount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t RtnTrade::tradedamount() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.tradedAmount)
  return _internal_tradedamount();
}
inline void RtnTrade::set_tradedamount(::int32_t value) {
  _internal_set_tradedamount(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.tradedAmount)
}
inline ::int32_t RtnTrade::_internal_tradedamount() const {
  return _impl_.tradedamount_;
}
inline void RtnTrade::_internal_set_tradedamount(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.tradedamount_ = value;
}

// optional double avgPrice = 5;
inline bool RtnTrade::has_avgprice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RtnTrade::clear_avgprice() {
  _impl_.avgprice_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double RtnTrade::avgprice() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.avgPrice)
  return _internal_avgprice();
}
inline void RtnTrade::set_avgprice(double value) {
  _internal_set_avgprice(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.avgPrice)
}
inline double RtnTrade::_internal_avgprice() const {
  return _impl_.avgprice_;
}
inline void RtnTrade::_internal_set_avgprice(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.avgprice_ = value;
}

// optional .ORDERS.OrderType order_t = 6;
inline bool RtnTrade::has_order_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void RtnTrade::clear_order_t() {
  _impl_.order_t_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::ORDERS::OrderType RtnTrade::order_t() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.order_t)
  return _internal_order_t();
}
inline void RtnTrade::set_order_t(::ORDERS::OrderType value) {
   _internal_set_order_t(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.order_t)
}
inline ::ORDERS::OrderType RtnTrade::_internal_order_t() const {
  return static_cast<::ORDERS::OrderType>(_impl_.order_t_);
}
inline void RtnTrade::_internal_set_order_t(::ORDERS::OrderType value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.order_t_ = value;
}

// optional .ORDERS.OrderDirection real_d = 7;
inline bool RtnTrade::has_real_d() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void RtnTrade::clear_real_d() {
  _impl_.real_d_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::ORDERS::OrderDirection RtnTrade::real_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.real_d)
  return _internal_real_d();
}
inline void RtnTrade::set_real_d(::ORDERS::OrderDirection value) {
   _internal_set_real_d(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.real_d)
}
inline ::ORDERS::OrderDirection RtnTrade::_internal_real_d() const {
  return static_cast<::ORDERS::OrderDirection>(_impl_.real_d_);
}
inline void RtnTrade::_internal_set_real_d(::ORDERS::OrderDirection value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.real_d_ = value;
}

// optional string exchId = 9;
inline bool RtnTrade::has_exchid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RtnTrade::clear_exchid() {
  _impl_.exchid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RtnTrade::exchid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.exchId)
  return _internal_exchid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RtnTrade::set_exchid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.exchid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.exchId)
}
inline std::string* RtnTrade::mutable_exchid() {
  std::string* _s = _internal_mutable_exchid();
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnTrade.exchId)
  return _s;
}
inline const std::string& RtnTrade::_internal_exchid() const {
  return _impl_.exchid_.Get();
}
inline void RtnTrade::_internal_set_exchid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.exchid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtnTrade::_internal_mutable_exchid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.exchid_.Mutable( GetArenaForAllocation());
}
inline std::string* RtnTrade::release_exchid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnTrade.exchId)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.exchid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RtnTrade::set_allocated_exchid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.exchid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchid_.IsDefault()) {
          _impl_.exchid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnTrade.exchId)
}

// optional int64 orderRef = 10;
inline bool RtnTrade::has_orderref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void RtnTrade::clear_orderref() {
  _impl_.orderref_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t RtnTrade::orderref() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.orderRef)
  return _internal_orderref();
}
inline void RtnTrade::set_orderref(::int64_t value) {
  _internal_set_orderref(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.orderRef)
}
inline ::int64_t RtnTrade::_internal_orderref() const {
  return _impl_.orderref_;
}
inline void RtnTrade::_internal_set_orderref(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.orderref_ = value;
}

// -------------------------------------------------------------------

// RtnOrder

// optional string stgyID = 1;
inline bool RtnOrder::has_stgyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RtnOrder::clear_stgyid() {
  _impl_.stgyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RtnOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.stgyID)
  return _internal_stgyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RtnOrder::set_stgyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stgyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.stgyID)
}
inline std::string* RtnOrder::mutable_stgyid() {
  std::string* _s = _internal_mutable_stgyid();
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnOrder.stgyID)
  return _s;
}
inline const std::string& RtnOrder::_internal_stgyid() const {
  return _impl_.stgyid_.Get();
}
inline void RtnOrder::_internal_set_stgyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.stgyid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtnOrder::_internal_mutable_stgyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stgyid_.Mutable( GetArenaForAllocation());
}
inline std::string* RtnOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnOrder.stgyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stgyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stgyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RtnOrder::set_allocated_stgyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stgyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stgyid_.IsDefault()) {
          _impl_.stgyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnOrder.stgyID)
}

// optional string prodID = 2;
inline bool RtnOrder::has_prodid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RtnOrder::clear_prodid() {
  _impl_.prodid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RtnOrder::prodid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.prodID)
  return _internal_prodid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RtnOrder::set_prodid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prodid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.prodID)
}
inline std::string* RtnOrder::mutable_prodid() {
  std::string* _s = _internal_mutable_prodid();
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnOrder.prodID)
  return _s;
}
inline const std::string& RtnOrder::_internal_prodid() const {
  return _impl_.prodid_.Get();
}
inline void RtnOrder::_internal_set_prodid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.prodid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtnOrder::_internal_mutable_prodid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.prodid_.Mutable( GetArenaForAllocation());
}
inline std::string* RtnOrder::release_prodid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnOrder.prodID)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.prodid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prodid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RtnOrder::set_allocated_prodid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prodid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prodid_.IsDefault()) {
          _impl_.prodid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnOrder.prodID)
}

// optional string instID = 3;
inline bool RtnOrder::has_instid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RtnOrder::clear_instid() {
  _impl_.instid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RtnOrder::instid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.instID)
  return _internal_instid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RtnOrder::set_instid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.instid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.instID)
}
inline std::string* RtnOrder::mutable_instid() {
  std::string* _s = _internal_mutable_instid();
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnOrder.instID)
  return _s;
}
inline const std::string& RtnOrder::_internal_instid() const {
  return _impl_.instid_.Get();
}
inline void RtnOrder::_internal_set_instid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.instid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtnOrder::_internal_mutable_instid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.instid_.Mutable( GetArenaForAllocation());
}
inline std::string* RtnOrder::release_instid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnOrder.instID)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.instid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RtnOrder::set_allocated_instid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.instid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instid_.IsDefault()) {
          _impl_.instid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnOrder.instID)
}

// optional .ORDERS.OrderStatus status = 5;
inline bool RtnOrder::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RtnOrder::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::ORDERS::OrderStatus RtnOrder::status() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.status)
  return _internal_status();
}
inline void RtnOrder::set_status(::ORDERS::OrderStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.status)
}
inline ::ORDERS::OrderStatus RtnOrder::_internal_status() const {
  return static_cast<::ORDERS::OrderStatus>(_impl_.status_);
}
inline void RtnOrder::_internal_set_status(::ORDERS::OrderStatus value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_ = value;
}

// optional .ORDERS.OrderDirection stgy_d = 6;
inline bool RtnOrder::has_stgy_d() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RtnOrder::clear_stgy_d() {
  _impl_.stgy_d_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::ORDERS::OrderDirection RtnOrder::stgy_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.stgy_d)
  return _internal_stgy_d();
}
inline void RtnOrder::set_stgy_d(::ORDERS::OrderDirection value) {
   _internal_set_stgy_d(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.stgy_d)
}
inline ::ORDERS::OrderDirection RtnOrder::_internal_stgy_d() const {
  return static_cast<::ORDERS::OrderDirection>(_impl_.stgy_d_);
}
inline void RtnOrder::_internal_set_stgy_d(::ORDERS::OrderDirection value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.stgy_d_ = value;
}

// optional .ORDERS.OrderDirection real_d = 7;
inline bool RtnOrder::has_real_d() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void RtnOrder::clear_real_d() {
  _impl_.real_d_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::ORDERS::OrderDirection RtnOrder::real_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.real_d)
  return _internal_real_d();
}
inline void RtnOrder::set_real_d(::ORDERS::OrderDirection value) {
   _internal_set_real_d(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.real_d)
}
inline ::ORDERS::OrderDirection RtnOrder::_internal_real_d() const {
  return static_cast<::ORDERS::OrderDirection>(_impl_.real_d_);
}
inline void RtnOrder::_internal_set_real_d(::ORDERS::OrderDirection value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.real_d_ = value;
}

// optional string exchId = 8;
inline bool RtnOrder::has_exchid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RtnOrder::clear_exchid() {
  _impl_.exchid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RtnOrder::exchid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.exchId)
  return _internal_exchid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RtnOrder::set_exchid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.exchid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.exchId)
}
inline std::string* RtnOrder::mutable_exchid() {
  std::string* _s = _internal_mutable_exchid();
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnOrder.exchId)
  return _s;
}
inline const std::string& RtnOrder::_internal_exchid() const {
  return _impl_.exchid_.Get();
}
inline void RtnOrder::_internal_set_exchid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.exchid_.Set(value, GetArenaForAllocation());
}
inline std::string* RtnOrder::_internal_mutable_exchid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.exchid_.Mutable( GetArenaForAllocation());
}
inline std::string* RtnOrder::release_exchid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnOrder.exchId)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.exchid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RtnOrder::set_allocated_exchid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.exchid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchid_.IsDefault()) {
          _impl_.exchid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnOrder.exchId)
}

// optional int64 orderRef = 9;
inline bool RtnOrder::has_orderref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void RtnOrder::clear_orderref() {
  _impl_.orderref_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t RtnOrder::orderref() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.orderRef)
  return _internal_orderref();
}
inline void RtnOrder::set_orderref(::int64_t value) {
  _internal_set_orderref(value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.orderRef)
}
inline ::int64_t RtnOrder::_internal_orderref() const {
  return _impl_.orderref_;
}
inline void RtnOrder::_internal_set_orderref(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.orderref_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ORDERS


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::ORDERS::OrderType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ORDERS::OrderType>() {
  return ::ORDERS::OrderType_descriptor();
}
template <>
struct is_proto_enum<::ORDERS::OrderDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ORDERS::OrderDirection>() {
  return ::ORDERS::OrderDirection_descriptor();
}
template <>
struct is_proto_enum<::ORDERS::OrderStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ORDERS::OrderStatus>() {
  return ::ORDERS::OrderStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_order_2eproto_2epb_2eh

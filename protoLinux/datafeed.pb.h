// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datafeed.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datafeed_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datafeed_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datafeed_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datafeed_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datafeed_2eproto;
namespace datafeed {
class FutureDefinition;
class FutureDefinitionDefaultTypeInternal;
extern FutureDefinitionDefaultTypeInternal _FutureDefinition_default_instance_;
class PriceQuantity;
class PriceQuantityDefaultTypeInternal;
extern PriceQuantityDefaultTypeInternal _PriceQuantity_default_instance_;
class TickData;
class TickDataDefaultTypeInternal;
extern TickDataDefaultTypeInternal _TickData_default_instance_;
}  // namespace datafeed
PROTOBUF_NAMESPACE_OPEN
template<> ::datafeed::FutureDefinition* Arena::CreateMaybeMessage<::datafeed::FutureDefinition>(Arena*);
template<> ::datafeed::PriceQuantity* Arena::CreateMaybeMessage<::datafeed::PriceQuantity>(Arena*);
template<> ::datafeed::TickData* Arena::CreateMaybeMessage<::datafeed::TickData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace datafeed {

// ===================================================================

class FutureDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datafeed.FutureDefinition) */ {
 public:
  inline FutureDefinition() : FutureDefinition(nullptr) {};
  virtual ~FutureDefinition();

  FutureDefinition(const FutureDefinition& from);
  FutureDefinition(FutureDefinition&& from) noexcept
    : FutureDefinition() {
    *this = ::std::move(from);
  }

  inline FutureDefinition& operator=(const FutureDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline FutureDefinition& operator=(FutureDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FutureDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FutureDefinition* internal_default_instance() {
    return reinterpret_cast<const FutureDefinition*>(
               &_FutureDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FutureDefinition& a, FutureDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(FutureDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FutureDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FutureDefinition* New() const final {
    return CreateMaybeMessage<FutureDefinition>(nullptr);
  }

  FutureDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FutureDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FutureDefinition& from);
  void MergeFrom(const FutureDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FutureDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datafeed.FutureDefinition";
  }
  protected:
  explicit FutureDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datafeed_2eproto);
    return ::descriptor_table_datafeed_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIDFieldNumber = 1,
    kProductFieldNumber = 3,
    kExchangeIDFieldNumber = 4,
    kExpireDateFieldNumber = 7,
    kPriceTickFieldNumber = 5,
    kMultiplierFieldNumber = 6,
  };
  // string InstrumentID = 1;
  void clear_instrumentid();
  const std::string& instrumentid() const;
  void set_instrumentid(const std::string& value);
  void set_instrumentid(std::string&& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  std::string* mutable_instrumentid();
  std::string* release_instrumentid();
  void set_allocated_instrumentid(std::string* instrumentid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentid(
      std::string* instrumentid);
  private:
  const std::string& _internal_instrumentid() const;
  void _internal_set_instrumentid(const std::string& value);
  std::string* _internal_mutable_instrumentid();
  public:

  // string Product = 3;
  void clear_product();
  const std::string& product() const;
  void set_product(const std::string& value);
  void set_product(std::string&& value);
  void set_product(const char* value);
  void set_product(const char* value, size_t size);
  std::string* mutable_product();
  std::string* release_product();
  void set_allocated_product(std::string* product);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_product();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_product(
      std::string* product);
  private:
  const std::string& _internal_product() const;
  void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // string ExchangeID = 4;
  void clear_exchangeid();
  const std::string& exchangeid() const;
  void set_exchangeid(const std::string& value);
  void set_exchangeid(std::string&& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  std::string* mutable_exchangeid();
  std::string* release_exchangeid();
  void set_allocated_exchangeid(std::string* exchangeid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchangeid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchangeid(
      std::string* exchangeid);
  private:
  const std::string& _internal_exchangeid() const;
  void _internal_set_exchangeid(const std::string& value);
  std::string* _internal_mutable_exchangeid();
  public:

  // string ExpireDate = 7;
  void clear_expiredate();
  const std::string& expiredate() const;
  void set_expiredate(const std::string& value);
  void set_expiredate(std::string&& value);
  void set_expiredate(const char* value);
  void set_expiredate(const char* value, size_t size);
  std::string* mutable_expiredate();
  std::string* release_expiredate();
  void set_allocated_expiredate(std::string* expiredate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_expiredate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_expiredate(
      std::string* expiredate);
  private:
  const std::string& _internal_expiredate() const;
  void _internal_set_expiredate(const std::string& value);
  std::string* _internal_mutable_expiredate();
  public:

  // double PriceTick = 5;
  void clear_pricetick();
  double pricetick() const;
  void set_pricetick(double value);
  private:
  double _internal_pricetick() const;
  void _internal_set_pricetick(double value);
  public:

  // double Multiplier = 6;
  void clear_multiplier();
  double multiplier() const;
  void set_multiplier(double value);
  private:
  double _internal_multiplier() const;
  void _internal_set_multiplier(double value);
  public:

  // @@protoc_insertion_point(class_scope:datafeed.FutureDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiredate_;
  double pricetick_;
  double multiplier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datafeed_2eproto;
};
// -------------------------------------------------------------------

class PriceQuantity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datafeed.PriceQuantity) */ {
 public:
  inline PriceQuantity() : PriceQuantity(nullptr) {};
  virtual ~PriceQuantity();

  PriceQuantity(const PriceQuantity& from);
  PriceQuantity(PriceQuantity&& from) noexcept
    : PriceQuantity() {
    *this = ::std::move(from);
  }

  inline PriceQuantity& operator=(const PriceQuantity& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceQuantity& operator=(PriceQuantity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceQuantity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceQuantity* internal_default_instance() {
    return reinterpret_cast<const PriceQuantity*>(
               &_PriceQuantity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PriceQuantity& a, PriceQuantity& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceQuantity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceQuantity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceQuantity* New() const final {
    return CreateMaybeMessage<PriceQuantity>(nullptr);
  }

  PriceQuantity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceQuantity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceQuantity& from);
  void MergeFrom(const PriceQuantity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceQuantity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datafeed.PriceQuantity";
  }
  protected:
  explicit PriceQuantity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datafeed_2eproto);
    return ::descriptor_table_datafeed_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // double price = 1;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:datafeed.PriceQuantity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int64 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datafeed_2eproto;
};
// -------------------------------------------------------------------

class TickData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datafeed.TickData) */ {
 public:
  inline TickData() : TickData(nullptr) {};
  virtual ~TickData();

  TickData(const TickData& from);
  TickData(TickData&& from) noexcept
    : TickData() {
    *this = ::std::move(from);
  }

  inline TickData& operator=(const TickData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickData& operator=(TickData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TickData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickData* internal_default_instance() {
    return reinterpret_cast<const TickData*>(
               &_TickData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TickData& a, TickData& b) {
    a.Swap(&b);
  }
  inline void Swap(TickData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickData* New() const final {
    return CreateMaybeMessage<TickData>(nullptr);
  }

  TickData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickData& from);
  void MergeFrom(const TickData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datafeed.TickData";
  }
  protected:
  explicit TickData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datafeed_2eproto);
    return ::descriptor_table_datafeed_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractFieldNumber = 1,
    kExchangeidFieldNumber = 3,
    kTradingdateFieldNumber = 23,
    kExchangetimeFieldNumber = 24,
    kBid1FieldNumber = 4,
    kBid2FieldNumber = 5,
    kBid3FieldNumber = 6,
    kBid4FieldNumber = 7,
    kBid5FieldNumber = 8,
    kAsk1FieldNumber = 9,
    kAsk2FieldNumber = 10,
    kAsk3FieldNumber = 11,
    kAsk4FieldNumber = 12,
    kAsk5FieldNumber = 13,
    kLastTradePriceFieldNumber = 14,
    kOpenFieldNumber = 15,
    kHighestFieldNumber = 16,
    kLowestFieldNumber = 17,
    kVolumeFieldNumber = 18,
    kTurnoverFieldNumber = 19,
    kOpenInterestFieldNumber = 20,
    kAveragePriceFieldNumber = 21,
    kPreSettlementFieldNumber = 22,
    kUpperlimitpriceFieldNumber = 25,
    kLowlimitpriceFieldNumber = 26,
  };
  // string contract = 1;
  void clear_contract();
  const std::string& contract() const;
  void set_contract(const std::string& value);
  void set_contract(std::string&& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  std::string* mutable_contract();
  std::string* release_contract();
  void set_allocated_contract(std::string* contract);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract(
      std::string* contract);
  private:
  const std::string& _internal_contract() const;
  void _internal_set_contract(const std::string& value);
  std::string* _internal_mutable_contract();
  public:

  // string exchangeid = 3;
  void clear_exchangeid();
  const std::string& exchangeid() const;
  void set_exchangeid(const std::string& value);
  void set_exchangeid(std::string&& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  std::string* mutable_exchangeid();
  std::string* release_exchangeid();
  void set_allocated_exchangeid(std::string* exchangeid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchangeid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchangeid(
      std::string* exchangeid);
  private:
  const std::string& _internal_exchangeid() const;
  void _internal_set_exchangeid(const std::string& value);
  std::string* _internal_mutable_exchangeid();
  public:

  // string tradingdate = 23;
  void clear_tradingdate();
  const std::string& tradingdate() const;
  void set_tradingdate(const std::string& value);
  void set_tradingdate(std::string&& value);
  void set_tradingdate(const char* value);
  void set_tradingdate(const char* value, size_t size);
  std::string* mutable_tradingdate();
  std::string* release_tradingdate();
  void set_allocated_tradingdate(std::string* tradingdate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tradingdate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tradingdate(
      std::string* tradingdate);
  private:
  const std::string& _internal_tradingdate() const;
  void _internal_set_tradingdate(const std::string& value);
  std::string* _internal_mutable_tradingdate();
  public:

  // string exchangetime = 24;
  void clear_exchangetime();
  const std::string& exchangetime() const;
  void set_exchangetime(const std::string& value);
  void set_exchangetime(std::string&& value);
  void set_exchangetime(const char* value);
  void set_exchangetime(const char* value, size_t size);
  std::string* mutable_exchangetime();
  std::string* release_exchangetime();
  void set_allocated_exchangetime(std::string* exchangetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchangetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchangetime(
      std::string* exchangetime);
  private:
  const std::string& _internal_exchangetime() const;
  void _internal_set_exchangetime(const std::string& value);
  std::string* _internal_mutable_exchangetime();
  public:

  // .datafeed.PriceQuantity bid1 = 4;
  bool has_bid1() const;
  private:
  bool _internal_has_bid1() const;
  public:
  void clear_bid1();
  const ::datafeed::PriceQuantity& bid1() const;
  ::datafeed::PriceQuantity* release_bid1();
  ::datafeed::PriceQuantity* mutable_bid1();
  void set_allocated_bid1(::datafeed::PriceQuantity* bid1);
  private:
  const ::datafeed::PriceQuantity& _internal_bid1() const;
  ::datafeed::PriceQuantity* _internal_mutable_bid1();
  public:
  void unsafe_arena_set_allocated_bid1(
      ::datafeed::PriceQuantity* bid1);
  ::datafeed::PriceQuantity* unsafe_arena_release_bid1();

  // .datafeed.PriceQuantity bid2 = 5;
  bool has_bid2() const;
  private:
  bool _internal_has_bid2() const;
  public:
  void clear_bid2();
  const ::datafeed::PriceQuantity& bid2() const;
  ::datafeed::PriceQuantity* release_bid2();
  ::datafeed::PriceQuantity* mutable_bid2();
  void set_allocated_bid2(::datafeed::PriceQuantity* bid2);
  private:
  const ::datafeed::PriceQuantity& _internal_bid2() const;
  ::datafeed::PriceQuantity* _internal_mutable_bid2();
  public:
  void unsafe_arena_set_allocated_bid2(
      ::datafeed::PriceQuantity* bid2);
  ::datafeed::PriceQuantity* unsafe_arena_release_bid2();

  // .datafeed.PriceQuantity bid3 = 6;
  bool has_bid3() const;
  private:
  bool _internal_has_bid3() const;
  public:
  void clear_bid3();
  const ::datafeed::PriceQuantity& bid3() const;
  ::datafeed::PriceQuantity* release_bid3();
  ::datafeed::PriceQuantity* mutable_bid3();
  void set_allocated_bid3(::datafeed::PriceQuantity* bid3);
  private:
  const ::datafeed::PriceQuantity& _internal_bid3() const;
  ::datafeed::PriceQuantity* _internal_mutable_bid3();
  public:
  void unsafe_arena_set_allocated_bid3(
      ::datafeed::PriceQuantity* bid3);
  ::datafeed::PriceQuantity* unsafe_arena_release_bid3();

  // .datafeed.PriceQuantity bid4 = 7;
  bool has_bid4() const;
  private:
  bool _internal_has_bid4() const;
  public:
  void clear_bid4();
  const ::datafeed::PriceQuantity& bid4() const;
  ::datafeed::PriceQuantity* release_bid4();
  ::datafeed::PriceQuantity* mutable_bid4();
  void set_allocated_bid4(::datafeed::PriceQuantity* bid4);
  private:
  const ::datafeed::PriceQuantity& _internal_bid4() const;
  ::datafeed::PriceQuantity* _internal_mutable_bid4();
  public:
  void unsafe_arena_set_allocated_bid4(
      ::datafeed::PriceQuantity* bid4);
  ::datafeed::PriceQuantity* unsafe_arena_release_bid4();

  // .datafeed.PriceQuantity bid5 = 8;
  bool has_bid5() const;
  private:
  bool _internal_has_bid5() const;
  public:
  void clear_bid5();
  const ::datafeed::PriceQuantity& bid5() const;
  ::datafeed::PriceQuantity* release_bid5();
  ::datafeed::PriceQuantity* mutable_bid5();
  void set_allocated_bid5(::datafeed::PriceQuantity* bid5);
  private:
  const ::datafeed::PriceQuantity& _internal_bid5() const;
  ::datafeed::PriceQuantity* _internal_mutable_bid5();
  public:
  void unsafe_arena_set_allocated_bid5(
      ::datafeed::PriceQuantity* bid5);
  ::datafeed::PriceQuantity* unsafe_arena_release_bid5();

  // .datafeed.PriceQuantity ask1 = 9;
  bool has_ask1() const;
  private:
  bool _internal_has_ask1() const;
  public:
  void clear_ask1();
  const ::datafeed::PriceQuantity& ask1() const;
  ::datafeed::PriceQuantity* release_ask1();
  ::datafeed::PriceQuantity* mutable_ask1();
  void set_allocated_ask1(::datafeed::PriceQuantity* ask1);
  private:
  const ::datafeed::PriceQuantity& _internal_ask1() const;
  ::datafeed::PriceQuantity* _internal_mutable_ask1();
  public:
  void unsafe_arena_set_allocated_ask1(
      ::datafeed::PriceQuantity* ask1);
  ::datafeed::PriceQuantity* unsafe_arena_release_ask1();

  // .datafeed.PriceQuantity ask2 = 10;
  bool has_ask2() const;
  private:
  bool _internal_has_ask2() const;
  public:
  void clear_ask2();
  const ::datafeed::PriceQuantity& ask2() const;
  ::datafeed::PriceQuantity* release_ask2();
  ::datafeed::PriceQuantity* mutable_ask2();
  void set_allocated_ask2(::datafeed::PriceQuantity* ask2);
  private:
  const ::datafeed::PriceQuantity& _internal_ask2() const;
  ::datafeed::PriceQuantity* _internal_mutable_ask2();
  public:
  void unsafe_arena_set_allocated_ask2(
      ::datafeed::PriceQuantity* ask2);
  ::datafeed::PriceQuantity* unsafe_arena_release_ask2();

  // .datafeed.PriceQuantity ask3 = 11;
  bool has_ask3() const;
  private:
  bool _internal_has_ask3() const;
  public:
  void clear_ask3();
  const ::datafeed::PriceQuantity& ask3() const;
  ::datafeed::PriceQuantity* release_ask3();
  ::datafeed::PriceQuantity* mutable_ask3();
  void set_allocated_ask3(::datafeed::PriceQuantity* ask3);
  private:
  const ::datafeed::PriceQuantity& _internal_ask3() const;
  ::datafeed::PriceQuantity* _internal_mutable_ask3();
  public:
  void unsafe_arena_set_allocated_ask3(
      ::datafeed::PriceQuantity* ask3);
  ::datafeed::PriceQuantity* unsafe_arena_release_ask3();

  // .datafeed.PriceQuantity ask4 = 12;
  bool has_ask4() const;
  private:
  bool _internal_has_ask4() const;
  public:
  void clear_ask4();
  const ::datafeed::PriceQuantity& ask4() const;
  ::datafeed::PriceQuantity* release_ask4();
  ::datafeed::PriceQuantity* mutable_ask4();
  void set_allocated_ask4(::datafeed::PriceQuantity* ask4);
  private:
  const ::datafeed::PriceQuantity& _internal_ask4() const;
  ::datafeed::PriceQuantity* _internal_mutable_ask4();
  public:
  void unsafe_arena_set_allocated_ask4(
      ::datafeed::PriceQuantity* ask4);
  ::datafeed::PriceQuantity* unsafe_arena_release_ask4();

  // .datafeed.PriceQuantity ask5 = 13;
  bool has_ask5() const;
  private:
  bool _internal_has_ask5() const;
  public:
  void clear_ask5();
  const ::datafeed::PriceQuantity& ask5() const;
  ::datafeed::PriceQuantity* release_ask5();
  ::datafeed::PriceQuantity* mutable_ask5();
  void set_allocated_ask5(::datafeed::PriceQuantity* ask5);
  private:
  const ::datafeed::PriceQuantity& _internal_ask5() const;
  ::datafeed::PriceQuantity* _internal_mutable_ask5();
  public:
  void unsafe_arena_set_allocated_ask5(
      ::datafeed::PriceQuantity* ask5);
  ::datafeed::PriceQuantity* unsafe_arena_release_ask5();

  // double lastTradePrice = 14;
  void clear_lasttradeprice();
  double lasttradeprice() const;
  void set_lasttradeprice(double value);
  private:
  double _internal_lasttradeprice() const;
  void _internal_set_lasttradeprice(double value);
  public:

  // double open = 15;
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // double highest = 16;
  void clear_highest();
  double highest() const;
  void set_highest(double value);
  private:
  double _internal_highest() const;
  void _internal_set_highest(double value);
  public:

  // double lowest = 17;
  void clear_lowest();
  double lowest() const;
  void set_lowest(double value);
  private:
  double _internal_lowest() const;
  void _internal_set_lowest(double value);
  public:

  // int64 volume = 18;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double turnover = 19;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double openInterest = 20;
  void clear_openinterest();
  double openinterest() const;
  void set_openinterest(double value);
  private:
  double _internal_openinterest() const;
  void _internal_set_openinterest(double value);
  public:

  // double averagePrice = 21;
  void clear_averageprice();
  double averageprice() const;
  void set_averageprice(double value);
  private:
  double _internal_averageprice() const;
  void _internal_set_averageprice(double value);
  public:

  // double preSettlement = 22;
  void clear_presettlement();
  double presettlement() const;
  void set_presettlement(double value);
  private:
  double _internal_presettlement() const;
  void _internal_set_presettlement(double value);
  public:

  // double upperlimitprice = 25;
  void clear_upperlimitprice();
  double upperlimitprice() const;
  void set_upperlimitprice(double value);
  private:
  double _internal_upperlimitprice() const;
  void _internal_set_upperlimitprice(double value);
  public:

  // double lowlimitprice = 26;
  void clear_lowlimitprice();
  double lowlimitprice() const;
  void set_lowlimitprice(double value);
  private:
  double _internal_lowlimitprice() const;
  void _internal_set_lowlimitprice(double value);
  public:

  // @@protoc_insertion_point(class_scope:datafeed.TickData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangetime_;
  ::datafeed::PriceQuantity* bid1_;
  ::datafeed::PriceQuantity* bid2_;
  ::datafeed::PriceQuantity* bid3_;
  ::datafeed::PriceQuantity* bid4_;
  ::datafeed::PriceQuantity* bid5_;
  ::datafeed::PriceQuantity* ask1_;
  ::datafeed::PriceQuantity* ask2_;
  ::datafeed::PriceQuantity* ask3_;
  ::datafeed::PriceQuantity* ask4_;
  ::datafeed::PriceQuantity* ask5_;
  double lasttradeprice_;
  double open_;
  double highest_;
  double lowest_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  double turnover_;
  double openinterest_;
  double averageprice_;
  double presettlement_;
  double upperlimitprice_;
  double lowlimitprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datafeed_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FutureDefinition

// string InstrumentID = 1;
inline void FutureDefinition::clear_instrumentid() {
  instrumentid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FutureDefinition::instrumentid() const {
  // @@protoc_insertion_point(field_get:datafeed.FutureDefinition.InstrumentID)
  return _internal_instrumentid();
}
inline void FutureDefinition::set_instrumentid(const std::string& value) {
  _internal_set_instrumentid(value);
  // @@protoc_insertion_point(field_set:datafeed.FutureDefinition.InstrumentID)
}
inline std::string* FutureDefinition::mutable_instrumentid() {
  // @@protoc_insertion_point(field_mutable:datafeed.FutureDefinition.InstrumentID)
  return _internal_mutable_instrumentid();
}
inline const std::string& FutureDefinition::_internal_instrumentid() const {
  return instrumentid_.Get();
}
inline void FutureDefinition::_internal_set_instrumentid(const std::string& value) {
  
  instrumentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FutureDefinition::set_instrumentid(std::string&& value) {
  
  instrumentid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datafeed.FutureDefinition.InstrumentID)
}
inline void FutureDefinition::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datafeed.FutureDefinition.InstrumentID)
}
inline void FutureDefinition::set_instrumentid(const char* value,
    size_t size) {
  
  instrumentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datafeed.FutureDefinition.InstrumentID)
}
inline std::string* FutureDefinition::_internal_mutable_instrumentid() {
  
  return instrumentid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FutureDefinition::release_instrumentid() {
  // @@protoc_insertion_point(field_release:datafeed.FutureDefinition.InstrumentID)
  return instrumentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FutureDefinition::set_allocated_instrumentid(std::string* instrumentid) {
  if (instrumentid != nullptr) {
    
  } else {
    
  }
  instrumentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datafeed.FutureDefinition.InstrumentID)
}
inline std::string* FutureDefinition::unsafe_arena_release_instrumentid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datafeed.FutureDefinition.InstrumentID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FutureDefinition::unsafe_arena_set_allocated_instrumentid(
    std::string* instrumentid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentid != nullptr) {
    
  } else {
    
  }
  instrumentid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.FutureDefinition.InstrumentID)
}

// string Product = 3;
inline void FutureDefinition::clear_product() {
  product_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FutureDefinition::product() const {
  // @@protoc_insertion_point(field_get:datafeed.FutureDefinition.Product)
  return _internal_product();
}
inline void FutureDefinition::set_product(const std::string& value) {
  _internal_set_product(value);
  // @@protoc_insertion_point(field_set:datafeed.FutureDefinition.Product)
}
inline std::string* FutureDefinition::mutable_product() {
  // @@protoc_insertion_point(field_mutable:datafeed.FutureDefinition.Product)
  return _internal_mutable_product();
}
inline const std::string& FutureDefinition::_internal_product() const {
  return product_.Get();
}
inline void FutureDefinition::_internal_set_product(const std::string& value) {
  
  product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FutureDefinition::set_product(std::string&& value) {
  
  product_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datafeed.FutureDefinition.Product)
}
inline void FutureDefinition::set_product(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datafeed.FutureDefinition.Product)
}
inline void FutureDefinition::set_product(const char* value,
    size_t size) {
  
  product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datafeed.FutureDefinition.Product)
}
inline std::string* FutureDefinition::_internal_mutable_product() {
  
  return product_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FutureDefinition::release_product() {
  // @@protoc_insertion_point(field_release:datafeed.FutureDefinition.Product)
  return product_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FutureDefinition::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    
  } else {
    
  }
  product_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datafeed.FutureDefinition.Product)
}
inline std::string* FutureDefinition::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datafeed.FutureDefinition.Product)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return product_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FutureDefinition::unsafe_arena_set_allocated_product(
    std::string* product) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (product != nullptr) {
    
  } else {
    
  }
  product_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      product, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.FutureDefinition.Product)
}

// string ExchangeID = 4;
inline void FutureDefinition::clear_exchangeid() {
  exchangeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FutureDefinition::exchangeid() const {
  // @@protoc_insertion_point(field_get:datafeed.FutureDefinition.ExchangeID)
  return _internal_exchangeid();
}
inline void FutureDefinition::set_exchangeid(const std::string& value) {
  _internal_set_exchangeid(value);
  // @@protoc_insertion_point(field_set:datafeed.FutureDefinition.ExchangeID)
}
inline std::string* FutureDefinition::mutable_exchangeid() {
  // @@protoc_insertion_point(field_mutable:datafeed.FutureDefinition.ExchangeID)
  return _internal_mutable_exchangeid();
}
inline const std::string& FutureDefinition::_internal_exchangeid() const {
  return exchangeid_.Get();
}
inline void FutureDefinition::_internal_set_exchangeid(const std::string& value) {
  
  exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FutureDefinition::set_exchangeid(std::string&& value) {
  
  exchangeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datafeed.FutureDefinition.ExchangeID)
}
inline void FutureDefinition::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datafeed.FutureDefinition.ExchangeID)
}
inline void FutureDefinition::set_exchangeid(const char* value,
    size_t size) {
  
  exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datafeed.FutureDefinition.ExchangeID)
}
inline std::string* FutureDefinition::_internal_mutable_exchangeid() {
  
  return exchangeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FutureDefinition::release_exchangeid() {
  // @@protoc_insertion_point(field_release:datafeed.FutureDefinition.ExchangeID)
  return exchangeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FutureDefinition::set_allocated_exchangeid(std::string* exchangeid) {
  if (exchangeid != nullptr) {
    
  } else {
    
  }
  exchangeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datafeed.FutureDefinition.ExchangeID)
}
inline std::string* FutureDefinition::unsafe_arena_release_exchangeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datafeed.FutureDefinition.ExchangeID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchangeid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FutureDefinition::unsafe_arena_set_allocated_exchangeid(
    std::string* exchangeid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchangeid != nullptr) {
    
  } else {
    
  }
  exchangeid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchangeid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.FutureDefinition.ExchangeID)
}

// double PriceTick = 5;
inline void FutureDefinition::clear_pricetick() {
  pricetick_ = 0;
}
inline double FutureDefinition::_internal_pricetick() const {
  return pricetick_;
}
inline double FutureDefinition::pricetick() const {
  // @@protoc_insertion_point(field_get:datafeed.FutureDefinition.PriceTick)
  return _internal_pricetick();
}
inline void FutureDefinition::_internal_set_pricetick(double value) {
  
  pricetick_ = value;
}
inline void FutureDefinition::set_pricetick(double value) {
  _internal_set_pricetick(value);
  // @@protoc_insertion_point(field_set:datafeed.FutureDefinition.PriceTick)
}

// double Multiplier = 6;
inline void FutureDefinition::clear_multiplier() {
  multiplier_ = 0;
}
inline double FutureDefinition::_internal_multiplier() const {
  return multiplier_;
}
inline double FutureDefinition::multiplier() const {
  // @@protoc_insertion_point(field_get:datafeed.FutureDefinition.Multiplier)
  return _internal_multiplier();
}
inline void FutureDefinition::_internal_set_multiplier(double value) {
  
  multiplier_ = value;
}
inline void FutureDefinition::set_multiplier(double value) {
  _internal_set_multiplier(value);
  // @@protoc_insertion_point(field_set:datafeed.FutureDefinition.Multiplier)
}

// string ExpireDate = 7;
inline void FutureDefinition::clear_expiredate() {
  expiredate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FutureDefinition::expiredate() const {
  // @@protoc_insertion_point(field_get:datafeed.FutureDefinition.ExpireDate)
  return _internal_expiredate();
}
inline void FutureDefinition::set_expiredate(const std::string& value) {
  _internal_set_expiredate(value);
  // @@protoc_insertion_point(field_set:datafeed.FutureDefinition.ExpireDate)
}
inline std::string* FutureDefinition::mutable_expiredate() {
  // @@protoc_insertion_point(field_mutable:datafeed.FutureDefinition.ExpireDate)
  return _internal_mutable_expiredate();
}
inline const std::string& FutureDefinition::_internal_expiredate() const {
  return expiredate_.Get();
}
inline void FutureDefinition::_internal_set_expiredate(const std::string& value) {
  
  expiredate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FutureDefinition::set_expiredate(std::string&& value) {
  
  expiredate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datafeed.FutureDefinition.ExpireDate)
}
inline void FutureDefinition::set_expiredate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiredate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datafeed.FutureDefinition.ExpireDate)
}
inline void FutureDefinition::set_expiredate(const char* value,
    size_t size) {
  
  expiredate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datafeed.FutureDefinition.ExpireDate)
}
inline std::string* FutureDefinition::_internal_mutable_expiredate() {
  
  return expiredate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FutureDefinition::release_expiredate() {
  // @@protoc_insertion_point(field_release:datafeed.FutureDefinition.ExpireDate)
  return expiredate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FutureDefinition::set_allocated_expiredate(std::string* expiredate) {
  if (expiredate != nullptr) {
    
  } else {
    
  }
  expiredate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiredate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datafeed.FutureDefinition.ExpireDate)
}
inline std::string* FutureDefinition::unsafe_arena_release_expiredate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datafeed.FutureDefinition.ExpireDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return expiredate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FutureDefinition::unsafe_arena_set_allocated_expiredate(
    std::string* expiredate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (expiredate != nullptr) {
    
  } else {
    
  }
  expiredate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      expiredate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.FutureDefinition.ExpireDate)
}

// -------------------------------------------------------------------

// PriceQuantity

// double price = 1;
inline void PriceQuantity::clear_price() {
  price_ = 0;
}
inline double PriceQuantity::_internal_price() const {
  return price_;
}
inline double PriceQuantity::price() const {
  // @@protoc_insertion_point(field_get:datafeed.PriceQuantity.price)
  return _internal_price();
}
inline void PriceQuantity::_internal_set_price(double value) {
  
  price_ = value;
}
inline void PriceQuantity::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:datafeed.PriceQuantity.price)
}

// int64 quantity = 2;
inline void PriceQuantity::clear_quantity() {
  quantity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PriceQuantity::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PriceQuantity::quantity() const {
  // @@protoc_insertion_point(field_get:datafeed.PriceQuantity.quantity)
  return _internal_quantity();
}
inline void PriceQuantity::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  quantity_ = value;
}
inline void PriceQuantity::set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:datafeed.PriceQuantity.quantity)
}

// -------------------------------------------------------------------

// TickData

// string contract = 1;
inline void TickData::clear_contract() {
  contract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TickData::contract() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.contract)
  return _internal_contract();
}
inline void TickData::set_contract(const std::string& value) {
  _internal_set_contract(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.contract)
}
inline std::string* TickData::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.contract)
  return _internal_mutable_contract();
}
inline const std::string& TickData::_internal_contract() const {
  return contract_.Get();
}
inline void TickData::_internal_set_contract(const std::string& value) {
  
  contract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TickData::set_contract(std::string&& value) {
  
  contract_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datafeed.TickData.contract)
}
inline void TickData::set_contract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datafeed.TickData.contract)
}
inline void TickData::set_contract(const char* value,
    size_t size) {
  
  contract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datafeed.TickData.contract)
}
inline std::string* TickData::_internal_mutable_contract() {
  
  return contract_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TickData::release_contract() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.contract)
  return contract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TickData::set_allocated_contract(std::string* contract) {
  if (contract != nullptr) {
    
  } else {
    
  }
  contract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.contract)
}
inline std::string* TickData::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datafeed.TickData.contract)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TickData::unsafe_arena_set_allocated_contract(
    std::string* contract) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract != nullptr) {
    
  } else {
    
  }
  contract_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.contract)
}

// string exchangeid = 3;
inline void TickData::clear_exchangeid() {
  exchangeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TickData::exchangeid() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.exchangeid)
  return _internal_exchangeid();
}
inline void TickData::set_exchangeid(const std::string& value) {
  _internal_set_exchangeid(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.exchangeid)
}
inline std::string* TickData::mutable_exchangeid() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.exchangeid)
  return _internal_mutable_exchangeid();
}
inline const std::string& TickData::_internal_exchangeid() const {
  return exchangeid_.Get();
}
inline void TickData::_internal_set_exchangeid(const std::string& value) {
  
  exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TickData::set_exchangeid(std::string&& value) {
  
  exchangeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datafeed.TickData.exchangeid)
}
inline void TickData::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datafeed.TickData.exchangeid)
}
inline void TickData::set_exchangeid(const char* value,
    size_t size) {
  
  exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datafeed.TickData.exchangeid)
}
inline std::string* TickData::_internal_mutable_exchangeid() {
  
  return exchangeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TickData::release_exchangeid() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.exchangeid)
  return exchangeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TickData::set_allocated_exchangeid(std::string* exchangeid) {
  if (exchangeid != nullptr) {
    
  } else {
    
  }
  exchangeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.exchangeid)
}
inline std::string* TickData::unsafe_arena_release_exchangeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datafeed.TickData.exchangeid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchangeid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TickData::unsafe_arena_set_allocated_exchangeid(
    std::string* exchangeid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchangeid != nullptr) {
    
  } else {
    
  }
  exchangeid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchangeid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.exchangeid)
}

// .datafeed.PriceQuantity bid1 = 4;
inline bool TickData::_internal_has_bid1() const {
  return this != internal_default_instance() && bid1_ != nullptr;
}
inline bool TickData::has_bid1() const {
  return _internal_has_bid1();
}
inline void TickData::clear_bid1() {
  if (GetArena() == nullptr && bid1_ != nullptr) {
    delete bid1_;
  }
  bid1_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_bid1() const {
  const ::datafeed::PriceQuantity* p = bid1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::bid1() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.bid1)
  return _internal_bid1();
}
inline void TickData::unsafe_arena_set_allocated_bid1(
    ::datafeed::PriceQuantity* bid1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bid1_);
  }
  bid1_ = bid1;
  if (bid1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.bid1)
}
inline ::datafeed::PriceQuantity* TickData::release_bid1() {
  auto temp = unsafe_arena_release_bid1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_bid1() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.bid1)
  
  ::datafeed::PriceQuantity* temp = bid1_;
  bid1_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_bid1() {
  
  if (bid1_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    bid1_ = p;
  }
  return bid1_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_bid1() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.bid1)
  return _internal_mutable_bid1();
}
inline void TickData::set_allocated_bid1(::datafeed::PriceQuantity* bid1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bid1_;
  }
  if (bid1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bid1);
    if (message_arena != submessage_arena) {
      bid1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bid1, submessage_arena);
    }
    
  } else {
    
  }
  bid1_ = bid1;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.bid1)
}

// .datafeed.PriceQuantity bid2 = 5;
inline bool TickData::_internal_has_bid2() const {
  return this != internal_default_instance() && bid2_ != nullptr;
}
inline bool TickData::has_bid2() const {
  return _internal_has_bid2();
}
inline void TickData::clear_bid2() {
  if (GetArena() == nullptr && bid2_ != nullptr) {
    delete bid2_;
  }
  bid2_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_bid2() const {
  const ::datafeed::PriceQuantity* p = bid2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::bid2() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.bid2)
  return _internal_bid2();
}
inline void TickData::unsafe_arena_set_allocated_bid2(
    ::datafeed::PriceQuantity* bid2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bid2_);
  }
  bid2_ = bid2;
  if (bid2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.bid2)
}
inline ::datafeed::PriceQuantity* TickData::release_bid2() {
  auto temp = unsafe_arena_release_bid2();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_bid2() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.bid2)
  
  ::datafeed::PriceQuantity* temp = bid2_;
  bid2_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_bid2() {
  
  if (bid2_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    bid2_ = p;
  }
  return bid2_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_bid2() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.bid2)
  return _internal_mutable_bid2();
}
inline void TickData::set_allocated_bid2(::datafeed::PriceQuantity* bid2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bid2_;
  }
  if (bid2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bid2);
    if (message_arena != submessage_arena) {
      bid2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bid2, submessage_arena);
    }
    
  } else {
    
  }
  bid2_ = bid2;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.bid2)
}

// .datafeed.PriceQuantity bid3 = 6;
inline bool TickData::_internal_has_bid3() const {
  return this != internal_default_instance() && bid3_ != nullptr;
}
inline bool TickData::has_bid3() const {
  return _internal_has_bid3();
}
inline void TickData::clear_bid3() {
  if (GetArena() == nullptr && bid3_ != nullptr) {
    delete bid3_;
  }
  bid3_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_bid3() const {
  const ::datafeed::PriceQuantity* p = bid3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::bid3() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.bid3)
  return _internal_bid3();
}
inline void TickData::unsafe_arena_set_allocated_bid3(
    ::datafeed::PriceQuantity* bid3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bid3_);
  }
  bid3_ = bid3;
  if (bid3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.bid3)
}
inline ::datafeed::PriceQuantity* TickData::release_bid3() {
  auto temp = unsafe_arena_release_bid3();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_bid3() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.bid3)
  
  ::datafeed::PriceQuantity* temp = bid3_;
  bid3_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_bid3() {
  
  if (bid3_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    bid3_ = p;
  }
  return bid3_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_bid3() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.bid3)
  return _internal_mutable_bid3();
}
inline void TickData::set_allocated_bid3(::datafeed::PriceQuantity* bid3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bid3_;
  }
  if (bid3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bid3);
    if (message_arena != submessage_arena) {
      bid3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bid3, submessage_arena);
    }
    
  } else {
    
  }
  bid3_ = bid3;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.bid3)
}

// .datafeed.PriceQuantity bid4 = 7;
inline bool TickData::_internal_has_bid4() const {
  return this != internal_default_instance() && bid4_ != nullptr;
}
inline bool TickData::has_bid4() const {
  return _internal_has_bid4();
}
inline void TickData::clear_bid4() {
  if (GetArena() == nullptr && bid4_ != nullptr) {
    delete bid4_;
  }
  bid4_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_bid4() const {
  const ::datafeed::PriceQuantity* p = bid4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::bid4() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.bid4)
  return _internal_bid4();
}
inline void TickData::unsafe_arena_set_allocated_bid4(
    ::datafeed::PriceQuantity* bid4) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bid4_);
  }
  bid4_ = bid4;
  if (bid4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.bid4)
}
inline ::datafeed::PriceQuantity* TickData::release_bid4() {
  auto temp = unsafe_arena_release_bid4();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_bid4() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.bid4)
  
  ::datafeed::PriceQuantity* temp = bid4_;
  bid4_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_bid4() {
  
  if (bid4_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    bid4_ = p;
  }
  return bid4_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_bid4() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.bid4)
  return _internal_mutable_bid4();
}
inline void TickData::set_allocated_bid4(::datafeed::PriceQuantity* bid4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bid4_;
  }
  if (bid4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bid4);
    if (message_arena != submessage_arena) {
      bid4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bid4, submessage_arena);
    }
    
  } else {
    
  }
  bid4_ = bid4;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.bid4)
}

// .datafeed.PriceQuantity bid5 = 8;
inline bool TickData::_internal_has_bid5() const {
  return this != internal_default_instance() && bid5_ != nullptr;
}
inline bool TickData::has_bid5() const {
  return _internal_has_bid5();
}
inline void TickData::clear_bid5() {
  if (GetArena() == nullptr && bid5_ != nullptr) {
    delete bid5_;
  }
  bid5_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_bid5() const {
  const ::datafeed::PriceQuantity* p = bid5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::bid5() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.bid5)
  return _internal_bid5();
}
inline void TickData::unsafe_arena_set_allocated_bid5(
    ::datafeed::PriceQuantity* bid5) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bid5_);
  }
  bid5_ = bid5;
  if (bid5) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.bid5)
}
inline ::datafeed::PriceQuantity* TickData::release_bid5() {
  auto temp = unsafe_arena_release_bid5();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_bid5() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.bid5)
  
  ::datafeed::PriceQuantity* temp = bid5_;
  bid5_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_bid5() {
  
  if (bid5_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    bid5_ = p;
  }
  return bid5_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_bid5() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.bid5)
  return _internal_mutable_bid5();
}
inline void TickData::set_allocated_bid5(::datafeed::PriceQuantity* bid5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bid5_;
  }
  if (bid5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bid5);
    if (message_arena != submessage_arena) {
      bid5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bid5, submessage_arena);
    }
    
  } else {
    
  }
  bid5_ = bid5;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.bid5)
}

// .datafeed.PriceQuantity ask1 = 9;
inline bool TickData::_internal_has_ask1() const {
  return this != internal_default_instance() && ask1_ != nullptr;
}
inline bool TickData::has_ask1() const {
  return _internal_has_ask1();
}
inline void TickData::clear_ask1() {
  if (GetArena() == nullptr && ask1_ != nullptr) {
    delete ask1_;
  }
  ask1_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_ask1() const {
  const ::datafeed::PriceQuantity* p = ask1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::ask1() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.ask1)
  return _internal_ask1();
}
inline void TickData::unsafe_arena_set_allocated_ask1(
    ::datafeed::PriceQuantity* ask1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ask1_);
  }
  ask1_ = ask1;
  if (ask1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.ask1)
}
inline ::datafeed::PriceQuantity* TickData::release_ask1() {
  auto temp = unsafe_arena_release_ask1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_ask1() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.ask1)
  
  ::datafeed::PriceQuantity* temp = ask1_;
  ask1_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_ask1() {
  
  if (ask1_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    ask1_ = p;
  }
  return ask1_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_ask1() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.ask1)
  return _internal_mutable_ask1();
}
inline void TickData::set_allocated_ask1(::datafeed::PriceQuantity* ask1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ask1_;
  }
  if (ask1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ask1);
    if (message_arena != submessage_arena) {
      ask1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ask1, submessage_arena);
    }
    
  } else {
    
  }
  ask1_ = ask1;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.ask1)
}

// .datafeed.PriceQuantity ask2 = 10;
inline bool TickData::_internal_has_ask2() const {
  return this != internal_default_instance() && ask2_ != nullptr;
}
inline bool TickData::has_ask2() const {
  return _internal_has_ask2();
}
inline void TickData::clear_ask2() {
  if (GetArena() == nullptr && ask2_ != nullptr) {
    delete ask2_;
  }
  ask2_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_ask2() const {
  const ::datafeed::PriceQuantity* p = ask2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::ask2() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.ask2)
  return _internal_ask2();
}
inline void TickData::unsafe_arena_set_allocated_ask2(
    ::datafeed::PriceQuantity* ask2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ask2_);
  }
  ask2_ = ask2;
  if (ask2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.ask2)
}
inline ::datafeed::PriceQuantity* TickData::release_ask2() {
  auto temp = unsafe_arena_release_ask2();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_ask2() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.ask2)
  
  ::datafeed::PriceQuantity* temp = ask2_;
  ask2_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_ask2() {
  
  if (ask2_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    ask2_ = p;
  }
  return ask2_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_ask2() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.ask2)
  return _internal_mutable_ask2();
}
inline void TickData::set_allocated_ask2(::datafeed::PriceQuantity* ask2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ask2_;
  }
  if (ask2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ask2);
    if (message_arena != submessage_arena) {
      ask2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ask2, submessage_arena);
    }
    
  } else {
    
  }
  ask2_ = ask2;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.ask2)
}

// .datafeed.PriceQuantity ask3 = 11;
inline bool TickData::_internal_has_ask3() const {
  return this != internal_default_instance() && ask3_ != nullptr;
}
inline bool TickData::has_ask3() const {
  return _internal_has_ask3();
}
inline void TickData::clear_ask3() {
  if (GetArena() == nullptr && ask3_ != nullptr) {
    delete ask3_;
  }
  ask3_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_ask3() const {
  const ::datafeed::PriceQuantity* p = ask3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::ask3() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.ask3)
  return _internal_ask3();
}
inline void TickData::unsafe_arena_set_allocated_ask3(
    ::datafeed::PriceQuantity* ask3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ask3_);
  }
  ask3_ = ask3;
  if (ask3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.ask3)
}
inline ::datafeed::PriceQuantity* TickData::release_ask3() {
  auto temp = unsafe_arena_release_ask3();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_ask3() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.ask3)
  
  ::datafeed::PriceQuantity* temp = ask3_;
  ask3_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_ask3() {
  
  if (ask3_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    ask3_ = p;
  }
  return ask3_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_ask3() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.ask3)
  return _internal_mutable_ask3();
}
inline void TickData::set_allocated_ask3(::datafeed::PriceQuantity* ask3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ask3_;
  }
  if (ask3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ask3);
    if (message_arena != submessage_arena) {
      ask3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ask3, submessage_arena);
    }
    
  } else {
    
  }
  ask3_ = ask3;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.ask3)
}

// .datafeed.PriceQuantity ask4 = 12;
inline bool TickData::_internal_has_ask4() const {
  return this != internal_default_instance() && ask4_ != nullptr;
}
inline bool TickData::has_ask4() const {
  return _internal_has_ask4();
}
inline void TickData::clear_ask4() {
  if (GetArena() == nullptr && ask4_ != nullptr) {
    delete ask4_;
  }
  ask4_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_ask4() const {
  const ::datafeed::PriceQuantity* p = ask4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::ask4() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.ask4)
  return _internal_ask4();
}
inline void TickData::unsafe_arena_set_allocated_ask4(
    ::datafeed::PriceQuantity* ask4) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ask4_);
  }
  ask4_ = ask4;
  if (ask4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.ask4)
}
inline ::datafeed::PriceQuantity* TickData::release_ask4() {
  auto temp = unsafe_arena_release_ask4();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_ask4() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.ask4)
  
  ::datafeed::PriceQuantity* temp = ask4_;
  ask4_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_ask4() {
  
  if (ask4_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    ask4_ = p;
  }
  return ask4_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_ask4() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.ask4)
  return _internal_mutable_ask4();
}
inline void TickData::set_allocated_ask4(::datafeed::PriceQuantity* ask4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ask4_;
  }
  if (ask4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ask4);
    if (message_arena != submessage_arena) {
      ask4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ask4, submessage_arena);
    }
    
  } else {
    
  }
  ask4_ = ask4;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.ask4)
}

// .datafeed.PriceQuantity ask5 = 13;
inline bool TickData::_internal_has_ask5() const {
  return this != internal_default_instance() && ask5_ != nullptr;
}
inline bool TickData::has_ask5() const {
  return _internal_has_ask5();
}
inline void TickData::clear_ask5() {
  if (GetArena() == nullptr && ask5_ != nullptr) {
    delete ask5_;
  }
  ask5_ = nullptr;
}
inline const ::datafeed::PriceQuantity& TickData::_internal_ask5() const {
  const ::datafeed::PriceQuantity* p = ask5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::datafeed::PriceQuantity*>(
      &::datafeed::_PriceQuantity_default_instance_);
}
inline const ::datafeed::PriceQuantity& TickData::ask5() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.ask5)
  return _internal_ask5();
}
inline void TickData::unsafe_arena_set_allocated_ask5(
    ::datafeed::PriceQuantity* ask5) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ask5_);
  }
  ask5_ = ask5;
  if (ask5) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.ask5)
}
inline ::datafeed::PriceQuantity* TickData::release_ask5() {
  auto temp = unsafe_arena_release_ask5();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::unsafe_arena_release_ask5() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.ask5)
  
  ::datafeed::PriceQuantity* temp = ask5_;
  ask5_ = nullptr;
  return temp;
}
inline ::datafeed::PriceQuantity* TickData::_internal_mutable_ask5() {
  
  if (ask5_ == nullptr) {
    auto* p = CreateMaybeMessage<::datafeed::PriceQuantity>(GetArena());
    ask5_ = p;
  }
  return ask5_;
}
inline ::datafeed::PriceQuantity* TickData::mutable_ask5() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.ask5)
  return _internal_mutable_ask5();
}
inline void TickData::set_allocated_ask5(::datafeed::PriceQuantity* ask5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ask5_;
  }
  if (ask5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ask5);
    if (message_arena != submessage_arena) {
      ask5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ask5, submessage_arena);
    }
    
  } else {
    
  }
  ask5_ = ask5;
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.ask5)
}

// double lastTradePrice = 14;
inline void TickData::clear_lasttradeprice() {
  lasttradeprice_ = 0;
}
inline double TickData::_internal_lasttradeprice() const {
  return lasttradeprice_;
}
inline double TickData::lasttradeprice() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.lastTradePrice)
  return _internal_lasttradeprice();
}
inline void TickData::_internal_set_lasttradeprice(double value) {
  
  lasttradeprice_ = value;
}
inline void TickData::set_lasttradeprice(double value) {
  _internal_set_lasttradeprice(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.lastTradePrice)
}

// double open = 15;
inline void TickData::clear_open() {
  open_ = 0;
}
inline double TickData::_internal_open() const {
  return open_;
}
inline double TickData::open() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.open)
  return _internal_open();
}
inline void TickData::_internal_set_open(double value) {
  
  open_ = value;
}
inline void TickData::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.open)
}

// double highest = 16;
inline void TickData::clear_highest() {
  highest_ = 0;
}
inline double TickData::_internal_highest() const {
  return highest_;
}
inline double TickData::highest() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.highest)
  return _internal_highest();
}
inline void TickData::_internal_set_highest(double value) {
  
  highest_ = value;
}
inline void TickData::set_highest(double value) {
  _internal_set_highest(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.highest)
}

// double lowest = 17;
inline void TickData::clear_lowest() {
  lowest_ = 0;
}
inline double TickData::_internal_lowest() const {
  return lowest_;
}
inline double TickData::lowest() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.lowest)
  return _internal_lowest();
}
inline void TickData::_internal_set_lowest(double value) {
  
  lowest_ = value;
}
inline void TickData::set_lowest(double value) {
  _internal_set_lowest(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.lowest)
}

// int64 volume = 18;
inline void TickData::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TickData::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TickData::volume() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.volume)
  return _internal_volume();
}
inline void TickData::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  volume_ = value;
}
inline void TickData::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.volume)
}

// double turnover = 19;
inline void TickData::clear_turnover() {
  turnover_ = 0;
}
inline double TickData::_internal_turnover() const {
  return turnover_;
}
inline double TickData::turnover() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.turnover)
  return _internal_turnover();
}
inline void TickData::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void TickData::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.turnover)
}

// double openInterest = 20;
inline void TickData::clear_openinterest() {
  openinterest_ = 0;
}
inline double TickData::_internal_openinterest() const {
  return openinterest_;
}
inline double TickData::openinterest() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.openInterest)
  return _internal_openinterest();
}
inline void TickData::_internal_set_openinterest(double value) {
  
  openinterest_ = value;
}
inline void TickData::set_openinterest(double value) {
  _internal_set_openinterest(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.openInterest)
}

// double averagePrice = 21;
inline void TickData::clear_averageprice() {
  averageprice_ = 0;
}
inline double TickData::_internal_averageprice() const {
  return averageprice_;
}
inline double TickData::averageprice() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.averagePrice)
  return _internal_averageprice();
}
inline void TickData::_internal_set_averageprice(double value) {
  
  averageprice_ = value;
}
inline void TickData::set_averageprice(double value) {
  _internal_set_averageprice(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.averagePrice)
}

// double preSettlement = 22;
inline void TickData::clear_presettlement() {
  presettlement_ = 0;
}
inline double TickData::_internal_presettlement() const {
  return presettlement_;
}
inline double TickData::presettlement() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.preSettlement)
  return _internal_presettlement();
}
inline void TickData::_internal_set_presettlement(double value) {
  
  presettlement_ = value;
}
inline void TickData::set_presettlement(double value) {
  _internal_set_presettlement(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.preSettlement)
}

// string tradingdate = 23;
inline void TickData::clear_tradingdate() {
  tradingdate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TickData::tradingdate() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.tradingdate)
  return _internal_tradingdate();
}
inline void TickData::set_tradingdate(const std::string& value) {
  _internal_set_tradingdate(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.tradingdate)
}
inline std::string* TickData::mutable_tradingdate() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.tradingdate)
  return _internal_mutable_tradingdate();
}
inline const std::string& TickData::_internal_tradingdate() const {
  return tradingdate_.Get();
}
inline void TickData::_internal_set_tradingdate(const std::string& value) {
  
  tradingdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TickData::set_tradingdate(std::string&& value) {
  
  tradingdate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datafeed.TickData.tradingdate)
}
inline void TickData::set_tradingdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datafeed.TickData.tradingdate)
}
inline void TickData::set_tradingdate(const char* value,
    size_t size) {
  
  tradingdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datafeed.TickData.tradingdate)
}
inline std::string* TickData::_internal_mutable_tradingdate() {
  
  return tradingdate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TickData::release_tradingdate() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.tradingdate)
  return tradingdate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TickData::set_allocated_tradingdate(std::string* tradingdate) {
  if (tradingdate != nullptr) {
    
  } else {
    
  }
  tradingdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingdate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.tradingdate)
}
inline std::string* TickData::unsafe_arena_release_tradingdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datafeed.TickData.tradingdate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tradingdate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TickData::unsafe_arena_set_allocated_tradingdate(
    std::string* tradingdate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tradingdate != nullptr) {
    
  } else {
    
  }
  tradingdate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tradingdate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.tradingdate)
}

// string exchangetime = 24;
inline void TickData::clear_exchangetime() {
  exchangetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TickData::exchangetime() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.exchangetime)
  return _internal_exchangetime();
}
inline void TickData::set_exchangetime(const std::string& value) {
  _internal_set_exchangetime(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.exchangetime)
}
inline std::string* TickData::mutable_exchangetime() {
  // @@protoc_insertion_point(field_mutable:datafeed.TickData.exchangetime)
  return _internal_mutable_exchangetime();
}
inline const std::string& TickData::_internal_exchangetime() const {
  return exchangetime_.Get();
}
inline void TickData::_internal_set_exchangetime(const std::string& value) {
  
  exchangetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TickData::set_exchangetime(std::string&& value) {
  
  exchangetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:datafeed.TickData.exchangetime)
}
inline void TickData::set_exchangetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:datafeed.TickData.exchangetime)
}
inline void TickData::set_exchangetime(const char* value,
    size_t size) {
  
  exchangetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:datafeed.TickData.exchangetime)
}
inline std::string* TickData::_internal_mutable_exchangetime() {
  
  return exchangetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TickData::release_exchangetime() {
  // @@protoc_insertion_point(field_release:datafeed.TickData.exchangetime)
  return exchangetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TickData::set_allocated_exchangetime(std::string* exchangetime) {
  if (exchangetime != nullptr) {
    
  } else {
    
  }
  exchangetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:datafeed.TickData.exchangetime)
}
inline std::string* TickData::unsafe_arena_release_exchangetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:datafeed.TickData.exchangetime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchangetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TickData::unsafe_arena_set_allocated_exchangetime(
    std::string* exchangetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchangetime != nullptr) {
    
  } else {
    
  }
  exchangetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchangetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datafeed.TickData.exchangetime)
}

// double upperlimitprice = 25;
inline void TickData::clear_upperlimitprice() {
  upperlimitprice_ = 0;
}
inline double TickData::_internal_upperlimitprice() const {
  return upperlimitprice_;
}
inline double TickData::upperlimitprice() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.upperlimitprice)
  return _internal_upperlimitprice();
}
inline void TickData::_internal_set_upperlimitprice(double value) {
  
  upperlimitprice_ = value;
}
inline void TickData::set_upperlimitprice(double value) {
  _internal_set_upperlimitprice(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.upperlimitprice)
}

// double lowlimitprice = 26;
inline void TickData::clear_lowlimitprice() {
  lowlimitprice_ = 0;
}
inline double TickData::_internal_lowlimitprice() const {
  return lowlimitprice_;
}
inline double TickData::lowlimitprice() const {
  // @@protoc_insertion_point(field_get:datafeed.TickData.lowlimitprice)
  return _internal_lowlimitprice();
}
inline void TickData::_internal_set_lowlimitprice(double value) {
  
  lowlimitprice_ = value;
}
inline void TickData::set_lowlimitprice(double value) {
  _internal_set_lowlimitprice(value);
  // @@protoc_insertion_point(field_set:datafeed.TickData.lowlimitprice)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace datafeed

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datafeed_2eproto

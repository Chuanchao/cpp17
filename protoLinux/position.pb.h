// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: position.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_position_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_position_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_position_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_position_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_position_2eproto;
namespace position {
class AccPosWrapper;
class AccPosWrapperDefaultTypeInternal;
extern AccPosWrapperDefaultTypeInternal _AccPosWrapper_default_instance_;
class AccountPosition;
class AccountPositionDefaultTypeInternal;
extern AccountPositionDefaultTypeInternal _AccountPosition_default_instance_;
}  // namespace position
PROTOBUF_NAMESPACE_OPEN
template<> ::position::AccPosWrapper* Arena::CreateMaybeMessage<::position::AccPosWrapper>(Arena*);
template<> ::position::AccountPosition* Arena::CreateMaybeMessage<::position::AccountPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace position {

enum PosDirection : int {
  POS_LONG = 0,
  POS_SHORT = 1,
  POS_BUTT = 3,
  PosDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PosDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PosDirection_IsValid(int value);
constexpr PosDirection PosDirection_MIN = POS_LONG;
constexpr PosDirection PosDirection_MAX = POS_BUTT;
constexpr int PosDirection_ARRAYSIZE = PosDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosDirection_descriptor();
template<typename T>
inline const std::string& PosDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PosDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PosDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PosDirection_descriptor(), enum_t_value);
}
inline bool PosDirection_Parse(
    const std::string& name, PosDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PosDirection>(
    PosDirection_descriptor(), name, value);
}
// ===================================================================

class AccountPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:position.AccountPosition) */ {
 public:
  inline AccountPosition() : AccountPosition(nullptr) {};
  virtual ~AccountPosition();

  AccountPosition(const AccountPosition& from);
  AccountPosition(AccountPosition&& from) noexcept
    : AccountPosition() {
    *this = ::std::move(from);
  }

  inline AccountPosition& operator=(const AccountPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountPosition& operator=(AccountPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountPosition* internal_default_instance() {
    return reinterpret_cast<const AccountPosition*>(
               &_AccountPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountPosition& a, AccountPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountPosition* New() const final {
    return CreateMaybeMessage<AccountPosition>(nullptr);
  }

  AccountPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountPosition& from);
  void MergeFrom(const AccountPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "position.AccountPosition";
  }
  protected:
  explicit AccountPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_position_2eproto);
    return ::descriptor_table_position_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIDFieldNumber = 1,
    kProductIDFieldNumber = 2,
    kTotalVolumeFieldNumber = 4,
    kTodayVolumeFieldNumber = 5,
    kDirectionFieldNumber = 3,
  };
  // string InstrumentID = 1;
  void clear_instrumentid();
  const std::string& instrumentid() const;
  void set_instrumentid(const std::string& value);
  void set_instrumentid(std::string&& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  std::string* mutable_instrumentid();
  std::string* release_instrumentid();
  void set_allocated_instrumentid(std::string* instrumentid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentid(
      std::string* instrumentid);
  private:
  const std::string& _internal_instrumentid() const;
  void _internal_set_instrumentid(const std::string& value);
  std::string* _internal_mutable_instrumentid();
  public:

  // string ProductID = 2;
  void clear_productid();
  const std::string& productid() const;
  void set_productid(const std::string& value);
  void set_productid(std::string&& value);
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  std::string* mutable_productid();
  std::string* release_productid();
  void set_allocated_productid(std::string* productid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_productid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_productid(
      std::string* productid);
  private:
  const std::string& _internal_productid() const;
  void _internal_set_productid(const std::string& value);
  std::string* _internal_mutable_productid();
  public:

  // int64 TotalVolume = 4;
  void clear_totalvolume();
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolume() const;
  void set_totalvolume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_totalvolume() const;
  void _internal_set_totalvolume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 TodayVolume = 5;
  void clear_todayvolume();
  ::PROTOBUF_NAMESPACE_ID::int64 todayvolume() const;
  void set_todayvolume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_todayvolume() const;
  void _internal_set_todayvolume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .position.PosDirection Direction = 3;
  void clear_direction();
  ::position::PosDirection direction() const;
  void set_direction(::position::PosDirection value);
  private:
  ::position::PosDirection _internal_direction() const;
  void _internal_set_direction(::position::PosDirection value);
  public:

  // @@protoc_insertion_point(class_scope:position.AccountPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productid_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalvolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 todayvolume_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_position_2eproto;
};
// -------------------------------------------------------------------

class AccPosWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:position.AccPosWrapper) */ {
 public:
  inline AccPosWrapper() : AccPosWrapper(nullptr) {};
  virtual ~AccPosWrapper();

  AccPosWrapper(const AccPosWrapper& from);
  AccPosWrapper(AccPosWrapper&& from) noexcept
    : AccPosWrapper() {
    *this = ::std::move(from);
  }

  inline AccPosWrapper& operator=(const AccPosWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccPosWrapper& operator=(AccPosWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccPosWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccPosWrapper* internal_default_instance() {
    return reinterpret_cast<const AccPosWrapper*>(
               &_AccPosWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccPosWrapper& a, AccPosWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(AccPosWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccPosWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccPosWrapper* New() const final {
    return CreateMaybeMessage<AccPosWrapper>(nullptr);
  }

  AccPosWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccPosWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccPosWrapper& from);
  void MergeFrom(const AccPosWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccPosWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "position.AccPosWrapper";
  }
  protected:
  explicit AccPosWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_position_2eproto);
    return ::descriptor_table_position_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongposFieldNumber = 1,
    kShortposFieldNumber = 2,
  };
  // .position.AccountPosition longpos = 1;
  bool has_longpos() const;
  private:
  bool _internal_has_longpos() const;
  public:
  void clear_longpos();
  const ::position::AccountPosition& longpos() const;
  ::position::AccountPosition* release_longpos();
  ::position::AccountPosition* mutable_longpos();
  void set_allocated_longpos(::position::AccountPosition* longpos);
  private:
  const ::position::AccountPosition& _internal_longpos() const;
  ::position::AccountPosition* _internal_mutable_longpos();
  public:
  void unsafe_arena_set_allocated_longpos(
      ::position::AccountPosition* longpos);
  ::position::AccountPosition* unsafe_arena_release_longpos();

  // .position.AccountPosition shortpos = 2;
  bool has_shortpos() const;
  private:
  bool _internal_has_shortpos() const;
  public:
  void clear_shortpos();
  const ::position::AccountPosition& shortpos() const;
  ::position::AccountPosition* release_shortpos();
  ::position::AccountPosition* mutable_shortpos();
  void set_allocated_shortpos(::position::AccountPosition* shortpos);
  private:
  const ::position::AccountPosition& _internal_shortpos() const;
  ::position::AccountPosition* _internal_mutable_shortpos();
  public:
  void unsafe_arena_set_allocated_shortpos(
      ::position::AccountPosition* shortpos);
  ::position::AccountPosition* unsafe_arena_release_shortpos();

  // @@protoc_insertion_point(class_scope:position.AccPosWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::position::AccountPosition* longpos_;
  ::position::AccountPosition* shortpos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_position_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountPosition

// string InstrumentID = 1;
inline void AccountPosition::clear_instrumentid() {
  instrumentid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountPosition::instrumentid() const {
  // @@protoc_insertion_point(field_get:position.AccountPosition.InstrumentID)
  return _internal_instrumentid();
}
inline void AccountPosition::set_instrumentid(const std::string& value) {
  _internal_set_instrumentid(value);
  // @@protoc_insertion_point(field_set:position.AccountPosition.InstrumentID)
}
inline std::string* AccountPosition::mutable_instrumentid() {
  // @@protoc_insertion_point(field_mutable:position.AccountPosition.InstrumentID)
  return _internal_mutable_instrumentid();
}
inline const std::string& AccountPosition::_internal_instrumentid() const {
  return instrumentid_.Get();
}
inline void AccountPosition::_internal_set_instrumentid(const std::string& value) {
  
  instrumentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountPosition::set_instrumentid(std::string&& value) {
  
  instrumentid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:position.AccountPosition.InstrumentID)
}
inline void AccountPosition::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:position.AccountPosition.InstrumentID)
}
inline void AccountPosition::set_instrumentid(const char* value,
    size_t size) {
  
  instrumentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:position.AccountPosition.InstrumentID)
}
inline std::string* AccountPosition::_internal_mutable_instrumentid() {
  
  return instrumentid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountPosition::release_instrumentid() {
  // @@protoc_insertion_point(field_release:position.AccountPosition.InstrumentID)
  return instrumentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountPosition::set_allocated_instrumentid(std::string* instrumentid) {
  if (instrumentid != nullptr) {
    
  } else {
    
  }
  instrumentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:position.AccountPosition.InstrumentID)
}
inline std::string* AccountPosition::unsafe_arena_release_instrumentid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:position.AccountPosition.InstrumentID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountPosition::unsafe_arena_set_allocated_instrumentid(
    std::string* instrumentid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentid != nullptr) {
    
  } else {
    
  }
  instrumentid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:position.AccountPosition.InstrumentID)
}

// string ProductID = 2;
inline void AccountPosition::clear_productid() {
  productid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountPosition::productid() const {
  // @@protoc_insertion_point(field_get:position.AccountPosition.ProductID)
  return _internal_productid();
}
inline void AccountPosition::set_productid(const std::string& value) {
  _internal_set_productid(value);
  // @@protoc_insertion_point(field_set:position.AccountPosition.ProductID)
}
inline std::string* AccountPosition::mutable_productid() {
  // @@protoc_insertion_point(field_mutable:position.AccountPosition.ProductID)
  return _internal_mutable_productid();
}
inline const std::string& AccountPosition::_internal_productid() const {
  return productid_.Get();
}
inline void AccountPosition::_internal_set_productid(const std::string& value) {
  
  productid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountPosition::set_productid(std::string&& value) {
  
  productid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:position.AccountPosition.ProductID)
}
inline void AccountPosition::set_productid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:position.AccountPosition.ProductID)
}
inline void AccountPosition::set_productid(const char* value,
    size_t size) {
  
  productid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:position.AccountPosition.ProductID)
}
inline std::string* AccountPosition::_internal_mutable_productid() {
  
  return productid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountPosition::release_productid() {
  // @@protoc_insertion_point(field_release:position.AccountPosition.ProductID)
  return productid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountPosition::set_allocated_productid(std::string* productid) {
  if (productid != nullptr) {
    
  } else {
    
  }
  productid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:position.AccountPosition.ProductID)
}
inline std::string* AccountPosition::unsafe_arena_release_productid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:position.AccountPosition.ProductID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return productid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountPosition::unsafe_arena_set_allocated_productid(
    std::string* productid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (productid != nullptr) {
    
  } else {
    
  }
  productid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      productid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:position.AccountPosition.ProductID)
}

// .position.PosDirection Direction = 3;
inline void AccountPosition::clear_direction() {
  direction_ = 0;
}
inline ::position::PosDirection AccountPosition::_internal_direction() const {
  return static_cast< ::position::PosDirection >(direction_);
}
inline ::position::PosDirection AccountPosition::direction() const {
  // @@protoc_insertion_point(field_get:position.AccountPosition.Direction)
  return _internal_direction();
}
inline void AccountPosition::_internal_set_direction(::position::PosDirection value) {
  
  direction_ = value;
}
inline void AccountPosition::set_direction(::position::PosDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:position.AccountPosition.Direction)
}

// int64 TotalVolume = 4;
inline void AccountPosition::clear_totalvolume() {
  totalvolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountPosition::_internal_totalvolume() const {
  return totalvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountPosition::totalvolume() const {
  // @@protoc_insertion_point(field_get:position.AccountPosition.TotalVolume)
  return _internal_totalvolume();
}
inline void AccountPosition::_internal_set_totalvolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalvolume_ = value;
}
inline void AccountPosition::set_totalvolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_totalvolume(value);
  // @@protoc_insertion_point(field_set:position.AccountPosition.TotalVolume)
}

// int64 TodayVolume = 5;
inline void AccountPosition::clear_todayvolume() {
  todayvolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountPosition::_internal_todayvolume() const {
  return todayvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountPosition::todayvolume() const {
  // @@protoc_insertion_point(field_get:position.AccountPosition.TodayVolume)
  return _internal_todayvolume();
}
inline void AccountPosition::_internal_set_todayvolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  todayvolume_ = value;
}
inline void AccountPosition::set_todayvolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_todayvolume(value);
  // @@protoc_insertion_point(field_set:position.AccountPosition.TodayVolume)
}

// -------------------------------------------------------------------

// AccPosWrapper

// .position.AccountPosition longpos = 1;
inline bool AccPosWrapper::_internal_has_longpos() const {
  return this != internal_default_instance() && longpos_ != nullptr;
}
inline bool AccPosWrapper::has_longpos() const {
  return _internal_has_longpos();
}
inline void AccPosWrapper::clear_longpos() {
  if (GetArena() == nullptr && longpos_ != nullptr) {
    delete longpos_;
  }
  longpos_ = nullptr;
}
inline const ::position::AccountPosition& AccPosWrapper::_internal_longpos() const {
  const ::position::AccountPosition* p = longpos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::AccountPosition*>(
      &::position::_AccountPosition_default_instance_);
}
inline const ::position::AccountPosition& AccPosWrapper::longpos() const {
  // @@protoc_insertion_point(field_get:position.AccPosWrapper.longpos)
  return _internal_longpos();
}
inline void AccPosWrapper::unsafe_arena_set_allocated_longpos(
    ::position::AccountPosition* longpos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(longpos_);
  }
  longpos_ = longpos;
  if (longpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:position.AccPosWrapper.longpos)
}
inline ::position::AccountPosition* AccPosWrapper::release_longpos() {
  auto temp = unsafe_arena_release_longpos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::position::AccountPosition* AccPosWrapper::unsafe_arena_release_longpos() {
  // @@protoc_insertion_point(field_release:position.AccPosWrapper.longpos)
  
  ::position::AccountPosition* temp = longpos_;
  longpos_ = nullptr;
  return temp;
}
inline ::position::AccountPosition* AccPosWrapper::_internal_mutable_longpos() {
  
  if (longpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::AccountPosition>(GetArena());
    longpos_ = p;
  }
  return longpos_;
}
inline ::position::AccountPosition* AccPosWrapper::mutable_longpos() {
  // @@protoc_insertion_point(field_mutable:position.AccPosWrapper.longpos)
  return _internal_mutable_longpos();
}
inline void AccPosWrapper::set_allocated_longpos(::position::AccountPosition* longpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete longpos_;
  }
  if (longpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(longpos);
    if (message_arena != submessage_arena) {
      longpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longpos, submessage_arena);
    }
    
  } else {
    
  }
  longpos_ = longpos;
  // @@protoc_insertion_point(field_set_allocated:position.AccPosWrapper.longpos)
}

// .position.AccountPosition shortpos = 2;
inline bool AccPosWrapper::_internal_has_shortpos() const {
  return this != internal_default_instance() && shortpos_ != nullptr;
}
inline bool AccPosWrapper::has_shortpos() const {
  return _internal_has_shortpos();
}
inline void AccPosWrapper::clear_shortpos() {
  if (GetArena() == nullptr && shortpos_ != nullptr) {
    delete shortpos_;
  }
  shortpos_ = nullptr;
}
inline const ::position::AccountPosition& AccPosWrapper::_internal_shortpos() const {
  const ::position::AccountPosition* p = shortpos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::position::AccountPosition*>(
      &::position::_AccountPosition_default_instance_);
}
inline const ::position::AccountPosition& AccPosWrapper::shortpos() const {
  // @@protoc_insertion_point(field_get:position.AccPosWrapper.shortpos)
  return _internal_shortpos();
}
inline void AccPosWrapper::unsafe_arena_set_allocated_shortpos(
    ::position::AccountPosition* shortpos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortpos_);
  }
  shortpos_ = shortpos;
  if (shortpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:position.AccPosWrapper.shortpos)
}
inline ::position::AccountPosition* AccPosWrapper::release_shortpos() {
  auto temp = unsafe_arena_release_shortpos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::position::AccountPosition* AccPosWrapper::unsafe_arena_release_shortpos() {
  // @@protoc_insertion_point(field_release:position.AccPosWrapper.shortpos)
  
  ::position::AccountPosition* temp = shortpos_;
  shortpos_ = nullptr;
  return temp;
}
inline ::position::AccountPosition* AccPosWrapper::_internal_mutable_shortpos() {
  
  if (shortpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::position::AccountPosition>(GetArena());
    shortpos_ = p;
  }
  return shortpos_;
}
inline ::position::AccountPosition* AccPosWrapper::mutable_shortpos() {
  // @@protoc_insertion_point(field_mutable:position.AccPosWrapper.shortpos)
  return _internal_mutable_shortpos();
}
inline void AccPosWrapper::set_allocated_shortpos(::position::AccountPosition* shortpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shortpos_;
  }
  if (shortpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shortpos);
    if (message_arena != submessage_arena) {
      shortpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortpos, submessage_arena);
    }
    
  } else {
    
  }
  shortpos_ = shortpos;
  // @@protoc_insertion_point(field_set_allocated:position.AccPosWrapper.shortpos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace position

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::position::PosDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::position::PosDirection>() {
  return ::position::PosDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_position_2eproto

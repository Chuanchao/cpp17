// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datafeed.proto

#include "datafeed.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_datafeed_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceQuantity_datafeed_2eproto;
namespace datafeed {
class FutureDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FutureDefinition> _instance;
} _FutureDefinition_default_instance_;
class PriceQuantityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceQuantity> _instance;
} _PriceQuantity_default_instance_;
class TickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TickData> _instance;
} _TickData_default_instance_;
}  // namespace datafeed
static void InitDefaultsscc_info_FutureDefinition_datafeed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datafeed::_FutureDefinition_default_instance_;
    new (ptr) ::datafeed::FutureDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datafeed::FutureDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FutureDefinition_datafeed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FutureDefinition_datafeed_2eproto}, {}};

static void InitDefaultsscc_info_PriceQuantity_datafeed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datafeed::_PriceQuantity_default_instance_;
    new (ptr) ::datafeed::PriceQuantity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datafeed::PriceQuantity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceQuantity_datafeed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriceQuantity_datafeed_2eproto}, {}};

static void InitDefaultsscc_info_TickData_datafeed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datafeed::_TickData_default_instance_;
    new (ptr) ::datafeed::TickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datafeed::TickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TickData_datafeed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TickData_datafeed_2eproto}, {
      &scc_info_PriceQuantity_datafeed_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_datafeed_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_datafeed_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_datafeed_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_datafeed_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datafeed::FutureDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datafeed::FutureDefinition, instrumentid_),
  PROTOBUF_FIELD_OFFSET(::datafeed::FutureDefinition, product_),
  PROTOBUF_FIELD_OFFSET(::datafeed::FutureDefinition, exchangeid_),
  PROTOBUF_FIELD_OFFSET(::datafeed::FutureDefinition, pricetick_),
  PROTOBUF_FIELD_OFFSET(::datafeed::FutureDefinition, multiplier_),
  PROTOBUF_FIELD_OFFSET(::datafeed::FutureDefinition, expiredate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datafeed::PriceQuantity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datafeed::PriceQuantity, price_),
  PROTOBUF_FIELD_OFFSET(::datafeed::PriceQuantity, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, contract_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, exchangeid_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, bid1_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, bid2_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, bid3_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, bid4_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, bid5_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, ask1_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, ask2_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, ask3_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, ask4_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, ask5_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, lasttradeprice_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, open_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, highest_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, lowest_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, volume_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, turnover_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, openinterest_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, averageprice_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, presettlement_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, tradingdate_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, exchangetime_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, upperlimitprice_),
  PROTOBUF_FIELD_OFFSET(::datafeed::TickData, lowlimitprice_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::datafeed::FutureDefinition)},
  { 11, -1, sizeof(::datafeed::PriceQuantity)},
  { 18, -1, sizeof(::datafeed::TickData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datafeed::_FutureDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datafeed::_PriceQuantity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datafeed::_TickData_default_instance_),
};

const char descriptor_table_protodef_datafeed_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016datafeed.proto\022\010datafeed\"\210\001\n\020FutureDef"
  "inition\022\024\n\014InstrumentID\030\001 \001(\t\022\017\n\007Product"
  "\030\003 \001(\t\022\022\n\nExchangeID\030\004 \001(\t\022\021\n\tPriceTick\030"
  "\005 \001(\001\022\022\n\nMultiplier\030\006 \001(\001\022\022\n\nExpireDate\030"
  "\007 \001(\t\"0\n\rPriceQuantity\022\r\n\005price\030\001 \001(\001\022\020\n"
  "\010quantity\030\002 \001(\003\"\275\005\n\010TickData\022\020\n\010contract"
  "\030\001 \001(\t\022\022\n\nexchangeid\030\003 \001(\t\022%\n\004bid1\030\004 \001(\013"
  "2\027.datafeed.PriceQuantity\022%\n\004bid2\030\005 \001(\0132"
  "\027.datafeed.PriceQuantity\022%\n\004bid3\030\006 \001(\0132\027"
  ".datafeed.PriceQuantity\022%\n\004bid4\030\007 \001(\0132\027."
  "datafeed.PriceQuantity\022%\n\004bid5\030\010 \001(\0132\027.d"
  "atafeed.PriceQuantity\022%\n\004ask1\030\t \001(\0132\027.da"
  "tafeed.PriceQuantity\022%\n\004ask2\030\n \001(\0132\027.dat"
  "afeed.PriceQuantity\022%\n\004ask3\030\013 \001(\0132\027.data"
  "feed.PriceQuantity\022%\n\004ask4\030\014 \001(\0132\027.dataf"
  "eed.PriceQuantity\022%\n\004ask5\030\r \001(\0132\027.datafe"
  "ed.PriceQuantity\022\026\n\016lastTradePrice\030\016 \001(\001"
  "\022\014\n\004open\030\017 \001(\001\022\017\n\007highest\030\020 \001(\001\022\016\n\006lowes"
  "t\030\021 \001(\001\022\016\n\006volume\030\022 \001(\003\022\020\n\010turnover\030\023 \001("
  "\001\022\024\n\014openInterest\030\024 \001(\001\022\024\n\014averagePrice\030"
  "\025 \001(\001\022\025\n\rpreSettlement\030\026 \001(\001\022\023\n\013tradingd"
  "ate\030\027 \001(\t\022\024\n\014exchangetime\030\030 \001(\t\022\027\n\017upper"
  "limitprice\030\031 \001(\001\022\025\n\rlowlimitprice\030\032 \001(\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_datafeed_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_datafeed_2eproto_sccs[3] = {
  &scc_info_FutureDefinition_datafeed_2eproto.base,
  &scc_info_PriceQuantity_datafeed_2eproto.base,
  &scc_info_TickData_datafeed_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_datafeed_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datafeed_2eproto = {
  false, false, descriptor_table_protodef_datafeed_2eproto, "datafeed.proto", 927,
  &descriptor_table_datafeed_2eproto_once, descriptor_table_datafeed_2eproto_sccs, descriptor_table_datafeed_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_datafeed_2eproto::offsets,
  file_level_metadata_datafeed_2eproto, 3, file_level_enum_descriptors_datafeed_2eproto, file_level_service_descriptors_datafeed_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_datafeed_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_datafeed_2eproto)), true);
namespace datafeed {

// ===================================================================

void FutureDefinition::InitAsDefaultInstance() {
}
class FutureDefinition::_Internal {
 public:
};

FutureDefinition::FutureDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:datafeed.FutureDefinition)
}
FutureDefinition::FutureDefinition(const FutureDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentid().empty()) {
    instrumentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentid(),
      GetArena());
  }
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product().empty()) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product(),
      GetArena());
  }
  exchangeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchangeid().empty()) {
    exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchangeid(),
      GetArena());
  }
  expiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expiredate().empty()) {
    expiredate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expiredate(),
      GetArena());
  }
  ::memcpy(&pricetick_, &from.pricetick_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiplier_) -
    reinterpret_cast<char*>(&pricetick_)) + sizeof(multiplier_));
  // @@protoc_insertion_point(copy_constructor:datafeed.FutureDefinition)
}

void FutureDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FutureDefinition_datafeed_2eproto.base);
  instrumentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiredate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pricetick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplier_) -
      reinterpret_cast<char*>(&pricetick_)) + sizeof(multiplier_));
}

FutureDefinition::~FutureDefinition() {
  // @@protoc_insertion_point(destructor:datafeed.FutureDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FutureDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiredate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FutureDefinition::ArenaDtor(void* object) {
  FutureDefinition* _this = reinterpret_cast< FutureDefinition* >(object);
  (void)_this;
}
void FutureDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FutureDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FutureDefinition& FutureDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FutureDefinition_datafeed_2eproto.base);
  return *internal_default_instance();
}


void FutureDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:datafeed.FutureDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchangeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expiredate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pricetick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplier_) -
      reinterpret_cast<char*>(&pricetick_)) + sizeof(multiplier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutureDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string InstrumentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrumentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datafeed.FutureDefinition.InstrumentID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Product = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_product();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datafeed.FutureDefinition.Product"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ExchangeID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_exchangeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datafeed.FutureDefinition.ExchangeID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double PriceTick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          pricetick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Multiplier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string ExpireDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_expiredate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datafeed.FutureDefinition.ExpireDate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FutureDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datafeed.FutureDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string InstrumentID = 1;
  if (this->instrumentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumentid().data(), static_cast<int>(this->_internal_instrumentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datafeed.FutureDefinition.InstrumentID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrumentid(), target);
  }

  // string Product = 3;
  if (this->product().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datafeed.FutureDefinition.Product");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_product(), target);
  }

  // string ExchangeID = 4;
  if (this->exchangeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchangeid().data(), static_cast<int>(this->_internal_exchangeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datafeed.FutureDefinition.ExchangeID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exchangeid(), target);
  }

  // double PriceTick = 5;
  if (!(this->pricetick() <= 0 && this->pricetick() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pricetick(), target);
  }

  // double Multiplier = 6;
  if (!(this->multiplier() <= 0 && this->multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_multiplier(), target);
  }

  // string ExpireDate = 7;
  if (this->expiredate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expiredate().data(), static_cast<int>(this->_internal_expiredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datafeed.FutureDefinition.ExpireDate");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_expiredate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datafeed.FutureDefinition)
  return target;
}

size_t FutureDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datafeed.FutureDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string InstrumentID = 1;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumentid());
  }

  // string Product = 3;
  if (this->product().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product());
  }

  // string ExchangeID = 4;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchangeid());
  }

  // string ExpireDate = 7;
  if (this->expiredate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expiredate());
  }

  // double PriceTick = 5;
  if (!(this->pricetick() <= 0 && this->pricetick() >= 0)) {
    total_size += 1 + 8;
  }

  // double Multiplier = 6;
  if (!(this->multiplier() <= 0 && this->multiplier() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datafeed.FutureDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FutureDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datafeed.FutureDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datafeed.FutureDefinition)
    MergeFrom(*source);
  }
}

void FutureDefinition::MergeFrom(const FutureDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datafeed.FutureDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrumentid().size() > 0) {
    _internal_set_instrumentid(from._internal_instrumentid());
  }
  if (from.product().size() > 0) {
    _internal_set_product(from._internal_product());
  }
  if (from.exchangeid().size() > 0) {
    _internal_set_exchangeid(from._internal_exchangeid());
  }
  if (from.expiredate().size() > 0) {
    _internal_set_expiredate(from._internal_expiredate());
  }
  if (!(from.pricetick() <= 0 && from.pricetick() >= 0)) {
    _internal_set_pricetick(from._internal_pricetick());
  }
  if (!(from.multiplier() <= 0 && from.multiplier() >= 0)) {
    _internal_set_multiplier(from._internal_multiplier());
  }
}

void FutureDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datafeed.FutureDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureDefinition::CopyFrom(const FutureDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datafeed.FutureDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureDefinition::IsInitialized() const {
  return true;
}

void FutureDefinition::InternalSwap(FutureDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrumentid_.Swap(&other->instrumentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_.Swap(&other->product_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchangeid_.Swap(&other->exchangeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expiredate_.Swap(&other->expiredate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FutureDefinition, multiplier_)
      + sizeof(FutureDefinition::multiplier_)
      - PROTOBUF_FIELD_OFFSET(FutureDefinition, pricetick_)>(
          reinterpret_cast<char*>(&pricetick_),
          reinterpret_cast<char*>(&other->pricetick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FutureDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriceQuantity::InitAsDefaultInstance() {
}
class PriceQuantity::_Internal {
 public:
};

PriceQuantity::PriceQuantity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:datafeed.PriceQuantity)
}
PriceQuantity::PriceQuantity(const PriceQuantity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:datafeed.PriceQuantity)
}

void PriceQuantity::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
}

PriceQuantity::~PriceQuantity() {
  // @@protoc_insertion_point(destructor:datafeed.PriceQuantity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceQuantity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PriceQuantity::ArenaDtor(void* object) {
  PriceQuantity* _this = reinterpret_cast< PriceQuantity* >(object);
  (void)_this;
}
void PriceQuantity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceQuantity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceQuantity& PriceQuantity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceQuantity_datafeed_2eproto.base);
  return *internal_default_instance();
}


void PriceQuantity::Clear() {
// @@protoc_insertion_point(message_clear_start:datafeed.PriceQuantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceQuantity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceQuantity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datafeed.PriceQuantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_price(), target);
  }

  // int64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datafeed.PriceQuantity)
  return target;
}

size_t PriceQuantity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datafeed.PriceQuantity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceQuantity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datafeed.PriceQuantity)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceQuantity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceQuantity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datafeed.PriceQuantity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datafeed.PriceQuantity)
    MergeFrom(*source);
  }
}

void PriceQuantity::MergeFrom(const PriceQuantity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datafeed.PriceQuantity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void PriceQuantity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datafeed.PriceQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceQuantity::CopyFrom(const PriceQuantity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datafeed.PriceQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceQuantity::IsInitialized() const {
  return true;
}

void PriceQuantity::InternalSwap(PriceQuantity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceQuantity, quantity_)
      + sizeof(PriceQuantity::quantity_)
      - PROTOBUF_FIELD_OFFSET(PriceQuantity, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceQuantity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TickData::InitAsDefaultInstance() {
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->bid1_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->bid2_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->bid3_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->bid4_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->bid5_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->ask1_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->ask2_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->ask3_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->ask4_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
  ::datafeed::_TickData_default_instance_._instance.get_mutable()->ask5_ = const_cast< ::datafeed::PriceQuantity*>(
      ::datafeed::PriceQuantity::internal_default_instance());
}
class TickData::_Internal {
 public:
  static const ::datafeed::PriceQuantity& bid1(const TickData* msg);
  static const ::datafeed::PriceQuantity& bid2(const TickData* msg);
  static const ::datafeed::PriceQuantity& bid3(const TickData* msg);
  static const ::datafeed::PriceQuantity& bid4(const TickData* msg);
  static const ::datafeed::PriceQuantity& bid5(const TickData* msg);
  static const ::datafeed::PriceQuantity& ask1(const TickData* msg);
  static const ::datafeed::PriceQuantity& ask2(const TickData* msg);
  static const ::datafeed::PriceQuantity& ask3(const TickData* msg);
  static const ::datafeed::PriceQuantity& ask4(const TickData* msg);
  static const ::datafeed::PriceQuantity& ask5(const TickData* msg);
};

const ::datafeed::PriceQuantity&
TickData::_Internal::bid1(const TickData* msg) {
  return *msg->bid1_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::bid2(const TickData* msg) {
  return *msg->bid2_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::bid3(const TickData* msg) {
  return *msg->bid3_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::bid4(const TickData* msg) {
  return *msg->bid4_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::bid5(const TickData* msg) {
  return *msg->bid5_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::ask1(const TickData* msg) {
  return *msg->ask1_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::ask2(const TickData* msg) {
  return *msg->ask2_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::ask3(const TickData* msg) {
  return *msg->ask3_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::ask4(const TickData* msg) {
  return *msg->ask4_;
}
const ::datafeed::PriceQuantity&
TickData::_Internal::ask5(const TickData* msg) {
  return *msg->ask5_;
}
TickData::TickData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:datafeed.TickData)
}
TickData::TickData(const TickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract().empty()) {
    contract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract(),
      GetArena());
  }
  exchangeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchangeid().empty()) {
    exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchangeid(),
      GetArena());
  }
  tradingdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingdate().empty()) {
    tradingdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tradingdate(),
      GetArena());
  }
  exchangetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchangetime().empty()) {
    exchangetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchangetime(),
      GetArena());
  }
  if (from._internal_has_bid1()) {
    bid1_ = new ::datafeed::PriceQuantity(*from.bid1_);
  } else {
    bid1_ = nullptr;
  }
  if (from._internal_has_bid2()) {
    bid2_ = new ::datafeed::PriceQuantity(*from.bid2_);
  } else {
    bid2_ = nullptr;
  }
  if (from._internal_has_bid3()) {
    bid3_ = new ::datafeed::PriceQuantity(*from.bid3_);
  } else {
    bid3_ = nullptr;
  }
  if (from._internal_has_bid4()) {
    bid4_ = new ::datafeed::PriceQuantity(*from.bid4_);
  } else {
    bid4_ = nullptr;
  }
  if (from._internal_has_bid5()) {
    bid5_ = new ::datafeed::PriceQuantity(*from.bid5_);
  } else {
    bid5_ = nullptr;
  }
  if (from._internal_has_ask1()) {
    ask1_ = new ::datafeed::PriceQuantity(*from.ask1_);
  } else {
    ask1_ = nullptr;
  }
  if (from._internal_has_ask2()) {
    ask2_ = new ::datafeed::PriceQuantity(*from.ask2_);
  } else {
    ask2_ = nullptr;
  }
  if (from._internal_has_ask3()) {
    ask3_ = new ::datafeed::PriceQuantity(*from.ask3_);
  } else {
    ask3_ = nullptr;
  }
  if (from._internal_has_ask4()) {
    ask4_ = new ::datafeed::PriceQuantity(*from.ask4_);
  } else {
    ask4_ = nullptr;
  }
  if (from._internal_has_ask5()) {
    ask5_ = new ::datafeed::PriceQuantity(*from.ask5_);
  } else {
    ask5_ = nullptr;
  }
  ::memcpy(&lasttradeprice_, &from.lasttradeprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&lowlimitprice_) -
    reinterpret_cast<char*>(&lasttradeprice_)) + sizeof(lowlimitprice_));
  // @@protoc_insertion_point(copy_constructor:datafeed.TickData)
}

void TickData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TickData_datafeed_2eproto.base);
  contract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lowlimitprice_) -
      reinterpret_cast<char*>(&bid1_)) + sizeof(lowlimitprice_));
}

TickData::~TickData() {
  // @@protoc_insertion_point(destructor:datafeed.TickData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TickData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchangetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bid1_;
  if (this != internal_default_instance()) delete bid2_;
  if (this != internal_default_instance()) delete bid3_;
  if (this != internal_default_instance()) delete bid4_;
  if (this != internal_default_instance()) delete bid5_;
  if (this != internal_default_instance()) delete ask1_;
  if (this != internal_default_instance()) delete ask2_;
  if (this != internal_default_instance()) delete ask3_;
  if (this != internal_default_instance()) delete ask4_;
  if (this != internal_default_instance()) delete ask5_;
}

void TickData::ArenaDtor(void* object) {
  TickData* _this = reinterpret_cast< TickData* >(object);
  (void)_this;
}
void TickData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TickData& TickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TickData_datafeed_2eproto.base);
  return *internal_default_instance();
}


void TickData::Clear() {
// @@protoc_insertion_point(message_clear_start:datafeed.TickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchangeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tradingdate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchangetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && bid1_ != nullptr) {
    delete bid1_;
  }
  bid1_ = nullptr;
  if (GetArena() == nullptr && bid2_ != nullptr) {
    delete bid2_;
  }
  bid2_ = nullptr;
  if (GetArena() == nullptr && bid3_ != nullptr) {
    delete bid3_;
  }
  bid3_ = nullptr;
  if (GetArena() == nullptr && bid4_ != nullptr) {
    delete bid4_;
  }
  bid4_ = nullptr;
  if (GetArena() == nullptr && bid5_ != nullptr) {
    delete bid5_;
  }
  bid5_ = nullptr;
  if (GetArena() == nullptr && ask1_ != nullptr) {
    delete ask1_;
  }
  ask1_ = nullptr;
  if (GetArena() == nullptr && ask2_ != nullptr) {
    delete ask2_;
  }
  ask2_ = nullptr;
  if (GetArena() == nullptr && ask3_ != nullptr) {
    delete ask3_;
  }
  ask3_ = nullptr;
  if (GetArena() == nullptr && ask4_ != nullptr) {
    delete ask4_;
  }
  ask4_ = nullptr;
  if (GetArena() == nullptr && ask5_ != nullptr) {
    delete ask5_;
  }
  ask5_ = nullptr;
  ::memset(&lasttradeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lowlimitprice_) -
      reinterpret_cast<char*>(&lasttradeprice_)) + sizeof(lowlimitprice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datafeed.TickData.contract"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchangeid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exchangeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datafeed.TickData.exchangeid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity bid1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bid1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity bid2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bid2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity bid3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bid3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity bid4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bid4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity bid5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bid5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity ask1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ask1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity ask2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ask2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity ask3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ask3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity ask4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ask4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .datafeed.PriceQuantity ask5 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ask5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lastTradePrice = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          lasttradeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double open = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double highest = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          highest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lowest = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          lowest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 volume = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double openInterest = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double averagePrice = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          averageprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double preSettlement = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          presettlement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string tradingdate = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_tradingdate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datafeed.TickData.tradingdate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchangetime = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_exchangetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datafeed.TickData.exchangetime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double upperlimitprice = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          upperlimitprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lowlimitprice = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          lowlimitprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datafeed.TickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract = 1;
  if (this->contract().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract().data(), static_cast<int>(this->_internal_contract().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datafeed.TickData.contract");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract(), target);
  }

  // string exchangeid = 3;
  if (this->exchangeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchangeid().data(), static_cast<int>(this->_internal_exchangeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datafeed.TickData.exchangeid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchangeid(), target);
  }

  // .datafeed.PriceQuantity bid1 = 4;
  if (this->has_bid1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bid1(this), target, stream);
  }

  // .datafeed.PriceQuantity bid2 = 5;
  if (this->has_bid2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bid2(this), target, stream);
  }

  // .datafeed.PriceQuantity bid3 = 6;
  if (this->has_bid3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bid3(this), target, stream);
  }

  // .datafeed.PriceQuantity bid4 = 7;
  if (this->has_bid4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bid4(this), target, stream);
  }

  // .datafeed.PriceQuantity bid5 = 8;
  if (this->has_bid5()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::bid5(this), target, stream);
  }

  // .datafeed.PriceQuantity ask1 = 9;
  if (this->has_ask1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ask1(this), target, stream);
  }

  // .datafeed.PriceQuantity ask2 = 10;
  if (this->has_ask2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ask2(this), target, stream);
  }

  // .datafeed.PriceQuantity ask3 = 11;
  if (this->has_ask3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ask3(this), target, stream);
  }

  // .datafeed.PriceQuantity ask4 = 12;
  if (this->has_ask4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::ask4(this), target, stream);
  }

  // .datafeed.PriceQuantity ask5 = 13;
  if (this->has_ask5()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::ask5(this), target, stream);
  }

  // double lastTradePrice = 14;
  if (!(this->lasttradeprice() <= 0 && this->lasttradeprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_lasttradeprice(), target);
  }

  // double open = 15;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_open(), target);
  }

  // double highest = 16;
  if (!(this->highest() <= 0 && this->highest() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_highest(), target);
  }

  // double lowest = 17;
  if (!(this->lowest() <= 0 && this->lowest() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_lowest(), target);
  }

  // int64 volume = 18;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_volume(), target);
  }

  // double turnover = 19;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_turnover(), target);
  }

  // double openInterest = 20;
  if (!(this->openinterest() <= 0 && this->openinterest() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_openinterest(), target);
  }

  // double averagePrice = 21;
  if (!(this->averageprice() <= 0 && this->averageprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_averageprice(), target);
  }

  // double preSettlement = 22;
  if (!(this->presettlement() <= 0 && this->presettlement() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_presettlement(), target);
  }

  // string tradingdate = 23;
  if (this->tradingdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingdate().data(), static_cast<int>(this->_internal_tradingdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datafeed.TickData.tradingdate");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_tradingdate(), target);
  }

  // string exchangetime = 24;
  if (this->exchangetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchangetime().data(), static_cast<int>(this->_internal_exchangetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datafeed.TickData.exchangetime");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_exchangetime(), target);
  }

  // double upperlimitprice = 25;
  if (!(this->upperlimitprice() <= 0 && this->upperlimitprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_upperlimitprice(), target);
  }

  // double lowlimitprice = 26;
  if (!(this->lowlimitprice() <= 0 && this->lowlimitprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_lowlimitprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datafeed.TickData)
  return target;
}

size_t TickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datafeed.TickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract = 1;
  if (this->contract().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract());
  }

  // string exchangeid = 3;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchangeid());
  }

  // string tradingdate = 23;
  if (this->tradingdate().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingdate());
  }

  // string exchangetime = 24;
  if (this->exchangetime().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchangetime());
  }

  // .datafeed.PriceQuantity bid1 = 4;
  if (this->has_bid1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bid1_);
  }

  // .datafeed.PriceQuantity bid2 = 5;
  if (this->has_bid2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bid2_);
  }

  // .datafeed.PriceQuantity bid3 = 6;
  if (this->has_bid3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bid3_);
  }

  // .datafeed.PriceQuantity bid4 = 7;
  if (this->has_bid4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bid4_);
  }

  // .datafeed.PriceQuantity bid5 = 8;
  if (this->has_bid5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bid5_);
  }

  // .datafeed.PriceQuantity ask1 = 9;
  if (this->has_ask1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ask1_);
  }

  // .datafeed.PriceQuantity ask2 = 10;
  if (this->has_ask2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ask2_);
  }

  // .datafeed.PriceQuantity ask3 = 11;
  if (this->has_ask3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ask3_);
  }

  // .datafeed.PriceQuantity ask4 = 12;
  if (this->has_ask4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ask4_);
  }

  // .datafeed.PriceQuantity ask5 = 13;
  if (this->has_ask5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ask5_);
  }

  // double lastTradePrice = 14;
  if (!(this->lasttradeprice() <= 0 && this->lasttradeprice() >= 0)) {
    total_size += 1 + 8;
  }

  // double open = 15;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    total_size += 1 + 8;
  }

  // double highest = 16;
  if (!(this->highest() <= 0 && this->highest() >= 0)) {
    total_size += 2 + 8;
  }

  // double lowest = 17;
  if (!(this->lowest() <= 0 && this->lowest() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 volume = 18;
  if (this->volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // double turnover = 19;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 2 + 8;
  }

  // double openInterest = 20;
  if (!(this->openinterest() <= 0 && this->openinterest() >= 0)) {
    total_size += 2 + 8;
  }

  // double averagePrice = 21;
  if (!(this->averageprice() <= 0 && this->averageprice() >= 0)) {
    total_size += 2 + 8;
  }

  // double preSettlement = 22;
  if (!(this->presettlement() <= 0 && this->presettlement() >= 0)) {
    total_size += 2 + 8;
  }

  // double upperlimitprice = 25;
  if (!(this->upperlimitprice() <= 0 && this->upperlimitprice() >= 0)) {
    total_size += 2 + 8;
  }

  // double lowlimitprice = 26;
  if (!(this->lowlimitprice() <= 0 && this->lowlimitprice() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datafeed.TickData)
  GOOGLE_DCHECK_NE(&from, this);
  const TickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datafeed.TickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datafeed.TickData)
    MergeFrom(*source);
  }
}

void TickData::MergeFrom(const TickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datafeed.TickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract().size() > 0) {
    _internal_set_contract(from._internal_contract());
  }
  if (from.exchangeid().size() > 0) {
    _internal_set_exchangeid(from._internal_exchangeid());
  }
  if (from.tradingdate().size() > 0) {
    _internal_set_tradingdate(from._internal_tradingdate());
  }
  if (from.exchangetime().size() > 0) {
    _internal_set_exchangetime(from._internal_exchangetime());
  }
  if (from.has_bid1()) {
    _internal_mutable_bid1()->::datafeed::PriceQuantity::MergeFrom(from._internal_bid1());
  }
  if (from.has_bid2()) {
    _internal_mutable_bid2()->::datafeed::PriceQuantity::MergeFrom(from._internal_bid2());
  }
  if (from.has_bid3()) {
    _internal_mutable_bid3()->::datafeed::PriceQuantity::MergeFrom(from._internal_bid3());
  }
  if (from.has_bid4()) {
    _internal_mutable_bid4()->::datafeed::PriceQuantity::MergeFrom(from._internal_bid4());
  }
  if (from.has_bid5()) {
    _internal_mutable_bid5()->::datafeed::PriceQuantity::MergeFrom(from._internal_bid5());
  }
  if (from.has_ask1()) {
    _internal_mutable_ask1()->::datafeed::PriceQuantity::MergeFrom(from._internal_ask1());
  }
  if (from.has_ask2()) {
    _internal_mutable_ask2()->::datafeed::PriceQuantity::MergeFrom(from._internal_ask2());
  }
  if (from.has_ask3()) {
    _internal_mutable_ask3()->::datafeed::PriceQuantity::MergeFrom(from._internal_ask3());
  }
  if (from.has_ask4()) {
    _internal_mutable_ask4()->::datafeed::PriceQuantity::MergeFrom(from._internal_ask4());
  }
  if (from.has_ask5()) {
    _internal_mutable_ask5()->::datafeed::PriceQuantity::MergeFrom(from._internal_ask5());
  }
  if (!(from.lasttradeprice() <= 0 && from.lasttradeprice() >= 0)) {
    _internal_set_lasttradeprice(from._internal_lasttradeprice());
  }
  if (!(from.open() <= 0 && from.open() >= 0)) {
    _internal_set_open(from._internal_open());
  }
  if (!(from.highest() <= 0 && from.highest() >= 0)) {
    _internal_set_highest(from._internal_highest());
  }
  if (!(from.lowest() <= 0 && from.lowest() >= 0)) {
    _internal_set_lowest(from._internal_lowest());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.openinterest() <= 0 && from.openinterest() >= 0)) {
    _internal_set_openinterest(from._internal_openinterest());
  }
  if (!(from.averageprice() <= 0 && from.averageprice() >= 0)) {
    _internal_set_averageprice(from._internal_averageprice());
  }
  if (!(from.presettlement() <= 0 && from.presettlement() >= 0)) {
    _internal_set_presettlement(from._internal_presettlement());
  }
  if (!(from.upperlimitprice() <= 0 && from.upperlimitprice() >= 0)) {
    _internal_set_upperlimitprice(from._internal_upperlimitprice());
  }
  if (!(from.lowlimitprice() <= 0 && from.lowlimitprice() >= 0)) {
    _internal_set_lowlimitprice(from._internal_lowlimitprice());
  }
}

void TickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datafeed.TickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickData::CopyFrom(const TickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datafeed.TickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickData::IsInitialized() const {
  return true;
}

void TickData::InternalSwap(TickData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_.Swap(&other->contract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchangeid_.Swap(&other->exchangeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tradingdate_.Swap(&other->tradingdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchangetime_.Swap(&other->exchangetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TickData, lowlimitprice_)
      + sizeof(TickData::lowlimitprice_)
      - PROTOBUF_FIELD_OFFSET(TickData, bid1_)>(
          reinterpret_cast<char*>(&bid1_),
          reinterpret_cast<char*>(&other->bid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TickData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace datafeed
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datafeed::FutureDefinition* Arena::CreateMaybeMessage< ::datafeed::FutureDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datafeed::FutureDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::datafeed::PriceQuantity* Arena::CreateMaybeMessage< ::datafeed::PriceQuantity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datafeed::PriceQuantity >(arena);
}
template<> PROTOBUF_NOINLINE ::datafeed::TickData* Arena::CreateMaybeMessage< ::datafeed::TickData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datafeed::TickData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

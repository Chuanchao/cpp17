// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Orders {
class SubmitOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitOrder> _instance;
} _SubmitOrder_default_instance_;
class CancelOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelOrder> _instance;
} _CancelOrder_default_instance_;
class RtnTradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtnTrade> _instance;
} _RtnTrade_default_instance_;
class RtnOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtnOrder> _instance;
} _RtnOrder_default_instance_;
}  // namespace Orders
static void InitDefaultsscc_info_CancelOrder_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orders::_CancelOrder_default_instance_;
    new (ptr) ::Orders::CancelOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orders::CancelOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelOrder_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelOrder_order_2eproto}, {}};

static void InitDefaultsscc_info_RtnOrder_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orders::_RtnOrder_default_instance_;
    new (ptr) ::Orders::RtnOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orders::RtnOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtnOrder_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RtnOrder_order_2eproto}, {}};

static void InitDefaultsscc_info_RtnTrade_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orders::_RtnTrade_default_instance_;
    new (ptr) ::Orders::RtnTrade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orders::RtnTrade::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtnTrade_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RtnTrade_order_2eproto}, {}};

static void InitDefaultsscc_info_SubmitOrder_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orders::_SubmitOrder_default_instance_;
    new (ptr) ::Orders::SubmitOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orders::SubmitOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitOrder_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitOrder_order_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_order_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_order_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_order_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_order_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, stgyid_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, prodid_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, instid_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, amount_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, price_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, order_t_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, stgy_d_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, real_d_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, exchid_),
  PROTOBUF_FIELD_OFFSET(::Orders::SubmitOrder, orderref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Orders::CancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Orders::CancelOrder, stgyid_),
  PROTOBUF_FIELD_OFFSET(::Orders::CancelOrder, instid_),
  PROTOBUF_FIELD_OFFSET(::Orders::CancelOrder, orderref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, stgyid_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, prodid_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, instid_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, tradedamount_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, avgprice_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, order_t_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, real_d_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, exchid_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnTrade, orderref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, stgyid_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, prodid_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, instid_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, status_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, stgy_d_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, real_d_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, exchid_),
  PROTOBUF_FIELD_OFFSET(::Orders::RtnOrder, orderref_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Orders::SubmitOrder)},
  { 15, -1, sizeof(::Orders::CancelOrder)},
  { 23, -1, sizeof(::Orders::RtnTrade)},
  { 37, -1, sizeof(::Orders::RtnOrder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Orders::_SubmitOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Orders::_CancelOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Orders::_RtnTrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Orders::_RtnOrder_default_instance_),
};

const char descriptor_table_protodef_order_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013order.proto\022\006Orders\"\362\001\n\013SubmitOrder\022\016\n"
  "\006stgyID\030\001 \001(\t\022\016\n\006prodID\030\002 \001(\t\022\016\n\006instID\030"
  "\003 \001(\t\022\016\n\006amount\030\004 \001(\005\022\r\n\005price\030\005 \001(\001\022\"\n\007"
  "order_t\030\006 \001(\0162\021.Orders.OrderType\022&\n\006stgy"
  "_d\030\007 \001(\0162\026.Orders.OrderDirection\022&\n\006real"
  "_d\030\010 \001(\0162\026.Orders.OrderDirection\022\016\n\006exch"
  "Id\030\t \001(\t\022\020\n\010orderRef\030\n \001(\003\"\?\n\013CancelOrde"
  "r\022\016\n\006stgyID\030\001 \001(\t\022\016\n\006instID\030\002 \001(\t\022\020\n\010ord"
  "erRef\030\003 \001(\003\"\320\001\n\010RtnTrade\022\016\n\006stgyID\030\001 \001(\t"
  "\022\016\n\006prodID\030\002 \001(\t\022\016\n\006instID\030\003 \001(\t\022\024\n\014trad"
  "edAmount\030\004 \001(\005\022\020\n\010avgPrice\030\005 \001(\001\022\"\n\007orde"
  "r_t\030\006 \001(\0162\021.Orders.OrderType\022&\n\006real_d\030\007"
  " \001(\0162\026.Orders.OrderDirection\022\016\n\006exchId\030\t"
  " \001(\t\022\020\n\010orderRef\030\n \001(\003\"\321\001\n\010RtnOrder\022\016\n\006s"
  "tgyID\030\001 \001(\t\022\016\n\006prodID\030\002 \001(\t\022\016\n\006instID\030\003 "
  "\001(\t\022#\n\006status\030\005 \001(\0162\023.Orders.OrderStatus"
  "\022&\n\006stgy_d\030\006 \001(\0162\026.Orders.OrderDirection"
  "\022&\n\006real_d\030\007 \001(\0162\026.Orders.OrderDirection"
  "\022\016\n\006exchId\030\010 \001(\t\022\020\n\010orderRef\030\t \001(\003*)\n\tOr"
  "derType\022\r\n\tIOC_ORDER\020\000\022\r\n\tGFD_ORDER\020\001*\245\001"
  "\n\016OrderDirection\022\r\n\tOPEN_LONG\020\000\022\016\n\nOPEN_"
  "SHORT\020\001\022\016\n\nCLOSE_LONG\020\002\022\017\n\013CLOSE_SHORT\020\003"
  "\022\024\n\020CLOSE_TODAY_LONG\020\004\022\025\n\021CLOSE_TODAY_SH"
  "ORT\020\005\022\021\n\rUNKNOWN_TRADE\020\006\022\023\n\017ORDER_TASK_B"
  "UTT\020\007*q\n\013OrderStatus\022\016\n\nWORK_ORDER\020\000\022\016\n\n"
  "DONE_ORDER\020\001\022\030\n\024RISKCONTROL_REJECTED\020\002\022\025"
  "\n\021EXCHANGE_REJECTED\020\003\022\021\n\rNETWORK_ERROR\020\004"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_order_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_order_2eproto_sccs[4] = {
  &scc_info_CancelOrder_order_2eproto.base,
  &scc_info_RtnOrder_order_2eproto.base,
  &scc_info_RtnTrade_order_2eproto.base,
  &scc_info_SubmitOrder_order_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_order_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_2eproto = {
  false, false, descriptor_table_protodef_order_2eproto, "order.proto", 1088,
  &descriptor_table_order_2eproto_once, descriptor_table_order_2eproto_sccs, descriptor_table_order_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_order_2eproto::offsets,
  file_level_metadata_order_2eproto, 4, file_level_enum_descriptors_order_2eproto, file_level_service_descriptors_order_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_order_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_order_2eproto)), true);
namespace Orders {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[0];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[1];
}
bool OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[2];
}
bool OrderStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SubmitOrder::InitAsDefaultInstance() {
}
class SubmitOrder::_Internal {
 public:
};

SubmitOrder::SubmitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orders.SubmitOrder)
}
SubmitOrder::SubmitOrder(const SubmitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stgyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stgyid().empty()) {
    stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stgyid(),
      GetArena());
  }
  prodid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prodid().empty()) {
    prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prodid(),
      GetArena());
  }
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instid().empty()) {
    instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instid(),
      GetArena());
  }
  exchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchid().empty()) {
    exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchid(),
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderref_) -
    reinterpret_cast<char*>(&price_)) + sizeof(orderref_));
  // @@protoc_insertion_point(copy_constructor:Orders.SubmitOrder)
}

void SubmitOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitOrder_order_2eproto.base);
  stgyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prodid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderref_) -
      reinterpret_cast<char*>(&price_)) + sizeof(orderref_));
}

SubmitOrder::~SubmitOrder() {
  // @@protoc_insertion_point(destructor:Orders.SubmitOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stgyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prodid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubmitOrder::ArenaDtor(void* object) {
  SubmitOrder* _this = reinterpret_cast< SubmitOrder* >(object);
  (void)_this;
}
void SubmitOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitOrder& SubmitOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitOrder_order_2eproto.base);
  return *internal_default_instance();
}


void SubmitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:Orders.SubmitOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stgyid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prodid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderref_) -
      reinterpret_cast<char*>(&price_)) + sizeof(orderref_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stgyID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stgyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.SubmitOrder.stgyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prodID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prodid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.SubmitOrder.prodID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.SubmitOrder.instID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Orders.OrderType order_t = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_t(static_cast<::Orders::OrderType>(val));
        } else goto handle_unusual;
        continue;
      // .Orders.OrderDirection stgy_d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stgy_d(static_cast<::Orders::OrderDirection>(val));
        } else goto handle_unusual;
        continue;
      // .Orders.OrderDirection real_d = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_d(static_cast<::Orders::OrderDirection>(val));
        } else goto handle_unusual;
        continue;
      // string exchId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_exchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.SubmitOrder.exchId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 orderRef = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          orderref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orders.SubmitOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stgyID = 1;
  if (this->stgyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stgyid().data(), static_cast<int>(this->_internal_stgyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.SubmitOrder.stgyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stgyid(), target);
  }

  // string prodID = 2;
  if (this->prodid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prodid().data(), static_cast<int>(this->_internal_prodid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.SubmitOrder.prodID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prodid(), target);
  }

  // string instID = 3;
  if (this->instid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instid().data(), static_cast<int>(this->_internal_instid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.SubmitOrder.instID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instid(), target);
  }

  // int32 amount = 4;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_amount(), target);
  }

  // double price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_price(), target);
  }

  // .Orders.OrderType order_t = 6;
  if (this->order_t() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_order_t(), target);
  }

  // .Orders.OrderDirection stgy_d = 7;
  if (this->stgy_d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_stgy_d(), target);
  }

  // .Orders.OrderDirection real_d = 8;
  if (this->real_d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_real_d(), target);
  }

  // string exchId = 9;
  if (this->exchid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchid().data(), static_cast<int>(this->_internal_exchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.SubmitOrder.exchId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_exchid(), target);
  }

  // int64 orderRef = 10;
  if (this->orderref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_orderref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orders.SubmitOrder)
  return target;
}

size_t SubmitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orders.SubmitOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stgyID = 1;
  if (this->stgyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stgyid());
  }

  // string prodID = 2;
  if (this->prodid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prodid());
  }

  // string instID = 3;
  if (this->instid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instid());
  }

  // string exchId = 9;
  if (this->exchid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchid());
  }

  // double price = 5;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_amount());
  }

  // .Orders.OrderType order_t = 6;
  if (this->order_t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order_t());
  }

  // .Orders.OrderDirection stgy_d = 7;
  if (this->stgy_d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stgy_d());
  }

  // .Orders.OrderDirection real_d = 8;
  if (this->real_d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_real_d());
  }

  // int64 orderRef = 10;
  if (this->orderref() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_orderref());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Orders.SubmitOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Orders.SubmitOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Orders.SubmitOrder)
    MergeFrom(*source);
  }
}

void SubmitOrder::MergeFrom(const SubmitOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orders.SubmitOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stgyid().size() > 0) {
    _internal_set_stgyid(from._internal_stgyid());
  }
  if (from.prodid().size() > 0) {
    _internal_set_prodid(from._internal_prodid());
  }
  if (from.instid().size() > 0) {
    _internal_set_instid(from._internal_instid());
  }
  if (from.exchid().size() > 0) {
    _internal_set_exchid(from._internal_exchid());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.order_t() != 0) {
    _internal_set_order_t(from._internal_order_t());
  }
  if (from.stgy_d() != 0) {
    _internal_set_stgy_d(from._internal_stgy_d());
  }
  if (from.real_d() != 0) {
    _internal_set_real_d(from._internal_real_d());
  }
  if (from.orderref() != 0) {
    _internal_set_orderref(from._internal_orderref());
  }
}

void SubmitOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Orders.SubmitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitOrder::CopyFrom(const SubmitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orders.SubmitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitOrder::IsInitialized() const {
  return true;
}

void SubmitOrder::InternalSwap(SubmitOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stgyid_.Swap(&other->stgyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prodid_.Swap(&other->prodid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instid_.Swap(&other->instid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchid_.Swap(&other->exchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmitOrder, orderref_)
      + sizeof(SubmitOrder::orderref_)
      - PROTOBUF_FIELD_OFFSET(SubmitOrder, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelOrder::InitAsDefaultInstance() {
}
class CancelOrder::_Internal {
 public:
};

CancelOrder::CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orders.CancelOrder)
}
CancelOrder::CancelOrder(const CancelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stgyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stgyid().empty()) {
    stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stgyid(),
      GetArena());
  }
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instid().empty()) {
    instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instid(),
      GetArena());
  }
  orderref_ = from.orderref_;
  // @@protoc_insertion_point(copy_constructor:Orders.CancelOrder)
}

void CancelOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelOrder_order_2eproto.base);
  stgyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderref_ = PROTOBUF_LONGLONG(0);
}

CancelOrder::~CancelOrder() {
  // @@protoc_insertion_point(destructor:Orders.CancelOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stgyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelOrder::ArenaDtor(void* object) {
  CancelOrder* _this = reinterpret_cast< CancelOrder* >(object);
  (void)_this;
}
void CancelOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOrder& CancelOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelOrder_order_2eproto.base);
  return *internal_default_instance();
}


void CancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:Orders.CancelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stgyid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderref_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stgyID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stgyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.CancelOrder.stgyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.CancelOrder.instID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 orderRef = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          orderref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orders.CancelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stgyID = 1;
  if (this->stgyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stgyid().data(), static_cast<int>(this->_internal_stgyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.CancelOrder.stgyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stgyid(), target);
  }

  // string instID = 2;
  if (this->instid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instid().data(), static_cast<int>(this->_internal_instid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.CancelOrder.instID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instid(), target);
  }

  // int64 orderRef = 3;
  if (this->orderref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_orderref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orders.CancelOrder)
  return target;
}

size_t CancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orders.CancelOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stgyID = 1;
  if (this->stgyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stgyid());
  }

  // string instID = 2;
  if (this->instid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instid());
  }

  // int64 orderRef = 3;
  if (this->orderref() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_orderref());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Orders.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Orders.CancelOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Orders.CancelOrder)
    MergeFrom(*source);
  }
}

void CancelOrder::MergeFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orders.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stgyid().size() > 0) {
    _internal_set_stgyid(from._internal_stgyid());
  }
  if (from.instid().size() > 0) {
    _internal_set_instid(from._internal_instid());
  }
  if (from.orderref() != 0) {
    _internal_set_orderref(from._internal_orderref());
  }
}

void CancelOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Orders.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrder::CopyFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orders.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrder::IsInitialized() const {
  return true;
}

void CancelOrder::InternalSwap(CancelOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stgyid_.Swap(&other->stgyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instid_.Swap(&other->instid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(orderref_, other->orderref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RtnTrade::InitAsDefaultInstance() {
}
class RtnTrade::_Internal {
 public:
};

RtnTrade::RtnTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orders.RtnTrade)
}
RtnTrade::RtnTrade(const RtnTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stgyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stgyid().empty()) {
    stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stgyid(),
      GetArena());
  }
  prodid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prodid().empty()) {
    prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prodid(),
      GetArena());
  }
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instid().empty()) {
    instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instid(),
      GetArena());
  }
  exchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchid().empty()) {
    exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchid(),
      GetArena());
  }
  ::memcpy(&avgprice_, &from.avgprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&real_d_) -
    reinterpret_cast<char*>(&avgprice_)) + sizeof(real_d_));
  // @@protoc_insertion_point(copy_constructor:Orders.RtnTrade)
}

void RtnTrade::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RtnTrade_order_2eproto.base);
  stgyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prodid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avgprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_d_) -
      reinterpret_cast<char*>(&avgprice_)) + sizeof(real_d_));
}

RtnTrade::~RtnTrade() {
  // @@protoc_insertion_point(destructor:Orders.RtnTrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RtnTrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stgyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prodid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RtnTrade::ArenaDtor(void* object) {
  RtnTrade* _this = reinterpret_cast< RtnTrade* >(object);
  (void)_this;
}
void RtnTrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtnTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtnTrade& RtnTrade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtnTrade_order_2eproto.base);
  return *internal_default_instance();
}


void RtnTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:Orders.RtnTrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stgyid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prodid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&avgprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_d_) -
      reinterpret_cast<char*>(&avgprice_)) + sizeof(real_d_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtnTrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stgyID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stgyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.RtnTrade.stgyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prodID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prodid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.RtnTrade.prodID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.RtnTrade.instID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tradedAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tradedamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double avgPrice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          avgprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Orders.OrderType order_t = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_t(static_cast<::Orders::OrderType>(val));
        } else goto handle_unusual;
        continue;
      // .Orders.OrderDirection real_d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_d(static_cast<::Orders::OrderDirection>(val));
        } else goto handle_unusual;
        continue;
      // string exchId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_exchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.RtnTrade.exchId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 orderRef = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          orderref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtnTrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orders.RtnTrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stgyID = 1;
  if (this->stgyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stgyid().data(), static_cast<int>(this->_internal_stgyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.RtnTrade.stgyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stgyid(), target);
  }

  // string prodID = 2;
  if (this->prodid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prodid().data(), static_cast<int>(this->_internal_prodid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.RtnTrade.prodID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prodid(), target);
  }

  // string instID = 3;
  if (this->instid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instid().data(), static_cast<int>(this->_internal_instid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.RtnTrade.instID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instid(), target);
  }

  // int32 tradedAmount = 4;
  if (this->tradedamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tradedamount(), target);
  }

  // double avgPrice = 5;
  if (!(this->avgprice() <= 0 && this->avgprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_avgprice(), target);
  }

  // .Orders.OrderType order_t = 6;
  if (this->order_t() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_order_t(), target);
  }

  // .Orders.OrderDirection real_d = 7;
  if (this->real_d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_real_d(), target);
  }

  // string exchId = 9;
  if (this->exchid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchid().data(), static_cast<int>(this->_internal_exchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.RtnTrade.exchId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_exchid(), target);
  }

  // int64 orderRef = 10;
  if (this->orderref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_orderref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orders.RtnTrade)
  return target;
}

size_t RtnTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orders.RtnTrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stgyID = 1;
  if (this->stgyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stgyid());
  }

  // string prodID = 2;
  if (this->prodid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prodid());
  }

  // string instID = 3;
  if (this->instid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instid());
  }

  // string exchId = 9;
  if (this->exchid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchid());
  }

  // double avgPrice = 5;
  if (!(this->avgprice() <= 0 && this->avgprice() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 tradedAmount = 4;
  if (this->tradedamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tradedamount());
  }

  // .Orders.OrderType order_t = 6;
  if (this->order_t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order_t());
  }

  // int64 orderRef = 10;
  if (this->orderref() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_orderref());
  }

  // .Orders.OrderDirection real_d = 7;
  if (this->real_d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_real_d());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtnTrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Orders.RtnTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const RtnTrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtnTrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Orders.RtnTrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Orders.RtnTrade)
    MergeFrom(*source);
  }
}

void RtnTrade::MergeFrom(const RtnTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orders.RtnTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stgyid().size() > 0) {
    _internal_set_stgyid(from._internal_stgyid());
  }
  if (from.prodid().size() > 0) {
    _internal_set_prodid(from._internal_prodid());
  }
  if (from.instid().size() > 0) {
    _internal_set_instid(from._internal_instid());
  }
  if (from.exchid().size() > 0) {
    _internal_set_exchid(from._internal_exchid());
  }
  if (!(from.avgprice() <= 0 && from.avgprice() >= 0)) {
    _internal_set_avgprice(from._internal_avgprice());
  }
  if (from.tradedamount() != 0) {
    _internal_set_tradedamount(from._internal_tradedamount());
  }
  if (from.order_t() != 0) {
    _internal_set_order_t(from._internal_order_t());
  }
  if (from.orderref() != 0) {
    _internal_set_orderref(from._internal_orderref());
  }
  if (from.real_d() != 0) {
    _internal_set_real_d(from._internal_real_d());
  }
}

void RtnTrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Orders.RtnTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtnTrade::CopyFrom(const RtnTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orders.RtnTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtnTrade::IsInitialized() const {
  return true;
}

void RtnTrade::InternalSwap(RtnTrade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stgyid_.Swap(&other->stgyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prodid_.Swap(&other->prodid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instid_.Swap(&other->instid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchid_.Swap(&other->exchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtnTrade, real_d_)
      + sizeof(RtnTrade::real_d_)
      - PROTOBUF_FIELD_OFFSET(RtnTrade, avgprice_)>(
          reinterpret_cast<char*>(&avgprice_),
          reinterpret_cast<char*>(&other->avgprice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtnTrade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RtnOrder::InitAsDefaultInstance() {
}
class RtnOrder::_Internal {
 public:
};

RtnOrder::RtnOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orders.RtnOrder)
}
RtnOrder::RtnOrder(const RtnOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stgyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stgyid().empty()) {
    stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stgyid(),
      GetArena());
  }
  prodid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prodid().empty()) {
    prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prodid(),
      GetArena());
  }
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instid().empty()) {
    instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instid(),
      GetArena());
  }
  exchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchid().empty()) {
    exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchid(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&real_d_) -
    reinterpret_cast<char*>(&status_)) + sizeof(real_d_));
  // @@protoc_insertion_point(copy_constructor:Orders.RtnOrder)
}

void RtnOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RtnOrder_order_2eproto.base);
  stgyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prodid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_d_) -
      reinterpret_cast<char*>(&status_)) + sizeof(real_d_));
}

RtnOrder::~RtnOrder() {
  // @@protoc_insertion_point(destructor:Orders.RtnOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RtnOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stgyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prodid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RtnOrder::ArenaDtor(void* object) {
  RtnOrder* _this = reinterpret_cast< RtnOrder* >(object);
  (void)_this;
}
void RtnOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtnOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtnOrder& RtnOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtnOrder_order_2eproto.base);
  return *internal_default_instance();
}


void RtnOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:Orders.RtnOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stgyid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prodid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_d_) -
      reinterpret_cast<char*>(&status_)) + sizeof(real_d_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtnOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stgyID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stgyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.RtnOrder.stgyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prodID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prodid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.RtnOrder.prodID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.RtnOrder.instID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orders.OrderStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::Orders::OrderStatus>(val));
        } else goto handle_unusual;
        continue;
      // .Orders.OrderDirection stgy_d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stgy_d(static_cast<::Orders::OrderDirection>(val));
        } else goto handle_unusual;
        continue;
      // .Orders.OrderDirection real_d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_real_d(static_cast<::Orders::OrderDirection>(val));
        } else goto handle_unusual;
        continue;
      // string exchId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_exchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Orders.RtnOrder.exchId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 orderRef = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          orderref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtnOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orders.RtnOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stgyID = 1;
  if (this->stgyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stgyid().data(), static_cast<int>(this->_internal_stgyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.RtnOrder.stgyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stgyid(), target);
  }

  // string prodID = 2;
  if (this->prodid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prodid().data(), static_cast<int>(this->_internal_prodid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.RtnOrder.prodID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prodid(), target);
  }

  // string instID = 3;
  if (this->instid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instid().data(), static_cast<int>(this->_internal_instid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.RtnOrder.instID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instid(), target);
  }

  // .Orders.OrderStatus status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // .Orders.OrderDirection stgy_d = 6;
  if (this->stgy_d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_stgy_d(), target);
  }

  // .Orders.OrderDirection real_d = 7;
  if (this->real_d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_real_d(), target);
  }

  // string exchId = 8;
  if (this->exchid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchid().data(), static_cast<int>(this->_internal_exchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orders.RtnOrder.exchId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_exchid(), target);
  }

  // int64 orderRef = 9;
  if (this->orderref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_orderref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orders.RtnOrder)
  return target;
}

size_t RtnOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orders.RtnOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stgyID = 1;
  if (this->stgyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stgyid());
  }

  // string prodID = 2;
  if (this->prodid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prodid());
  }

  // string instID = 3;
  if (this->instid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instid());
  }

  // string exchId = 8;
  if (this->exchid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchid());
  }

  // .Orders.OrderStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .Orders.OrderDirection stgy_d = 6;
  if (this->stgy_d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stgy_d());
  }

  // int64 orderRef = 9;
  if (this->orderref() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_orderref());
  }

  // .Orders.OrderDirection real_d = 7;
  if (this->real_d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_real_d());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtnOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Orders.RtnOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const RtnOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtnOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Orders.RtnOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Orders.RtnOrder)
    MergeFrom(*source);
  }
}

void RtnOrder::MergeFrom(const RtnOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orders.RtnOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stgyid().size() > 0) {
    _internal_set_stgyid(from._internal_stgyid());
  }
  if (from.prodid().size() > 0) {
    _internal_set_prodid(from._internal_prodid());
  }
  if (from.instid().size() > 0) {
    _internal_set_instid(from._internal_instid());
  }
  if (from.exchid().size() > 0) {
    _internal_set_exchid(from._internal_exchid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.stgy_d() != 0) {
    _internal_set_stgy_d(from._internal_stgy_d());
  }
  if (from.orderref() != 0) {
    _internal_set_orderref(from._internal_orderref());
  }
  if (from.real_d() != 0) {
    _internal_set_real_d(from._internal_real_d());
  }
}

void RtnOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Orders.RtnOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtnOrder::CopyFrom(const RtnOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orders.RtnOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtnOrder::IsInitialized() const {
  return true;
}

void RtnOrder::InternalSwap(RtnOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stgyid_.Swap(&other->stgyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prodid_.Swap(&other->prodid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instid_.Swap(&other->instid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchid_.Swap(&other->exchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtnOrder, real_d_)
      + sizeof(RtnOrder::real_d_)
      - PROTOBUF_FIELD_OFFSET(RtnOrder, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtnOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Orders
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Orders::SubmitOrder* Arena::CreateMaybeMessage< ::Orders::SubmitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orders::SubmitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::Orders::CancelOrder* Arena::CreateMaybeMessage< ::Orders::CancelOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orders::CancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::Orders::RtnTrade* Arena::CreateMaybeMessage< ::Orders::RtnTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orders::RtnTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::Orders::RtnOrder* Arena::CreateMaybeMessage< ::Orders::RtnOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orders::RtnOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

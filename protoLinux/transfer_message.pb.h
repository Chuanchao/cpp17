// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transfer_message.proto

#ifndef PROTOBUF_INCLUDED_transfer_5fmessage_2eproto
#define PROTOBUF_INCLUDED_transfer_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_transfer_5fmessage_2eproto 

namespace protobuf_transfer_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_transfer_5fmessage_2eproto
namespace transfer {
class ResponseEmptyMessage;
class ResponseEmptyMessageDefaultTypeInternal;
extern ResponseEmptyMessageDefaultTypeInternal _ResponseEmptyMessage_default_instance_;
class TransferMessage;
class TransferMessageDefaultTypeInternal;
extern TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
class infoString;
class infoStringDefaultTypeInternal;
extern infoStringDefaultTypeInternal _infoString_default_instance_;
}  // namespace transfer
namespace google {
namespace protobuf {
template<> ::transfer::ResponseEmptyMessage* Arena::CreateMaybeMessage<::transfer::ResponseEmptyMessage>(Arena*);
template<> ::transfer::TransferMessage* Arena::CreateMaybeMessage<::transfer::TransferMessage>(Arena*);
template<> ::transfer::infoString* Arena::CreateMaybeMessage<::transfer::infoString>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace transfer {

// ===================================================================

class ResponseEmptyMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transfer.ResponseEmptyMessage) */ {
 public:
  ResponseEmptyMessage();
  virtual ~ResponseEmptyMessage();

  ResponseEmptyMessage(const ResponseEmptyMessage& from);

  inline ResponseEmptyMessage& operator=(const ResponseEmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseEmptyMessage(ResponseEmptyMessage&& from) noexcept
    : ResponseEmptyMessage() {
    *this = ::std::move(from);
  }

  inline ResponseEmptyMessage& operator=(ResponseEmptyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseEmptyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseEmptyMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseEmptyMessage*>(
               &_ResponseEmptyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ResponseEmptyMessage* other);
  friend void swap(ResponseEmptyMessage& a, ResponseEmptyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseEmptyMessage* New() const final {
    return CreateMaybeMessage<ResponseEmptyMessage>(NULL);
  }

  ResponseEmptyMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseEmptyMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseEmptyMessage& from);
  void MergeFrom(const ResponseEmptyMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseEmptyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transfer.ResponseEmptyMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transfer_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transfer.TransferMessage) */ {
 public:
  TransferMessage();
  virtual ~TransferMessage();

  TransferMessage(const TransferMessage& from);

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferMessage(TransferMessage&& from) noexcept
    : TransferMessage() {
    *this = ::std::move(from);
  }

  inline TransferMessage& operator=(TransferMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferMessage* internal_default_instance() {
    return reinterpret_cast<const TransferMessage*>(
               &_TransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TransferMessage* other);
  friend void swap(TransferMessage& a, TransferMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferMessage* New() const final {
    return CreateMaybeMessage<TransferMessage>(NULL);
  }

  TransferMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferMessage& from);
  void MergeFrom(const TransferMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message_name = 1;
  void clear_message_name();
  static const int kMessageNameFieldNumber = 1;
  const ::std::string& message_name() const;
  void set_message_name(const ::std::string& value);
  #if LANG_CXX11
  void set_message_name(::std::string&& value);
  #endif
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  ::std::string* mutable_message_name();
  ::std::string* release_message_name();
  void set_allocated_message_name(::std::string* message_name);

  // bytes message_content = 2;
  void clear_message_content();
  static const int kMessageContentFieldNumber = 2;
  const ::std::string& message_content() const;
  void set_message_content(const ::std::string& value);
  #if LANG_CXX11
  void set_message_content(::std::string&& value);
  #endif
  void set_message_content(const char* value);
  void set_message_content(const void* value, size_t size);
  ::std::string* mutable_message_content();
  ::std::string* release_message_content();
  void set_allocated_message_content(::std::string* message_content);

  // @@protoc_insertion_point(class_scope:transfer.TransferMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_name_;
  ::google::protobuf::internal::ArenaStringPtr message_content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transfer_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class infoString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transfer.infoString) */ {
 public:
  infoString();
  virtual ~infoString();

  infoString(const infoString& from);

  inline infoString& operator=(const infoString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  infoString(infoString&& from) noexcept
    : infoString() {
    *this = ::std::move(from);
  }

  inline infoString& operator=(infoString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const infoString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const infoString* internal_default_instance() {
    return reinterpret_cast<const infoString*>(
               &_infoString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(infoString* other);
  friend void swap(infoString& a, infoString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline infoString* New() const final {
    return CreateMaybeMessage<infoString>(NULL);
  }

  infoString* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<infoString>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const infoString& from);
  void MergeFrom(const infoString& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(infoString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:transfer.infoString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transfer_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResponseEmptyMessage

// -------------------------------------------------------------------

// TransferMessage

// string message_name = 1;
inline void TransferMessage::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferMessage::message_name() const {
  // @@protoc_insertion_point(field_get:transfer.TransferMessage.message_name)
  return message_name_.GetNoArena();
}
inline void TransferMessage::set_message_name(const ::std::string& value) {
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transfer.TransferMessage.message_name)
}
#if LANG_CXX11
inline void TransferMessage::set_message_name(::std::string&& value) {
  
  message_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transfer.TransferMessage.message_name)
}
#endif
inline void TransferMessage::set_message_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transfer.TransferMessage.message_name)
}
inline void TransferMessage::set_message_name(const char* value, size_t size) {
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transfer.TransferMessage.message_name)
}
inline ::std::string* TransferMessage::mutable_message_name() {
  
  // @@protoc_insertion_point(field_mutable:transfer.TransferMessage.message_name)
  return message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferMessage::release_message_name() {
  // @@protoc_insertion_point(field_release:transfer.TransferMessage.message_name)
  
  return message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferMessage::set_allocated_message_name(::std::string* message_name) {
  if (message_name != NULL) {
    
  } else {
    
  }
  message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:transfer.TransferMessage.message_name)
}

// bytes message_content = 2;
inline void TransferMessage::clear_message_content() {
  message_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferMessage::message_content() const {
  // @@protoc_insertion_point(field_get:transfer.TransferMessage.message_content)
  return message_content_.GetNoArena();
}
inline void TransferMessage::set_message_content(const ::std::string& value) {
  
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transfer.TransferMessage.message_content)
}
#if LANG_CXX11
inline void TransferMessage::set_message_content(::std::string&& value) {
  
  message_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transfer.TransferMessage.message_content)
}
#endif
inline void TransferMessage::set_message_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transfer.TransferMessage.message_content)
}
inline void TransferMessage::set_message_content(const void* value, size_t size) {
  
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transfer.TransferMessage.message_content)
}
inline ::std::string* TransferMessage::mutable_message_content() {
  
  // @@protoc_insertion_point(field_mutable:transfer.TransferMessage.message_content)
  return message_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferMessage::release_message_content() {
  // @@protoc_insertion_point(field_release:transfer.TransferMessage.message_content)
  
  return message_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferMessage::set_allocated_message_content(::std::string* message_content) {
  if (message_content != NULL) {
    
  } else {
    
  }
  message_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_content);
  // @@protoc_insertion_point(field_set_allocated:transfer.TransferMessage.message_content)
}

// -------------------------------------------------------------------

// infoString

// string msg = 1;
inline void infoString::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& infoString::msg() const {
  // @@protoc_insertion_point(field_get:transfer.infoString.msg)
  return msg_.GetNoArena();
}
inline void infoString::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transfer.infoString.msg)
}
#if LANG_CXX11
inline void infoString::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transfer.infoString.msg)
}
#endif
inline void infoString::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transfer.infoString.msg)
}
inline void infoString::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transfer.infoString.msg)
}
inline ::std::string* infoString::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:transfer.infoString.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* infoString::release_msg() {
  // @@protoc_insertion_point(field_release:transfer.infoString.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void infoString::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:transfer.infoString.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transfer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_transfer_5fmessage_2eproto

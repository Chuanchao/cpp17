// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transfer_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transfer_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transfer_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transfer_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transfer_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transfer_5fmessage_2eproto;
namespace transfer {
class ResponseEmptyMessage;
class ResponseEmptyMessageDefaultTypeInternal;
extern ResponseEmptyMessageDefaultTypeInternal _ResponseEmptyMessage_default_instance_;
class TransferMessage;
class TransferMessageDefaultTypeInternal;
extern TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
class infoString;
class infoStringDefaultTypeInternal;
extern infoStringDefaultTypeInternal _infoString_default_instance_;
}  // namespace transfer
PROTOBUF_NAMESPACE_OPEN
template<> ::transfer::ResponseEmptyMessage* Arena::CreateMaybeMessage<::transfer::ResponseEmptyMessage>(Arena*);
template<> ::transfer::TransferMessage* Arena::CreateMaybeMessage<::transfer::TransferMessage>(Arena*);
template<> ::transfer::infoString* Arena::CreateMaybeMessage<::transfer::infoString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transfer {

// ===================================================================

class ResponseEmptyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transfer.ResponseEmptyMessage) */ {
 public:
  inline ResponseEmptyMessage() : ResponseEmptyMessage(nullptr) {};
  virtual ~ResponseEmptyMessage();

  ResponseEmptyMessage(const ResponseEmptyMessage& from);
  ResponseEmptyMessage(ResponseEmptyMessage&& from) noexcept
    : ResponseEmptyMessage() {
    *this = ::std::move(from);
  }

  inline ResponseEmptyMessage& operator=(const ResponseEmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseEmptyMessage& operator=(ResponseEmptyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseEmptyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseEmptyMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseEmptyMessage*>(
               &_ResponseEmptyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResponseEmptyMessage& a, ResponseEmptyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseEmptyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseEmptyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseEmptyMessage* New() const final {
    return CreateMaybeMessage<ResponseEmptyMessage>(nullptr);
  }

  ResponseEmptyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseEmptyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseEmptyMessage& from);
  void MergeFrom(const ResponseEmptyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseEmptyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfer.ResponseEmptyMessage";
  }
  protected:
  explicit ResponseEmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transfer_5fmessage_2eproto);
    return ::descriptor_table_transfer_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transfer.ResponseEmptyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transfer_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TransferMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transfer.TransferMessage) */ {
 public:
  inline TransferMessage() : TransferMessage(nullptr) {};
  virtual ~TransferMessage();

  TransferMessage(const TransferMessage& from);
  TransferMessage(TransferMessage&& from) noexcept
    : TransferMessage() {
    *this = ::std::move(from);
  }

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferMessage& operator=(TransferMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferMessage* internal_default_instance() {
    return reinterpret_cast<const TransferMessage*>(
               &_TransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransferMessage& a, TransferMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferMessage* New() const final {
    return CreateMaybeMessage<TransferMessage>(nullptr);
  }

  TransferMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferMessage& from);
  void MergeFrom(const TransferMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfer.TransferMessage";
  }
  protected:
  explicit TransferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transfer_5fmessage_2eproto);
    return ::descriptor_table_transfer_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageNameFieldNumber = 1,
    kMessageContentFieldNumber = 2,
  };
  // string message_name = 1;
  void clear_message_name();
  const std::string& message_name() const;
  void set_message_name(const std::string& value);
  void set_message_name(std::string&& value);
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  std::string* mutable_message_name();
  std::string* release_message_name();
  void set_allocated_message_name(std::string* message_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_name(
      std::string* message_name);
  private:
  const std::string& _internal_message_name() const;
  void _internal_set_message_name(const std::string& value);
  std::string* _internal_mutable_message_name();
  public:

  // bytes message_content = 2;
  void clear_message_content();
  const std::string& message_content() const;
  void set_message_content(const std::string& value);
  void set_message_content(std::string&& value);
  void set_message_content(const char* value);
  void set_message_content(const void* value, size_t size);
  std::string* mutable_message_content();
  std::string* release_message_content();
  void set_allocated_message_content(std::string* message_content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_content(
      std::string* message_content);
  private:
  const std::string& _internal_message_content() const;
  void _internal_set_message_content(const std::string& value);
  std::string* _internal_mutable_message_content();
  public:

  // @@protoc_insertion_point(class_scope:transfer.TransferMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transfer_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class infoString PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transfer.infoString) */ {
 public:
  inline infoString() : infoString(nullptr) {};
  virtual ~infoString();

  infoString(const infoString& from);
  infoString(infoString&& from) noexcept
    : infoString() {
    *this = ::std::move(from);
  }

  inline infoString& operator=(const infoString& from) {
    CopyFrom(from);
    return *this;
  }
  inline infoString& operator=(infoString&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const infoString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const infoString* internal_default_instance() {
    return reinterpret_cast<const infoString*>(
               &_infoString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(infoString& a, infoString& b) {
    a.Swap(&b);
  }
  inline void Swap(infoString* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(infoString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline infoString* New() const final {
    return CreateMaybeMessage<infoString>(nullptr);
  }

  infoString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<infoString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const infoString& from);
  void MergeFrom(const infoString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(infoString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfer.infoString";
  }
  protected:
  explicit infoString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transfer_5fmessage_2eproto);
    return ::descriptor_table_transfer_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:transfer.infoString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transfer_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResponseEmptyMessage

// -------------------------------------------------------------------

// TransferMessage

// string message_name = 1;
inline void TransferMessage::clear_message_name() {
  message_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransferMessage::message_name() const {
  // @@protoc_insertion_point(field_get:transfer.TransferMessage.message_name)
  return _internal_message_name();
}
inline void TransferMessage::set_message_name(const std::string& value) {
  _internal_set_message_name(value);
  // @@protoc_insertion_point(field_set:transfer.TransferMessage.message_name)
}
inline std::string* TransferMessage::mutable_message_name() {
  // @@protoc_insertion_point(field_mutable:transfer.TransferMessage.message_name)
  return _internal_mutable_message_name();
}
inline const std::string& TransferMessage::_internal_message_name() const {
  return message_name_.Get();
}
inline void TransferMessage::_internal_set_message_name(const std::string& value) {
  
  message_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransferMessage::set_message_name(std::string&& value) {
  
  message_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transfer.TransferMessage.message_name)
}
inline void TransferMessage::set_message_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transfer.TransferMessage.message_name)
}
inline void TransferMessage::set_message_name(const char* value,
    size_t size) {
  
  message_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transfer.TransferMessage.message_name)
}
inline std::string* TransferMessage::_internal_mutable_message_name() {
  
  return message_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransferMessage::release_message_name() {
  // @@protoc_insertion_point(field_release:transfer.TransferMessage.message_name)
  return message_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferMessage::set_allocated_message_name(std::string* message_name) {
  if (message_name != nullptr) {
    
  } else {
    
  }
  message_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transfer.TransferMessage.message_name)
}
inline std::string* TransferMessage::unsafe_arena_release_message_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transfer.TransferMessage.message_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransferMessage::unsafe_arena_set_allocated_message_name(
    std::string* message_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_name != nullptr) {
    
  } else {
    
  }
  message_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transfer.TransferMessage.message_name)
}

// bytes message_content = 2;
inline void TransferMessage::clear_message_content() {
  message_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransferMessage::message_content() const {
  // @@protoc_insertion_point(field_get:transfer.TransferMessage.message_content)
  return _internal_message_content();
}
inline void TransferMessage::set_message_content(const std::string& value) {
  _internal_set_message_content(value);
  // @@protoc_insertion_point(field_set:transfer.TransferMessage.message_content)
}
inline std::string* TransferMessage::mutable_message_content() {
  // @@protoc_insertion_point(field_mutable:transfer.TransferMessage.message_content)
  return _internal_mutable_message_content();
}
inline const std::string& TransferMessage::_internal_message_content() const {
  return message_content_.Get();
}
inline void TransferMessage::_internal_set_message_content(const std::string& value) {
  
  message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransferMessage::set_message_content(std::string&& value) {
  
  message_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transfer.TransferMessage.message_content)
}
inline void TransferMessage::set_message_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transfer.TransferMessage.message_content)
}
inline void TransferMessage::set_message_content(const void* value,
    size_t size) {
  
  message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transfer.TransferMessage.message_content)
}
inline std::string* TransferMessage::_internal_mutable_message_content() {
  
  return message_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransferMessage::release_message_content() {
  // @@protoc_insertion_point(field_release:transfer.TransferMessage.message_content)
  return message_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferMessage::set_allocated_message_content(std::string* message_content) {
  if (message_content != nullptr) {
    
  } else {
    
  }
  message_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transfer.TransferMessage.message_content)
}
inline std::string* TransferMessage::unsafe_arena_release_message_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transfer.TransferMessage.message_content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransferMessage::unsafe_arena_set_allocated_message_content(
    std::string* message_content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_content != nullptr) {
    
  } else {
    
  }
  message_content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transfer.TransferMessage.message_content)
}

// -------------------------------------------------------------------

// infoString

// string msg = 1;
inline void infoString::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& infoString::msg() const {
  // @@protoc_insertion_point(field_get:transfer.infoString.msg)
  return _internal_msg();
}
inline void infoString::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:transfer.infoString.msg)
}
inline std::string* infoString::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:transfer.infoString.msg)
  return _internal_mutable_msg();
}
inline const std::string& infoString::_internal_msg() const {
  return msg_.Get();
}
inline void infoString::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void infoString::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transfer.infoString.msg)
}
inline void infoString::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transfer.infoString.msg)
}
inline void infoString::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transfer.infoString.msg)
}
inline std::string* infoString::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* infoString::release_msg() {
  // @@protoc_insertion_point(field_release:transfer.infoString.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void infoString::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transfer.infoString.msg)
}
inline std::string* infoString::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transfer.infoString.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void infoString::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transfer.infoString.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transfer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transfer_5fmessage_2eproto

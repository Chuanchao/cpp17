// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef PROTOBUF_INCLUDED_order_2eproto
#define PROTOBUF_INCLUDED_order_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_order_2eproto 

namespace protobuf_order_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_order_2eproto
namespace ORDERS {
class CancelOrder;
class CancelOrderDefaultTypeInternal;
extern CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class RtnOrder;
class RtnOrderDefaultTypeInternal;
extern RtnOrderDefaultTypeInternal _RtnOrder_default_instance_;
class RtnTrade;
class RtnTradeDefaultTypeInternal;
extern RtnTradeDefaultTypeInternal _RtnTrade_default_instance_;
class SubmitOrder;
class SubmitOrderDefaultTypeInternal;
extern SubmitOrderDefaultTypeInternal _SubmitOrder_default_instance_;
}  // namespace ORDERS
namespace google {
namespace protobuf {
template<> ::ORDERS::CancelOrder* Arena::CreateMaybeMessage<::ORDERS::CancelOrder>(Arena*);
template<> ::ORDERS::RtnOrder* Arena::CreateMaybeMessage<::ORDERS::RtnOrder>(Arena*);
template<> ::ORDERS::RtnTrade* Arena::CreateMaybeMessage<::ORDERS::RtnTrade>(Arena*);
template<> ::ORDERS::SubmitOrder* Arena::CreateMaybeMessage<::ORDERS::SubmitOrder>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ORDERS {

enum OrderType {
  IOC_ORDER = 0,
  GFD_ORDER = 1,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OrderType_IsValid(int value);
const OrderType OrderType_MIN = IOC_ORDER;
const OrderType OrderType_MAX = GFD_ORDER;
const int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderType_descriptor();
inline const ::std::string& OrderType_Name(OrderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderType_descriptor(), value);
}
inline bool OrderType_Parse(
    const ::std::string& name, OrderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
enum OrderDirection {
  OPEN_LONG = 0,
  OPEN_SHORT = 1,
  CLOSE_LONG = 2,
  CLOSE_SHORT = 3,
  CLOSE_TODAY_LONG = 4,
  CLOSE_TODAY_SHORT = 5,
  UNKNOWN_TRADE = 6,
  ORDER_TASK_BUTT = 7,
  OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OrderDirection_IsValid(int value);
const OrderDirection OrderDirection_MIN = OPEN_LONG;
const OrderDirection OrderDirection_MAX = ORDER_TASK_BUTT;
const int OrderDirection_ARRAYSIZE = OrderDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderDirection_descriptor();
inline const ::std::string& OrderDirection_Name(OrderDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderDirection_descriptor(), value);
}
inline bool OrderDirection_Parse(
    const ::std::string& name, OrderDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderDirection>(
    OrderDirection_descriptor(), name, value);
}
enum OrderStatus {
  WORK_ORDER = 0,
  DONE_ORDER = 1,
  RISKCONTROL_REJECTED = 2,
  EXCHANGE_REJECTED = 3,
  NETWORK_ERROR = 4,
  OrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OrderStatus_IsValid(int value);
const OrderStatus OrderStatus_MIN = WORK_ORDER;
const OrderStatus OrderStatus_MAX = NETWORK_ERROR;
const int OrderStatus_ARRAYSIZE = OrderStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor();
inline const ::std::string& OrderStatus_Name(OrderStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderStatus_descriptor(), value);
}
inline bool OrderStatus_Parse(
    const ::std::string& name, OrderStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderStatus>(
    OrderStatus_descriptor(), name, value);
}
// ===================================================================

class SubmitOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ORDERS.SubmitOrder) */ {
 public:
  SubmitOrder();
  virtual ~SubmitOrder();

  SubmitOrder(const SubmitOrder& from);

  inline SubmitOrder& operator=(const SubmitOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmitOrder(SubmitOrder&& from) noexcept
    : SubmitOrder() {
    *this = ::std::move(from);
  }

  inline SubmitOrder& operator=(SubmitOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmitOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitOrder* internal_default_instance() {
    return reinterpret_cast<const SubmitOrder*>(
               &_SubmitOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SubmitOrder* other);
  friend void swap(SubmitOrder& a, SubmitOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmitOrder* New() const final {
    return CreateMaybeMessage<SubmitOrder>(NULL);
  }

  SubmitOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmitOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmitOrder& from);
  void MergeFrom(const SubmitOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stgyID = 1;
  void clear_stgyid();
  static const int kStgyIDFieldNumber = 1;
  const ::std::string& stgyid() const;
  void set_stgyid(const ::std::string& value);
  #if LANG_CXX11
  void set_stgyid(::std::string&& value);
  #endif
  void set_stgyid(const char* value);
  void set_stgyid(const char* value, size_t size);
  ::std::string* mutable_stgyid();
  ::std::string* release_stgyid();
  void set_allocated_stgyid(::std::string* stgyid);

  // string prodID = 2;
  void clear_prodid();
  static const int kProdIDFieldNumber = 2;
  const ::std::string& prodid() const;
  void set_prodid(const ::std::string& value);
  #if LANG_CXX11
  void set_prodid(::std::string&& value);
  #endif
  void set_prodid(const char* value);
  void set_prodid(const char* value, size_t size);
  ::std::string* mutable_prodid();
  ::std::string* release_prodid();
  void set_allocated_prodid(::std::string* prodid);

  // string instID = 3;
  void clear_instid();
  static const int kInstIDFieldNumber = 3;
  const ::std::string& instid() const;
  void set_instid(const ::std::string& value);
  #if LANG_CXX11
  void set_instid(::std::string&& value);
  #endif
  void set_instid(const char* value);
  void set_instid(const char* value, size_t size);
  ::std::string* mutable_instid();
  ::std::string* release_instid();
  void set_allocated_instid(::std::string* instid);

  // string exchId = 9;
  void clear_exchid();
  static const int kExchIdFieldNumber = 9;
  const ::std::string& exchid() const;
  void set_exchid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchid(::std::string&& value);
  #endif
  void set_exchid(const char* value);
  void set_exchid(const char* value, size_t size);
  ::std::string* mutable_exchid();
  ::std::string* release_exchid();
  void set_allocated_exchid(::std::string* exchid);

  // double price = 5;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  double price() const;
  void set_price(double value);

  // int32 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // .ORDERS.OrderType order_t = 6;
  void clear_order_t();
  static const int kOrderTFieldNumber = 6;
  ::ORDERS::OrderType order_t() const;
  void set_order_t(::ORDERS::OrderType value);

  // .ORDERS.OrderDirection stgy_d = 7;
  void clear_stgy_d();
  static const int kStgyDFieldNumber = 7;
  ::ORDERS::OrderDirection stgy_d() const;
  void set_stgy_d(::ORDERS::OrderDirection value);

  // .ORDERS.OrderDirection real_d = 8;
  void clear_real_d();
  static const int kRealDFieldNumber = 8;
  ::ORDERS::OrderDirection real_d() const;
  void set_real_d(::ORDERS::OrderDirection value);

  // int64 orderRef = 10;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 10;
  ::google::protobuf::int64 orderref() const;
  void set_orderref(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ORDERS.SubmitOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stgyid_;
  ::google::protobuf::internal::ArenaStringPtr prodid_;
  ::google::protobuf::internal::ArenaStringPtr instid_;
  ::google::protobuf::internal::ArenaStringPtr exchid_;
  double price_;
  ::google::protobuf::int32 amount_;
  int order_t_;
  int stgy_d_;
  int real_d_;
  ::google::protobuf::int64 orderref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_order_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ORDERS.CancelOrder) */ {
 public:
  CancelOrder();
  virtual ~CancelOrder();

  CancelOrder(const CancelOrder& from);

  inline CancelOrder& operator=(const CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelOrder(CancelOrder&& from) noexcept
    : CancelOrder() {
    *this = ::std::move(from);
  }

  inline CancelOrder& operator=(CancelOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOrder* internal_default_instance() {
    return reinterpret_cast<const CancelOrder*>(
               &_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CancelOrder* other);
  friend void swap(CancelOrder& a, CancelOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelOrder* New() const final {
    return CreateMaybeMessage<CancelOrder>(NULL);
  }

  CancelOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelOrder& from);
  void MergeFrom(const CancelOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stgyID = 1;
  void clear_stgyid();
  static const int kStgyIDFieldNumber = 1;
  const ::std::string& stgyid() const;
  void set_stgyid(const ::std::string& value);
  #if LANG_CXX11
  void set_stgyid(::std::string&& value);
  #endif
  void set_stgyid(const char* value);
  void set_stgyid(const char* value, size_t size);
  ::std::string* mutable_stgyid();
  ::std::string* release_stgyid();
  void set_allocated_stgyid(::std::string* stgyid);

  // string instID = 2;
  void clear_instid();
  static const int kInstIDFieldNumber = 2;
  const ::std::string& instid() const;
  void set_instid(const ::std::string& value);
  #if LANG_CXX11
  void set_instid(::std::string&& value);
  #endif
  void set_instid(const char* value);
  void set_instid(const char* value, size_t size);
  ::std::string* mutable_instid();
  ::std::string* release_instid();
  void set_allocated_instid(::std::string* instid);

  // int64 orderRef = 3;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 3;
  ::google::protobuf::int64 orderref() const;
  void set_orderref(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ORDERS.CancelOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stgyid_;
  ::google::protobuf::internal::ArenaStringPtr instid_;
  ::google::protobuf::int64 orderref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_order_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtnTrade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ORDERS.RtnTrade) */ {
 public:
  RtnTrade();
  virtual ~RtnTrade();

  RtnTrade(const RtnTrade& from);

  inline RtnTrade& operator=(const RtnTrade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtnTrade(RtnTrade&& from) noexcept
    : RtnTrade() {
    *this = ::std::move(from);
  }

  inline RtnTrade& operator=(RtnTrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtnTrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtnTrade* internal_default_instance() {
    return reinterpret_cast<const RtnTrade*>(
               &_RtnTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RtnTrade* other);
  friend void swap(RtnTrade& a, RtnTrade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtnTrade* New() const final {
    return CreateMaybeMessage<RtnTrade>(NULL);
  }

  RtnTrade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtnTrade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RtnTrade& from);
  void MergeFrom(const RtnTrade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtnTrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stgyID = 1;
  void clear_stgyid();
  static const int kStgyIDFieldNumber = 1;
  const ::std::string& stgyid() const;
  void set_stgyid(const ::std::string& value);
  #if LANG_CXX11
  void set_stgyid(::std::string&& value);
  #endif
  void set_stgyid(const char* value);
  void set_stgyid(const char* value, size_t size);
  ::std::string* mutable_stgyid();
  ::std::string* release_stgyid();
  void set_allocated_stgyid(::std::string* stgyid);

  // string prodID = 2;
  void clear_prodid();
  static const int kProdIDFieldNumber = 2;
  const ::std::string& prodid() const;
  void set_prodid(const ::std::string& value);
  #if LANG_CXX11
  void set_prodid(::std::string&& value);
  #endif
  void set_prodid(const char* value);
  void set_prodid(const char* value, size_t size);
  ::std::string* mutable_prodid();
  ::std::string* release_prodid();
  void set_allocated_prodid(::std::string* prodid);

  // string instID = 3;
  void clear_instid();
  static const int kInstIDFieldNumber = 3;
  const ::std::string& instid() const;
  void set_instid(const ::std::string& value);
  #if LANG_CXX11
  void set_instid(::std::string&& value);
  #endif
  void set_instid(const char* value);
  void set_instid(const char* value, size_t size);
  ::std::string* mutable_instid();
  ::std::string* release_instid();
  void set_allocated_instid(::std::string* instid);

  // string exchId = 9;
  void clear_exchid();
  static const int kExchIdFieldNumber = 9;
  const ::std::string& exchid() const;
  void set_exchid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchid(::std::string&& value);
  #endif
  void set_exchid(const char* value);
  void set_exchid(const char* value, size_t size);
  ::std::string* mutable_exchid();
  ::std::string* release_exchid();
  void set_allocated_exchid(::std::string* exchid);

  // double avgPrice = 5;
  void clear_avgprice();
  static const int kAvgPriceFieldNumber = 5;
  double avgprice() const;
  void set_avgprice(double value);

  // int32 tradedAmount = 4;
  void clear_tradedamount();
  static const int kTradedAmountFieldNumber = 4;
  ::google::protobuf::int32 tradedamount() const;
  void set_tradedamount(::google::protobuf::int32 value);

  // .ORDERS.OrderType order_t = 6;
  void clear_order_t();
  static const int kOrderTFieldNumber = 6;
  ::ORDERS::OrderType order_t() const;
  void set_order_t(::ORDERS::OrderType value);

  // int64 orderRef = 10;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 10;
  ::google::protobuf::int64 orderref() const;
  void set_orderref(::google::protobuf::int64 value);

  // .ORDERS.OrderDirection real_d = 7;
  void clear_real_d();
  static const int kRealDFieldNumber = 7;
  ::ORDERS::OrderDirection real_d() const;
  void set_real_d(::ORDERS::OrderDirection value);

  // @@protoc_insertion_point(class_scope:ORDERS.RtnTrade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stgyid_;
  ::google::protobuf::internal::ArenaStringPtr prodid_;
  ::google::protobuf::internal::ArenaStringPtr instid_;
  ::google::protobuf::internal::ArenaStringPtr exchid_;
  double avgprice_;
  ::google::protobuf::int32 tradedamount_;
  int order_t_;
  ::google::protobuf::int64 orderref_;
  int real_d_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_order_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtnOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ORDERS.RtnOrder) */ {
 public:
  RtnOrder();
  virtual ~RtnOrder();

  RtnOrder(const RtnOrder& from);

  inline RtnOrder& operator=(const RtnOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtnOrder(RtnOrder&& from) noexcept
    : RtnOrder() {
    *this = ::std::move(from);
  }

  inline RtnOrder& operator=(RtnOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtnOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtnOrder* internal_default_instance() {
    return reinterpret_cast<const RtnOrder*>(
               &_RtnOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RtnOrder* other);
  friend void swap(RtnOrder& a, RtnOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtnOrder* New() const final {
    return CreateMaybeMessage<RtnOrder>(NULL);
  }

  RtnOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtnOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RtnOrder& from);
  void MergeFrom(const RtnOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtnOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stgyID = 1;
  void clear_stgyid();
  static const int kStgyIDFieldNumber = 1;
  const ::std::string& stgyid() const;
  void set_stgyid(const ::std::string& value);
  #if LANG_CXX11
  void set_stgyid(::std::string&& value);
  #endif
  void set_stgyid(const char* value);
  void set_stgyid(const char* value, size_t size);
  ::std::string* mutable_stgyid();
  ::std::string* release_stgyid();
  void set_allocated_stgyid(::std::string* stgyid);

  // string prodID = 2;
  void clear_prodid();
  static const int kProdIDFieldNumber = 2;
  const ::std::string& prodid() const;
  void set_prodid(const ::std::string& value);
  #if LANG_CXX11
  void set_prodid(::std::string&& value);
  #endif
  void set_prodid(const char* value);
  void set_prodid(const char* value, size_t size);
  ::std::string* mutable_prodid();
  ::std::string* release_prodid();
  void set_allocated_prodid(::std::string* prodid);

  // string instID = 3;
  void clear_instid();
  static const int kInstIDFieldNumber = 3;
  const ::std::string& instid() const;
  void set_instid(const ::std::string& value);
  #if LANG_CXX11
  void set_instid(::std::string&& value);
  #endif
  void set_instid(const char* value);
  void set_instid(const char* value, size_t size);
  ::std::string* mutable_instid();
  ::std::string* release_instid();
  void set_allocated_instid(::std::string* instid);

  // string exchId = 8;
  void clear_exchid();
  static const int kExchIdFieldNumber = 8;
  const ::std::string& exchid() const;
  void set_exchid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchid(::std::string&& value);
  #endif
  void set_exchid(const char* value);
  void set_exchid(const char* value, size_t size);
  ::std::string* mutable_exchid();
  ::std::string* release_exchid();
  void set_allocated_exchid(::std::string* exchid);

  // .ORDERS.OrderStatus status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::ORDERS::OrderStatus status() const;
  void set_status(::ORDERS::OrderStatus value);

  // .ORDERS.OrderDirection stgy_d = 6;
  void clear_stgy_d();
  static const int kStgyDFieldNumber = 6;
  ::ORDERS::OrderDirection stgy_d() const;
  void set_stgy_d(::ORDERS::OrderDirection value);

  // int64 orderRef = 9;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 9;
  ::google::protobuf::int64 orderref() const;
  void set_orderref(::google::protobuf::int64 value);

  // .ORDERS.OrderDirection real_d = 7;
  void clear_real_d();
  static const int kRealDFieldNumber = 7;
  ::ORDERS::OrderDirection real_d() const;
  void set_real_d(::ORDERS::OrderDirection value);

  // @@protoc_insertion_point(class_scope:ORDERS.RtnOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stgyid_;
  ::google::protobuf::internal::ArenaStringPtr prodid_;
  ::google::protobuf::internal::ArenaStringPtr instid_;
  ::google::protobuf::internal::ArenaStringPtr exchid_;
  int status_;
  int stgy_d_;
  ::google::protobuf::int64 orderref_;
  int real_d_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_order_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmitOrder

// string stgyID = 1;
inline void SubmitOrder::clear_stgyid() {
  stgyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.stgyID)
  return stgyid_.GetNoArena();
}
inline void SubmitOrder::set_stgyid(const ::std::string& value) {
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.stgyID)
}
#if LANG_CXX11
inline void SubmitOrder::set_stgyid(::std::string&& value) {
  
  stgyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.SubmitOrder.stgyID)
}
#endif
inline void SubmitOrder::set_stgyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.SubmitOrder.stgyID)
}
inline void SubmitOrder::set_stgyid(const char* value, size_t size) {
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.SubmitOrder.stgyID)
}
inline ::std::string* SubmitOrder::mutable_stgyid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.SubmitOrder.stgyID)
  return stgyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:ORDERS.SubmitOrder.stgyID)
  
  return stgyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitOrder::set_allocated_stgyid(::std::string* stgyid) {
  if (stgyid != NULL) {
    
  } else {
    
  }
  stgyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stgyid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.SubmitOrder.stgyID)
}

// string prodID = 2;
inline void SubmitOrder::clear_prodid() {
  prodid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitOrder::prodid() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.prodID)
  return prodid_.GetNoArena();
}
inline void SubmitOrder::set_prodid(const ::std::string& value) {
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.prodID)
}
#if LANG_CXX11
inline void SubmitOrder::set_prodid(::std::string&& value) {
  
  prodid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.SubmitOrder.prodID)
}
#endif
inline void SubmitOrder::set_prodid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.SubmitOrder.prodID)
}
inline void SubmitOrder::set_prodid(const char* value, size_t size) {
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.SubmitOrder.prodID)
}
inline ::std::string* SubmitOrder::mutable_prodid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.SubmitOrder.prodID)
  return prodid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitOrder::release_prodid() {
  // @@protoc_insertion_point(field_release:ORDERS.SubmitOrder.prodID)
  
  return prodid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitOrder::set_allocated_prodid(::std::string* prodid) {
  if (prodid != NULL) {
    
  } else {
    
  }
  prodid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prodid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.SubmitOrder.prodID)
}

// string instID = 3;
inline void SubmitOrder::clear_instid() {
  instid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitOrder::instid() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.instID)
  return instid_.GetNoArena();
}
inline void SubmitOrder::set_instid(const ::std::string& value) {
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.instID)
}
#if LANG_CXX11
inline void SubmitOrder::set_instid(::std::string&& value) {
  
  instid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.SubmitOrder.instID)
}
#endif
inline void SubmitOrder::set_instid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.SubmitOrder.instID)
}
inline void SubmitOrder::set_instid(const char* value, size_t size) {
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.SubmitOrder.instID)
}
inline ::std::string* SubmitOrder::mutable_instid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.SubmitOrder.instID)
  return instid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitOrder::release_instid() {
  // @@protoc_insertion_point(field_release:ORDERS.SubmitOrder.instID)
  
  return instid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitOrder::set_allocated_instid(::std::string* instid) {
  if (instid != NULL) {
    
  } else {
    
  }
  instid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.SubmitOrder.instID)
}

// int32 amount = 4;
inline void SubmitOrder::clear_amount() {
  amount_ = 0;
}
inline ::google::protobuf::int32 SubmitOrder::amount() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.amount)
  return amount_;
}
inline void SubmitOrder::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.amount)
}

// double price = 5;
inline void SubmitOrder::clear_price() {
  price_ = 0;
}
inline double SubmitOrder::price() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.price)
  return price_;
}
inline void SubmitOrder::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.price)
}

// .ORDERS.OrderType order_t = 6;
inline void SubmitOrder::clear_order_t() {
  order_t_ = 0;
}
inline ::ORDERS::OrderType SubmitOrder::order_t() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.order_t)
  return static_cast< ::ORDERS::OrderType >(order_t_);
}
inline void SubmitOrder::set_order_t(::ORDERS::OrderType value) {
  
  order_t_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.order_t)
}

// .ORDERS.OrderDirection stgy_d = 7;
inline void SubmitOrder::clear_stgy_d() {
  stgy_d_ = 0;
}
inline ::ORDERS::OrderDirection SubmitOrder::stgy_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.stgy_d)
  return static_cast< ::ORDERS::OrderDirection >(stgy_d_);
}
inline void SubmitOrder::set_stgy_d(::ORDERS::OrderDirection value) {
  
  stgy_d_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.stgy_d)
}

// .ORDERS.OrderDirection real_d = 8;
inline void SubmitOrder::clear_real_d() {
  real_d_ = 0;
}
inline ::ORDERS::OrderDirection SubmitOrder::real_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.real_d)
  return static_cast< ::ORDERS::OrderDirection >(real_d_);
}
inline void SubmitOrder::set_real_d(::ORDERS::OrderDirection value) {
  
  real_d_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.real_d)
}

// string exchId = 9;
inline void SubmitOrder::clear_exchid() {
  exchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitOrder::exchid() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.exchId)
  return exchid_.GetNoArena();
}
inline void SubmitOrder::set_exchid(const ::std::string& value) {
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.exchId)
}
#if LANG_CXX11
inline void SubmitOrder::set_exchid(::std::string&& value) {
  
  exchid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.SubmitOrder.exchId)
}
#endif
inline void SubmitOrder::set_exchid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.SubmitOrder.exchId)
}
inline void SubmitOrder::set_exchid(const char* value, size_t size) {
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.SubmitOrder.exchId)
}
inline ::std::string* SubmitOrder::mutable_exchid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.SubmitOrder.exchId)
  return exchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitOrder::release_exchid() {
  // @@protoc_insertion_point(field_release:ORDERS.SubmitOrder.exchId)
  
  return exchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitOrder::set_allocated_exchid(::std::string* exchid) {
  if (exchid != NULL) {
    
  } else {
    
  }
  exchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.SubmitOrder.exchId)
}

// int64 orderRef = 10;
inline void SubmitOrder::clear_orderref() {
  orderref_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SubmitOrder::orderref() const {
  // @@protoc_insertion_point(field_get:ORDERS.SubmitOrder.orderRef)
  return orderref_;
}
inline void SubmitOrder::set_orderref(::google::protobuf::int64 value) {
  
  orderref_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.SubmitOrder.orderRef)
}

// -------------------------------------------------------------------

// CancelOrder

// string stgyID = 1;
inline void CancelOrder::clear_stgyid() {
  stgyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:ORDERS.CancelOrder.stgyID)
  return stgyid_.GetNoArena();
}
inline void CancelOrder::set_stgyid(const ::std::string& value) {
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.CancelOrder.stgyID)
}
#if LANG_CXX11
inline void CancelOrder::set_stgyid(::std::string&& value) {
  
  stgyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.CancelOrder.stgyID)
}
#endif
inline void CancelOrder::set_stgyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.CancelOrder.stgyID)
}
inline void CancelOrder::set_stgyid(const char* value, size_t size) {
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.CancelOrder.stgyID)
}
inline ::std::string* CancelOrder::mutable_stgyid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.CancelOrder.stgyID)
  return stgyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:ORDERS.CancelOrder.stgyID)
  
  return stgyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrder::set_allocated_stgyid(::std::string* stgyid) {
  if (stgyid != NULL) {
    
  } else {
    
  }
  stgyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stgyid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.CancelOrder.stgyID)
}

// string instID = 2;
inline void CancelOrder::clear_instid() {
  instid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrder::instid() const {
  // @@protoc_insertion_point(field_get:ORDERS.CancelOrder.instID)
  return instid_.GetNoArena();
}
inline void CancelOrder::set_instid(const ::std::string& value) {
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.CancelOrder.instID)
}
#if LANG_CXX11
inline void CancelOrder::set_instid(::std::string&& value) {
  
  instid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.CancelOrder.instID)
}
#endif
inline void CancelOrder::set_instid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.CancelOrder.instID)
}
inline void CancelOrder::set_instid(const char* value, size_t size) {
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.CancelOrder.instID)
}
inline ::std::string* CancelOrder::mutable_instid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.CancelOrder.instID)
  return instid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrder::release_instid() {
  // @@protoc_insertion_point(field_release:ORDERS.CancelOrder.instID)
  
  return instid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrder::set_allocated_instid(::std::string* instid) {
  if (instid != NULL) {
    
  } else {
    
  }
  instid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.CancelOrder.instID)
}

// int64 orderRef = 3;
inline void CancelOrder::clear_orderref() {
  orderref_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CancelOrder::orderref() const {
  // @@protoc_insertion_point(field_get:ORDERS.CancelOrder.orderRef)
  return orderref_;
}
inline void CancelOrder::set_orderref(::google::protobuf::int64 value) {
  
  orderref_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.CancelOrder.orderRef)
}

// -------------------------------------------------------------------

// RtnTrade

// string stgyID = 1;
inline void RtnTrade::clear_stgyid() {
  stgyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RtnTrade::stgyid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.stgyID)
  return stgyid_.GetNoArena();
}
inline void RtnTrade::set_stgyid(const ::std::string& value) {
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.stgyID)
}
#if LANG_CXX11
inline void RtnTrade::set_stgyid(::std::string&& value) {
  
  stgyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.RtnTrade.stgyID)
}
#endif
inline void RtnTrade::set_stgyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.RtnTrade.stgyID)
}
inline void RtnTrade::set_stgyid(const char* value, size_t size) {
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.RtnTrade.stgyID)
}
inline ::std::string* RtnTrade::mutable_stgyid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnTrade.stgyID)
  return stgyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtnTrade::release_stgyid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnTrade.stgyID)
  
  return stgyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtnTrade::set_allocated_stgyid(::std::string* stgyid) {
  if (stgyid != NULL) {
    
  } else {
    
  }
  stgyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stgyid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnTrade.stgyID)
}

// string prodID = 2;
inline void RtnTrade::clear_prodid() {
  prodid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RtnTrade::prodid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.prodID)
  return prodid_.GetNoArena();
}
inline void RtnTrade::set_prodid(const ::std::string& value) {
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.prodID)
}
#if LANG_CXX11
inline void RtnTrade::set_prodid(::std::string&& value) {
  
  prodid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.RtnTrade.prodID)
}
#endif
inline void RtnTrade::set_prodid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.RtnTrade.prodID)
}
inline void RtnTrade::set_prodid(const char* value, size_t size) {
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.RtnTrade.prodID)
}
inline ::std::string* RtnTrade::mutable_prodid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnTrade.prodID)
  return prodid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtnTrade::release_prodid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnTrade.prodID)
  
  return prodid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtnTrade::set_allocated_prodid(::std::string* prodid) {
  if (prodid != NULL) {
    
  } else {
    
  }
  prodid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prodid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnTrade.prodID)
}

// string instID = 3;
inline void RtnTrade::clear_instid() {
  instid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RtnTrade::instid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.instID)
  return instid_.GetNoArena();
}
inline void RtnTrade::set_instid(const ::std::string& value) {
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.instID)
}
#if LANG_CXX11
inline void RtnTrade::set_instid(::std::string&& value) {
  
  instid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.RtnTrade.instID)
}
#endif
inline void RtnTrade::set_instid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.RtnTrade.instID)
}
inline void RtnTrade::set_instid(const char* value, size_t size) {
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.RtnTrade.instID)
}
inline ::std::string* RtnTrade::mutable_instid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnTrade.instID)
  return instid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtnTrade::release_instid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnTrade.instID)
  
  return instid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtnTrade::set_allocated_instid(::std::string* instid) {
  if (instid != NULL) {
    
  } else {
    
  }
  instid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnTrade.instID)
}

// int32 tradedAmount = 4;
inline void RtnTrade::clear_tradedamount() {
  tradedamount_ = 0;
}
inline ::google::protobuf::int32 RtnTrade::tradedamount() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.tradedAmount)
  return tradedamount_;
}
inline void RtnTrade::set_tradedamount(::google::protobuf::int32 value) {
  
  tradedamount_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.tradedAmount)
}

// double avgPrice = 5;
inline void RtnTrade::clear_avgprice() {
  avgprice_ = 0;
}
inline double RtnTrade::avgprice() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.avgPrice)
  return avgprice_;
}
inline void RtnTrade::set_avgprice(double value) {
  
  avgprice_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.avgPrice)
}

// .ORDERS.OrderType order_t = 6;
inline void RtnTrade::clear_order_t() {
  order_t_ = 0;
}
inline ::ORDERS::OrderType RtnTrade::order_t() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.order_t)
  return static_cast< ::ORDERS::OrderType >(order_t_);
}
inline void RtnTrade::set_order_t(::ORDERS::OrderType value) {
  
  order_t_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.order_t)
}

// .ORDERS.OrderDirection real_d = 7;
inline void RtnTrade::clear_real_d() {
  real_d_ = 0;
}
inline ::ORDERS::OrderDirection RtnTrade::real_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.real_d)
  return static_cast< ::ORDERS::OrderDirection >(real_d_);
}
inline void RtnTrade::set_real_d(::ORDERS::OrderDirection value) {
  
  real_d_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.real_d)
}

// string exchId = 9;
inline void RtnTrade::clear_exchid() {
  exchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RtnTrade::exchid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.exchId)
  return exchid_.GetNoArena();
}
inline void RtnTrade::set_exchid(const ::std::string& value) {
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.exchId)
}
#if LANG_CXX11
inline void RtnTrade::set_exchid(::std::string&& value) {
  
  exchid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.RtnTrade.exchId)
}
#endif
inline void RtnTrade::set_exchid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.RtnTrade.exchId)
}
inline void RtnTrade::set_exchid(const char* value, size_t size) {
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.RtnTrade.exchId)
}
inline ::std::string* RtnTrade::mutable_exchid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnTrade.exchId)
  return exchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtnTrade::release_exchid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnTrade.exchId)
  
  return exchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtnTrade::set_allocated_exchid(::std::string* exchid) {
  if (exchid != NULL) {
    
  } else {
    
  }
  exchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnTrade.exchId)
}

// int64 orderRef = 10;
inline void RtnTrade::clear_orderref() {
  orderref_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RtnTrade::orderref() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnTrade.orderRef)
  return orderref_;
}
inline void RtnTrade::set_orderref(::google::protobuf::int64 value) {
  
  orderref_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnTrade.orderRef)
}

// -------------------------------------------------------------------

// RtnOrder

// string stgyID = 1;
inline void RtnOrder::clear_stgyid() {
  stgyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RtnOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.stgyID)
  return stgyid_.GetNoArena();
}
inline void RtnOrder::set_stgyid(const ::std::string& value) {
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.stgyID)
}
#if LANG_CXX11
inline void RtnOrder::set_stgyid(::std::string&& value) {
  
  stgyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.RtnOrder.stgyID)
}
#endif
inline void RtnOrder::set_stgyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.RtnOrder.stgyID)
}
inline void RtnOrder::set_stgyid(const char* value, size_t size) {
  
  stgyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.RtnOrder.stgyID)
}
inline ::std::string* RtnOrder::mutable_stgyid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnOrder.stgyID)
  return stgyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtnOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnOrder.stgyID)
  
  return stgyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtnOrder::set_allocated_stgyid(::std::string* stgyid) {
  if (stgyid != NULL) {
    
  } else {
    
  }
  stgyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stgyid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnOrder.stgyID)
}

// string prodID = 2;
inline void RtnOrder::clear_prodid() {
  prodid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RtnOrder::prodid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.prodID)
  return prodid_.GetNoArena();
}
inline void RtnOrder::set_prodid(const ::std::string& value) {
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.prodID)
}
#if LANG_CXX11
inline void RtnOrder::set_prodid(::std::string&& value) {
  
  prodid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.RtnOrder.prodID)
}
#endif
inline void RtnOrder::set_prodid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.RtnOrder.prodID)
}
inline void RtnOrder::set_prodid(const char* value, size_t size) {
  
  prodid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.RtnOrder.prodID)
}
inline ::std::string* RtnOrder::mutable_prodid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnOrder.prodID)
  return prodid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtnOrder::release_prodid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnOrder.prodID)
  
  return prodid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtnOrder::set_allocated_prodid(::std::string* prodid) {
  if (prodid != NULL) {
    
  } else {
    
  }
  prodid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prodid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnOrder.prodID)
}

// string instID = 3;
inline void RtnOrder::clear_instid() {
  instid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RtnOrder::instid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.instID)
  return instid_.GetNoArena();
}
inline void RtnOrder::set_instid(const ::std::string& value) {
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.instID)
}
#if LANG_CXX11
inline void RtnOrder::set_instid(::std::string&& value) {
  
  instid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.RtnOrder.instID)
}
#endif
inline void RtnOrder::set_instid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.RtnOrder.instID)
}
inline void RtnOrder::set_instid(const char* value, size_t size) {
  
  instid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.RtnOrder.instID)
}
inline ::std::string* RtnOrder::mutable_instid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnOrder.instID)
  return instid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtnOrder::release_instid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnOrder.instID)
  
  return instid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtnOrder::set_allocated_instid(::std::string* instid) {
  if (instid != NULL) {
    
  } else {
    
  }
  instid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnOrder.instID)
}

// .ORDERS.OrderStatus status = 5;
inline void RtnOrder::clear_status() {
  status_ = 0;
}
inline ::ORDERS::OrderStatus RtnOrder::status() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.status)
  return static_cast< ::ORDERS::OrderStatus >(status_);
}
inline void RtnOrder::set_status(::ORDERS::OrderStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.status)
}

// .ORDERS.OrderDirection stgy_d = 6;
inline void RtnOrder::clear_stgy_d() {
  stgy_d_ = 0;
}
inline ::ORDERS::OrderDirection RtnOrder::stgy_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.stgy_d)
  return static_cast< ::ORDERS::OrderDirection >(stgy_d_);
}
inline void RtnOrder::set_stgy_d(::ORDERS::OrderDirection value) {
  
  stgy_d_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.stgy_d)
}

// .ORDERS.OrderDirection real_d = 7;
inline void RtnOrder::clear_real_d() {
  real_d_ = 0;
}
inline ::ORDERS::OrderDirection RtnOrder::real_d() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.real_d)
  return static_cast< ::ORDERS::OrderDirection >(real_d_);
}
inline void RtnOrder::set_real_d(::ORDERS::OrderDirection value) {
  
  real_d_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.real_d)
}

// string exchId = 8;
inline void RtnOrder::clear_exchid() {
  exchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RtnOrder::exchid() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.exchId)
  return exchid_.GetNoArena();
}
inline void RtnOrder::set_exchid(const ::std::string& value) {
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.exchId)
}
#if LANG_CXX11
inline void RtnOrder::set_exchid(::std::string&& value) {
  
  exchid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ORDERS.RtnOrder.exchId)
}
#endif
inline void RtnOrder::set_exchid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ORDERS.RtnOrder.exchId)
}
inline void RtnOrder::set_exchid(const char* value, size_t size) {
  
  exchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ORDERS.RtnOrder.exchId)
}
inline ::std::string* RtnOrder::mutable_exchid() {
  
  // @@protoc_insertion_point(field_mutable:ORDERS.RtnOrder.exchId)
  return exchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtnOrder::release_exchid() {
  // @@protoc_insertion_point(field_release:ORDERS.RtnOrder.exchId)
  
  return exchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtnOrder::set_allocated_exchid(::std::string* exchid) {
  if (exchid != NULL) {
    
  } else {
    
  }
  exchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchid);
  // @@protoc_insertion_point(field_set_allocated:ORDERS.RtnOrder.exchId)
}

// int64 orderRef = 9;
inline void RtnOrder::clear_orderref() {
  orderref_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RtnOrder::orderref() const {
  // @@protoc_insertion_point(field_get:ORDERS.RtnOrder.orderRef)
  return orderref_;
}
inline void RtnOrder::set_orderref(::google::protobuf::int64 value) {
  
  orderref_ = value;
  // @@protoc_insertion_point(field_set:ORDERS.RtnOrder.orderRef)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ORDERS

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ORDERS::OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ORDERS::OrderType>() {
  return ::ORDERS::OrderType_descriptor();
}
template <> struct is_proto_enum< ::ORDERS::OrderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ORDERS::OrderDirection>() {
  return ::ORDERS::OrderDirection_descriptor();
}
template <> struct is_proto_enum< ::ORDERS::OrderStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ORDERS::OrderStatus>() {
  return ::ORDERS::OrderStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_order_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_2eproto;
namespace Orders {
class CancelOrder;
class CancelOrderDefaultTypeInternal;
extern CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class RtnOrder;
class RtnOrderDefaultTypeInternal;
extern RtnOrderDefaultTypeInternal _RtnOrder_default_instance_;
class RtnTrade;
class RtnTradeDefaultTypeInternal;
extern RtnTradeDefaultTypeInternal _RtnTrade_default_instance_;
class SubmitOrder;
class SubmitOrderDefaultTypeInternal;
extern SubmitOrderDefaultTypeInternal _SubmitOrder_default_instance_;
}  // namespace Orders
PROTOBUF_NAMESPACE_OPEN
template<> ::Orders::CancelOrder* Arena::CreateMaybeMessage<::Orders::CancelOrder>(Arena*);
template<> ::Orders::RtnOrder* Arena::CreateMaybeMessage<::Orders::RtnOrder>(Arena*);
template<> ::Orders::RtnTrade* Arena::CreateMaybeMessage<::Orders::RtnTrade>(Arena*);
template<> ::Orders::SubmitOrder* Arena::CreateMaybeMessage<::Orders::SubmitOrder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Orders {

enum OrderType : int {
  IOC_ORDER = 0,
  GFD_ORDER = 1,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderType_IsValid(int value);
constexpr OrderType OrderType_MIN = IOC_ORDER;
constexpr OrderType OrderType_MAX = GFD_ORDER;
constexpr int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor();
template<typename T>
inline const std::string& OrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderType_descriptor(), enum_t_value);
}
inline bool OrderType_Parse(
    const std::string& name, OrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
enum OrderDirection : int {
  OPEN_LONG = 0,
  OPEN_SHORT = 1,
  CLOSE_LONG = 2,
  CLOSE_SHORT = 3,
  CLOSE_TODAY_LONG = 4,
  CLOSE_TODAY_SHORT = 5,
  UNKNOWN_TRADE = 6,
  ORDER_TASK_BUTT = 7,
  OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderDirection_IsValid(int value);
constexpr OrderDirection OrderDirection_MIN = OPEN_LONG;
constexpr OrderDirection OrderDirection_MAX = ORDER_TASK_BUTT;
constexpr int OrderDirection_ARRAYSIZE = OrderDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderDirection_descriptor();
template<typename T>
inline const std::string& OrderDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderDirection_descriptor(), enum_t_value);
}
inline bool OrderDirection_Parse(
    const std::string& name, OrderDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderDirection>(
    OrderDirection_descriptor(), name, value);
}
enum OrderStatus : int {
  WORK_ORDER = 0,
  DONE_ORDER = 1,
  RISKCONTROL_REJECTED = 2,
  EXCHANGE_REJECTED = 3,
  NETWORK_ERROR = 4,
  OrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderStatus_IsValid(int value);
constexpr OrderStatus OrderStatus_MIN = WORK_ORDER;
constexpr OrderStatus OrderStatus_MAX = NETWORK_ERROR;
constexpr int OrderStatus_ARRAYSIZE = OrderStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatus_descriptor();
template<typename T>
inline const std::string& OrderStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderStatus_descriptor(), enum_t_value);
}
inline bool OrderStatus_Parse(
    const std::string& name, OrderStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatus>(
    OrderStatus_descriptor(), name, value);
}
// ===================================================================

class SubmitOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Orders.SubmitOrder) */ {
 public:
  inline SubmitOrder() : SubmitOrder(nullptr) {};
  virtual ~SubmitOrder();

  SubmitOrder(const SubmitOrder& from);
  SubmitOrder(SubmitOrder&& from) noexcept
    : SubmitOrder() {
    *this = ::std::move(from);
  }

  inline SubmitOrder& operator=(const SubmitOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitOrder& operator=(SubmitOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitOrder* internal_default_instance() {
    return reinterpret_cast<const SubmitOrder*>(
               &_SubmitOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmitOrder& a, SubmitOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitOrder* New() const final {
    return CreateMaybeMessage<SubmitOrder>(nullptr);
  }

  SubmitOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitOrder& from);
  void MergeFrom(const SubmitOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orders.SubmitOrder";
  }
  protected:
  explicit SubmitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStgyIDFieldNumber = 1,
    kProdIDFieldNumber = 2,
    kInstIDFieldNumber = 3,
    kExchIdFieldNumber = 9,
    kPriceFieldNumber = 5,
    kAmountFieldNumber = 4,
    kOrderTFieldNumber = 6,
    kStgyDFieldNumber = 7,
    kRealDFieldNumber = 8,
    kOrderRefFieldNumber = 10,
  };
  // string stgyID = 1;
  void clear_stgyid();
  const std::string& stgyid() const;
  void set_stgyid(const std::string& value);
  void set_stgyid(std::string&& value);
  void set_stgyid(const char* value);
  void set_stgyid(const char* value, size_t size);
  std::string* mutable_stgyid();
  std::string* release_stgyid();
  void set_allocated_stgyid(std::string* stgyid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stgyid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stgyid(
      std::string* stgyid);
  private:
  const std::string& _internal_stgyid() const;
  void _internal_set_stgyid(const std::string& value);
  std::string* _internal_mutable_stgyid();
  public:

  // string prodID = 2;
  void clear_prodid();
  const std::string& prodid() const;
  void set_prodid(const std::string& value);
  void set_prodid(std::string&& value);
  void set_prodid(const char* value);
  void set_prodid(const char* value, size_t size);
  std::string* mutable_prodid();
  std::string* release_prodid();
  void set_allocated_prodid(std::string* prodid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prodid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prodid(
      std::string* prodid);
  private:
  const std::string& _internal_prodid() const;
  void _internal_set_prodid(const std::string& value);
  std::string* _internal_mutable_prodid();
  public:

  // string instID = 3;
  void clear_instid();
  const std::string& instid() const;
  void set_instid(const std::string& value);
  void set_instid(std::string&& value);
  void set_instid(const char* value);
  void set_instid(const char* value, size_t size);
  std::string* mutable_instid();
  std::string* release_instid();
  void set_allocated_instid(std::string* instid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instid(
      std::string* instid);
  private:
  const std::string& _internal_instid() const;
  void _internal_set_instid(const std::string& value);
  std::string* _internal_mutable_instid();
  public:

  // string exchId = 9;
  void clear_exchid();
  const std::string& exchid() const;
  void set_exchid(const std::string& value);
  void set_exchid(std::string&& value);
  void set_exchid(const char* value);
  void set_exchid(const char* value, size_t size);
  std::string* mutable_exchid();
  std::string* release_exchid();
  void set_allocated_exchid(std::string* exchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchid(
      std::string* exchid);
  private:
  const std::string& _internal_exchid() const;
  void _internal_set_exchid(const std::string& value);
  std::string* _internal_mutable_exchid();
  public:

  // double price = 5;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 amount = 4;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Orders.OrderType order_t = 6;
  void clear_order_t();
  ::Orders::OrderType order_t() const;
  void set_order_t(::Orders::OrderType value);
  private:
  ::Orders::OrderType _internal_order_t() const;
  void _internal_set_order_t(::Orders::OrderType value);
  public:

  // .Orders.OrderDirection stgy_d = 7;
  void clear_stgy_d();
  ::Orders::OrderDirection stgy_d() const;
  void set_stgy_d(::Orders::OrderDirection value);
  private:
  ::Orders::OrderDirection _internal_stgy_d() const;
  void _internal_set_stgy_d(::Orders::OrderDirection value);
  public:

  // .Orders.OrderDirection real_d = 8;
  void clear_real_d();
  ::Orders::OrderDirection real_d() const;
  void set_real_d(::Orders::OrderDirection value);
  private:
  ::Orders::OrderDirection _internal_real_d() const;
  void _internal_set_real_d(::Orders::OrderDirection value);
  public:

  // int64 orderRef = 10;
  void clear_orderref();
  ::PROTOBUF_NAMESPACE_ID::int64 orderref() const;
  void set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_orderref() const;
  void _internal_set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orders.SubmitOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stgyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prodid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchid_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  int order_t_;
  int stgy_d_;
  int real_d_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class CancelOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Orders.CancelOrder) */ {
 public:
  inline CancelOrder() : CancelOrder(nullptr) {};
  virtual ~CancelOrder();

  CancelOrder(const CancelOrder& from);
  CancelOrder(CancelOrder&& from) noexcept
    : CancelOrder() {
    *this = ::std::move(from);
  }

  inline CancelOrder& operator=(const CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrder& operator=(CancelOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOrder* internal_default_instance() {
    return reinterpret_cast<const CancelOrder*>(
               &_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CancelOrder& a, CancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrder* New() const final {
    return CreateMaybeMessage<CancelOrder>(nullptr);
  }

  CancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOrder& from);
  void MergeFrom(const CancelOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orders.CancelOrder";
  }
  protected:
  explicit CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStgyIDFieldNumber = 1,
    kInstIDFieldNumber = 2,
    kOrderRefFieldNumber = 3,
  };
  // string stgyID = 1;
  void clear_stgyid();
  const std::string& stgyid() const;
  void set_stgyid(const std::string& value);
  void set_stgyid(std::string&& value);
  void set_stgyid(const char* value);
  void set_stgyid(const char* value, size_t size);
  std::string* mutable_stgyid();
  std::string* release_stgyid();
  void set_allocated_stgyid(std::string* stgyid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stgyid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stgyid(
      std::string* stgyid);
  private:
  const std::string& _internal_stgyid() const;
  void _internal_set_stgyid(const std::string& value);
  std::string* _internal_mutable_stgyid();
  public:

  // string instID = 2;
  void clear_instid();
  const std::string& instid() const;
  void set_instid(const std::string& value);
  void set_instid(std::string&& value);
  void set_instid(const char* value);
  void set_instid(const char* value, size_t size);
  std::string* mutable_instid();
  std::string* release_instid();
  void set_allocated_instid(std::string* instid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instid(
      std::string* instid);
  private:
  const std::string& _internal_instid() const;
  void _internal_set_instid(const std::string& value);
  std::string* _internal_mutable_instid();
  public:

  // int64 orderRef = 3;
  void clear_orderref();
  ::PROTOBUF_NAMESPACE_ID::int64 orderref() const;
  void set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_orderref() const;
  void _internal_set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orders.CancelOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stgyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class RtnTrade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Orders.RtnTrade) */ {
 public:
  inline RtnTrade() : RtnTrade(nullptr) {};
  virtual ~RtnTrade();

  RtnTrade(const RtnTrade& from);
  RtnTrade(RtnTrade&& from) noexcept
    : RtnTrade() {
    *this = ::std::move(from);
  }

  inline RtnTrade& operator=(const RtnTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtnTrade& operator=(RtnTrade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtnTrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtnTrade* internal_default_instance() {
    return reinterpret_cast<const RtnTrade*>(
               &_RtnTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RtnTrade& a, RtnTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(RtnTrade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtnTrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtnTrade* New() const final {
    return CreateMaybeMessage<RtnTrade>(nullptr);
  }

  RtnTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtnTrade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtnTrade& from);
  void MergeFrom(const RtnTrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtnTrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orders.RtnTrade";
  }
  protected:
  explicit RtnTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStgyIDFieldNumber = 1,
    kProdIDFieldNumber = 2,
    kInstIDFieldNumber = 3,
    kExchIdFieldNumber = 9,
    kAvgPriceFieldNumber = 5,
    kTradedAmountFieldNumber = 4,
    kOrderTFieldNumber = 6,
    kOrderRefFieldNumber = 10,
    kRealDFieldNumber = 7,
  };
  // string stgyID = 1;
  void clear_stgyid();
  const std::string& stgyid() const;
  void set_stgyid(const std::string& value);
  void set_stgyid(std::string&& value);
  void set_stgyid(const char* value);
  void set_stgyid(const char* value, size_t size);
  std::string* mutable_stgyid();
  std::string* release_stgyid();
  void set_allocated_stgyid(std::string* stgyid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stgyid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stgyid(
      std::string* stgyid);
  private:
  const std::string& _internal_stgyid() const;
  void _internal_set_stgyid(const std::string& value);
  std::string* _internal_mutable_stgyid();
  public:

  // string prodID = 2;
  void clear_prodid();
  const std::string& prodid() const;
  void set_prodid(const std::string& value);
  void set_prodid(std::string&& value);
  void set_prodid(const char* value);
  void set_prodid(const char* value, size_t size);
  std::string* mutable_prodid();
  std::string* release_prodid();
  void set_allocated_prodid(std::string* prodid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prodid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prodid(
      std::string* prodid);
  private:
  const std::string& _internal_prodid() const;
  void _internal_set_prodid(const std::string& value);
  std::string* _internal_mutable_prodid();
  public:

  // string instID = 3;
  void clear_instid();
  const std::string& instid() const;
  void set_instid(const std::string& value);
  void set_instid(std::string&& value);
  void set_instid(const char* value);
  void set_instid(const char* value, size_t size);
  std::string* mutable_instid();
  std::string* release_instid();
  void set_allocated_instid(std::string* instid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instid(
      std::string* instid);
  private:
  const std::string& _internal_instid() const;
  void _internal_set_instid(const std::string& value);
  std::string* _internal_mutable_instid();
  public:

  // string exchId = 9;
  void clear_exchid();
  const std::string& exchid() const;
  void set_exchid(const std::string& value);
  void set_exchid(std::string&& value);
  void set_exchid(const char* value);
  void set_exchid(const char* value, size_t size);
  std::string* mutable_exchid();
  std::string* release_exchid();
  void set_allocated_exchid(std::string* exchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchid(
      std::string* exchid);
  private:
  const std::string& _internal_exchid() const;
  void _internal_set_exchid(const std::string& value);
  std::string* _internal_mutable_exchid();
  public:

  // double avgPrice = 5;
  void clear_avgprice();
  double avgprice() const;
  void set_avgprice(double value);
  private:
  double _internal_avgprice() const;
  void _internal_set_avgprice(double value);
  public:

  // int32 tradedAmount = 4;
  void clear_tradedamount();
  ::PROTOBUF_NAMESPACE_ID::int32 tradedamount() const;
  void set_tradedamount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tradedamount() const;
  void _internal_set_tradedamount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Orders.OrderType order_t = 6;
  void clear_order_t();
  ::Orders::OrderType order_t() const;
  void set_order_t(::Orders::OrderType value);
  private:
  ::Orders::OrderType _internal_order_t() const;
  void _internal_set_order_t(::Orders::OrderType value);
  public:

  // int64 orderRef = 10;
  void clear_orderref();
  ::PROTOBUF_NAMESPACE_ID::int64 orderref() const;
  void set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_orderref() const;
  void _internal_set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Orders.OrderDirection real_d = 7;
  void clear_real_d();
  ::Orders::OrderDirection real_d() const;
  void set_real_d(::Orders::OrderDirection value);
  private:
  ::Orders::OrderDirection _internal_real_d() const;
  void _internal_set_real_d(::Orders::OrderDirection value);
  public:

  // @@protoc_insertion_point(class_scope:Orders.RtnTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stgyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prodid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchid_;
  double avgprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 tradedamount_;
  int order_t_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderref_;
  int real_d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class RtnOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Orders.RtnOrder) */ {
 public:
  inline RtnOrder() : RtnOrder(nullptr) {};
  virtual ~RtnOrder();

  RtnOrder(const RtnOrder& from);
  RtnOrder(RtnOrder&& from) noexcept
    : RtnOrder() {
    *this = ::std::move(from);
  }

  inline RtnOrder& operator=(const RtnOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtnOrder& operator=(RtnOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtnOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtnOrder* internal_default_instance() {
    return reinterpret_cast<const RtnOrder*>(
               &_RtnOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RtnOrder& a, RtnOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(RtnOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtnOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtnOrder* New() const final {
    return CreateMaybeMessage<RtnOrder>(nullptr);
  }

  RtnOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtnOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtnOrder& from);
  void MergeFrom(const RtnOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtnOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orders.RtnOrder";
  }
  protected:
  explicit RtnOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStgyIDFieldNumber = 1,
    kProdIDFieldNumber = 2,
    kInstIDFieldNumber = 3,
    kExchIdFieldNumber = 8,
    kStatusFieldNumber = 5,
    kStgyDFieldNumber = 6,
    kOrderRefFieldNumber = 9,
    kRealDFieldNumber = 7,
  };
  // string stgyID = 1;
  void clear_stgyid();
  const std::string& stgyid() const;
  void set_stgyid(const std::string& value);
  void set_stgyid(std::string&& value);
  void set_stgyid(const char* value);
  void set_stgyid(const char* value, size_t size);
  std::string* mutable_stgyid();
  std::string* release_stgyid();
  void set_allocated_stgyid(std::string* stgyid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stgyid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stgyid(
      std::string* stgyid);
  private:
  const std::string& _internal_stgyid() const;
  void _internal_set_stgyid(const std::string& value);
  std::string* _internal_mutable_stgyid();
  public:

  // string prodID = 2;
  void clear_prodid();
  const std::string& prodid() const;
  void set_prodid(const std::string& value);
  void set_prodid(std::string&& value);
  void set_prodid(const char* value);
  void set_prodid(const char* value, size_t size);
  std::string* mutable_prodid();
  std::string* release_prodid();
  void set_allocated_prodid(std::string* prodid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prodid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prodid(
      std::string* prodid);
  private:
  const std::string& _internal_prodid() const;
  void _internal_set_prodid(const std::string& value);
  std::string* _internal_mutable_prodid();
  public:

  // string instID = 3;
  void clear_instid();
  const std::string& instid() const;
  void set_instid(const std::string& value);
  void set_instid(std::string&& value);
  void set_instid(const char* value);
  void set_instid(const char* value, size_t size);
  std::string* mutable_instid();
  std::string* release_instid();
  void set_allocated_instid(std::string* instid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instid(
      std::string* instid);
  private:
  const std::string& _internal_instid() const;
  void _internal_set_instid(const std::string& value);
  std::string* _internal_mutable_instid();
  public:

  // string exchId = 8;
  void clear_exchid();
  const std::string& exchid() const;
  void set_exchid(const std::string& value);
  void set_exchid(std::string&& value);
  void set_exchid(const char* value);
  void set_exchid(const char* value, size_t size);
  std::string* mutable_exchid();
  std::string* release_exchid();
  void set_allocated_exchid(std::string* exchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchid(
      std::string* exchid);
  private:
  const std::string& _internal_exchid() const;
  void _internal_set_exchid(const std::string& value);
  std::string* _internal_mutable_exchid();
  public:

  // .Orders.OrderStatus status = 5;
  void clear_status();
  ::Orders::OrderStatus status() const;
  void set_status(::Orders::OrderStatus value);
  private:
  ::Orders::OrderStatus _internal_status() const;
  void _internal_set_status(::Orders::OrderStatus value);
  public:

  // .Orders.OrderDirection stgy_d = 6;
  void clear_stgy_d();
  ::Orders::OrderDirection stgy_d() const;
  void set_stgy_d(::Orders::OrderDirection value);
  private:
  ::Orders::OrderDirection _internal_stgy_d() const;
  void _internal_set_stgy_d(::Orders::OrderDirection value);
  public:

  // int64 orderRef = 9;
  void clear_orderref();
  ::PROTOBUF_NAMESPACE_ID::int64 orderref() const;
  void set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_orderref() const;
  void _internal_set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Orders.OrderDirection real_d = 7;
  void clear_real_d();
  ::Orders::OrderDirection real_d() const;
  void set_real_d(::Orders::OrderDirection value);
  private:
  ::Orders::OrderDirection _internal_real_d() const;
  void _internal_set_real_d(::Orders::OrderDirection value);
  public:

  // @@protoc_insertion_point(class_scope:Orders.RtnOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stgyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prodid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchid_;
  int status_;
  int stgy_d_;
  ::PROTOBUF_NAMESPACE_ID::int64 orderref_;
  int real_d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmitOrder

// string stgyID = 1;
inline void SubmitOrder::clear_stgyid() {
  stgyid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmitOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.stgyID)
  return _internal_stgyid();
}
inline void SubmitOrder::set_stgyid(const std::string& value) {
  _internal_set_stgyid(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.stgyID)
}
inline std::string* SubmitOrder::mutable_stgyid() {
  // @@protoc_insertion_point(field_mutable:Orders.SubmitOrder.stgyID)
  return _internal_mutable_stgyid();
}
inline const std::string& SubmitOrder::_internal_stgyid() const {
  return stgyid_.Get();
}
inline void SubmitOrder::_internal_set_stgyid(const std::string& value) {
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmitOrder::set_stgyid(std::string&& value) {
  
  stgyid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.SubmitOrder.stgyID)
}
inline void SubmitOrder::set_stgyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.SubmitOrder.stgyID)
}
inline void SubmitOrder::set_stgyid(const char* value,
    size_t size) {
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.SubmitOrder.stgyID)
}
inline std::string* SubmitOrder::_internal_mutable_stgyid() {
  
  return stgyid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmitOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:Orders.SubmitOrder.stgyID)
  return stgyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitOrder::set_allocated_stgyid(std::string* stgyid) {
  if (stgyid != nullptr) {
    
  } else {
    
  }
  stgyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stgyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.SubmitOrder.stgyID)
}
inline std::string* SubmitOrder::unsafe_arena_release_stgyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.SubmitOrder.stgyID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stgyid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubmitOrder::unsafe_arena_set_allocated_stgyid(
    std::string* stgyid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stgyid != nullptr) {
    
  } else {
    
  }
  stgyid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stgyid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.SubmitOrder.stgyID)
}

// string prodID = 2;
inline void SubmitOrder::clear_prodid() {
  prodid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmitOrder::prodid() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.prodID)
  return _internal_prodid();
}
inline void SubmitOrder::set_prodid(const std::string& value) {
  _internal_set_prodid(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.prodID)
}
inline std::string* SubmitOrder::mutable_prodid() {
  // @@protoc_insertion_point(field_mutable:Orders.SubmitOrder.prodID)
  return _internal_mutable_prodid();
}
inline const std::string& SubmitOrder::_internal_prodid() const {
  return prodid_.Get();
}
inline void SubmitOrder::_internal_set_prodid(const std::string& value) {
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmitOrder::set_prodid(std::string&& value) {
  
  prodid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.SubmitOrder.prodID)
}
inline void SubmitOrder::set_prodid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.SubmitOrder.prodID)
}
inline void SubmitOrder::set_prodid(const char* value,
    size_t size) {
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.SubmitOrder.prodID)
}
inline std::string* SubmitOrder::_internal_mutable_prodid() {
  
  return prodid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmitOrder::release_prodid() {
  // @@protoc_insertion_point(field_release:Orders.SubmitOrder.prodID)
  return prodid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitOrder::set_allocated_prodid(std::string* prodid) {
  if (prodid != nullptr) {
    
  } else {
    
  }
  prodid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prodid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.SubmitOrder.prodID)
}
inline std::string* SubmitOrder::unsafe_arena_release_prodid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.SubmitOrder.prodID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return prodid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubmitOrder::unsafe_arena_set_allocated_prodid(
    std::string* prodid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prodid != nullptr) {
    
  } else {
    
  }
  prodid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prodid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.SubmitOrder.prodID)
}

// string instID = 3;
inline void SubmitOrder::clear_instid() {
  instid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmitOrder::instid() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.instID)
  return _internal_instid();
}
inline void SubmitOrder::set_instid(const std::string& value) {
  _internal_set_instid(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.instID)
}
inline std::string* SubmitOrder::mutable_instid() {
  // @@protoc_insertion_point(field_mutable:Orders.SubmitOrder.instID)
  return _internal_mutable_instid();
}
inline const std::string& SubmitOrder::_internal_instid() const {
  return instid_.Get();
}
inline void SubmitOrder::_internal_set_instid(const std::string& value) {
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmitOrder::set_instid(std::string&& value) {
  
  instid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.SubmitOrder.instID)
}
inline void SubmitOrder::set_instid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.SubmitOrder.instID)
}
inline void SubmitOrder::set_instid(const char* value,
    size_t size) {
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.SubmitOrder.instID)
}
inline std::string* SubmitOrder::_internal_mutable_instid() {
  
  return instid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmitOrder::release_instid() {
  // @@protoc_insertion_point(field_release:Orders.SubmitOrder.instID)
  return instid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitOrder::set_allocated_instid(std::string* instid) {
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.SubmitOrder.instID)
}
inline std::string* SubmitOrder::unsafe_arena_release_instid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.SubmitOrder.instID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubmitOrder::unsafe_arena_set_allocated_instid(
    std::string* instid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.SubmitOrder.instID)
}

// int32 amount = 4;
inline void SubmitOrder::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubmitOrder::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubmitOrder::amount() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.amount)
  return _internal_amount();
}
inline void SubmitOrder::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void SubmitOrder::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.amount)
}

// double price = 5;
inline void SubmitOrder::clear_price() {
  price_ = 0;
}
inline double SubmitOrder::_internal_price() const {
  return price_;
}
inline double SubmitOrder::price() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.price)
  return _internal_price();
}
inline void SubmitOrder::_internal_set_price(double value) {
  
  price_ = value;
}
inline void SubmitOrder::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.price)
}

// .Orders.OrderType order_t = 6;
inline void SubmitOrder::clear_order_t() {
  order_t_ = 0;
}
inline ::Orders::OrderType SubmitOrder::_internal_order_t() const {
  return static_cast< ::Orders::OrderType >(order_t_);
}
inline ::Orders::OrderType SubmitOrder::order_t() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.order_t)
  return _internal_order_t();
}
inline void SubmitOrder::_internal_set_order_t(::Orders::OrderType value) {
  
  order_t_ = value;
}
inline void SubmitOrder::set_order_t(::Orders::OrderType value) {
  _internal_set_order_t(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.order_t)
}

// .Orders.OrderDirection stgy_d = 7;
inline void SubmitOrder::clear_stgy_d() {
  stgy_d_ = 0;
}
inline ::Orders::OrderDirection SubmitOrder::_internal_stgy_d() const {
  return static_cast< ::Orders::OrderDirection >(stgy_d_);
}
inline ::Orders::OrderDirection SubmitOrder::stgy_d() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.stgy_d)
  return _internal_stgy_d();
}
inline void SubmitOrder::_internal_set_stgy_d(::Orders::OrderDirection value) {
  
  stgy_d_ = value;
}
inline void SubmitOrder::set_stgy_d(::Orders::OrderDirection value) {
  _internal_set_stgy_d(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.stgy_d)
}

// .Orders.OrderDirection real_d = 8;
inline void SubmitOrder::clear_real_d() {
  real_d_ = 0;
}
inline ::Orders::OrderDirection SubmitOrder::_internal_real_d() const {
  return static_cast< ::Orders::OrderDirection >(real_d_);
}
inline ::Orders::OrderDirection SubmitOrder::real_d() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.real_d)
  return _internal_real_d();
}
inline void SubmitOrder::_internal_set_real_d(::Orders::OrderDirection value) {
  
  real_d_ = value;
}
inline void SubmitOrder::set_real_d(::Orders::OrderDirection value) {
  _internal_set_real_d(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.real_d)
}

// string exchId = 9;
inline void SubmitOrder::clear_exchid() {
  exchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmitOrder::exchid() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.exchId)
  return _internal_exchid();
}
inline void SubmitOrder::set_exchid(const std::string& value) {
  _internal_set_exchid(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.exchId)
}
inline std::string* SubmitOrder::mutable_exchid() {
  // @@protoc_insertion_point(field_mutable:Orders.SubmitOrder.exchId)
  return _internal_mutable_exchid();
}
inline const std::string& SubmitOrder::_internal_exchid() const {
  return exchid_.Get();
}
inline void SubmitOrder::_internal_set_exchid(const std::string& value) {
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmitOrder::set_exchid(std::string&& value) {
  
  exchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.SubmitOrder.exchId)
}
inline void SubmitOrder::set_exchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.SubmitOrder.exchId)
}
inline void SubmitOrder::set_exchid(const char* value,
    size_t size) {
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.SubmitOrder.exchId)
}
inline std::string* SubmitOrder::_internal_mutable_exchid() {
  
  return exchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmitOrder::release_exchid() {
  // @@protoc_insertion_point(field_release:Orders.SubmitOrder.exchId)
  return exchid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitOrder::set_allocated_exchid(std::string* exchid) {
  if (exchid != nullptr) {
    
  } else {
    
  }
  exchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.SubmitOrder.exchId)
}
inline std::string* SubmitOrder::unsafe_arena_release_exchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.SubmitOrder.exchId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubmitOrder::unsafe_arena_set_allocated_exchid(
    std::string* exchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchid != nullptr) {
    
  } else {
    
  }
  exchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.SubmitOrder.exchId)
}

// int64 orderRef = 10;
inline void SubmitOrder::clear_orderref() {
  orderref_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubmitOrder::_internal_orderref() const {
  return orderref_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubmitOrder::orderref() const {
  // @@protoc_insertion_point(field_get:Orders.SubmitOrder.orderRef)
  return _internal_orderref();
}
inline void SubmitOrder::_internal_set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderref_ = value;
}
inline void SubmitOrder::set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_orderref(value);
  // @@protoc_insertion_point(field_set:Orders.SubmitOrder.orderRef)
}

// -------------------------------------------------------------------

// CancelOrder

// string stgyID = 1;
inline void CancelOrder::clear_stgyid() {
  stgyid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CancelOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:Orders.CancelOrder.stgyID)
  return _internal_stgyid();
}
inline void CancelOrder::set_stgyid(const std::string& value) {
  _internal_set_stgyid(value);
  // @@protoc_insertion_point(field_set:Orders.CancelOrder.stgyID)
}
inline std::string* CancelOrder::mutable_stgyid() {
  // @@protoc_insertion_point(field_mutable:Orders.CancelOrder.stgyID)
  return _internal_mutable_stgyid();
}
inline const std::string& CancelOrder::_internal_stgyid() const {
  return stgyid_.Get();
}
inline void CancelOrder::_internal_set_stgyid(const std::string& value) {
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CancelOrder::set_stgyid(std::string&& value) {
  
  stgyid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.CancelOrder.stgyID)
}
inline void CancelOrder::set_stgyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.CancelOrder.stgyID)
}
inline void CancelOrder::set_stgyid(const char* value,
    size_t size) {
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.CancelOrder.stgyID)
}
inline std::string* CancelOrder::_internal_mutable_stgyid() {
  
  return stgyid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CancelOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:Orders.CancelOrder.stgyID)
  return stgyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelOrder::set_allocated_stgyid(std::string* stgyid) {
  if (stgyid != nullptr) {
    
  } else {
    
  }
  stgyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stgyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.CancelOrder.stgyID)
}
inline std::string* CancelOrder::unsafe_arena_release_stgyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.CancelOrder.stgyID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stgyid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CancelOrder::unsafe_arena_set_allocated_stgyid(
    std::string* stgyid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stgyid != nullptr) {
    
  } else {
    
  }
  stgyid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stgyid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.CancelOrder.stgyID)
}

// string instID = 2;
inline void CancelOrder::clear_instid() {
  instid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CancelOrder::instid() const {
  // @@protoc_insertion_point(field_get:Orders.CancelOrder.instID)
  return _internal_instid();
}
inline void CancelOrder::set_instid(const std::string& value) {
  _internal_set_instid(value);
  // @@protoc_insertion_point(field_set:Orders.CancelOrder.instID)
}
inline std::string* CancelOrder::mutable_instid() {
  // @@protoc_insertion_point(field_mutable:Orders.CancelOrder.instID)
  return _internal_mutable_instid();
}
inline const std::string& CancelOrder::_internal_instid() const {
  return instid_.Get();
}
inline void CancelOrder::_internal_set_instid(const std::string& value) {
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CancelOrder::set_instid(std::string&& value) {
  
  instid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.CancelOrder.instID)
}
inline void CancelOrder::set_instid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.CancelOrder.instID)
}
inline void CancelOrder::set_instid(const char* value,
    size_t size) {
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.CancelOrder.instID)
}
inline std::string* CancelOrder::_internal_mutable_instid() {
  
  return instid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CancelOrder::release_instid() {
  // @@protoc_insertion_point(field_release:Orders.CancelOrder.instID)
  return instid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelOrder::set_allocated_instid(std::string* instid) {
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.CancelOrder.instID)
}
inline std::string* CancelOrder::unsafe_arena_release_instid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.CancelOrder.instID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CancelOrder::unsafe_arena_set_allocated_instid(
    std::string* instid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.CancelOrder.instID)
}

// int64 orderRef = 3;
inline void CancelOrder::clear_orderref() {
  orderref_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CancelOrder::_internal_orderref() const {
  return orderref_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CancelOrder::orderref() const {
  // @@protoc_insertion_point(field_get:Orders.CancelOrder.orderRef)
  return _internal_orderref();
}
inline void CancelOrder::_internal_set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderref_ = value;
}
inline void CancelOrder::set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_orderref(value);
  // @@protoc_insertion_point(field_set:Orders.CancelOrder.orderRef)
}

// -------------------------------------------------------------------

// RtnTrade

// string stgyID = 1;
inline void RtnTrade::clear_stgyid() {
  stgyid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RtnTrade::stgyid() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.stgyID)
  return _internal_stgyid();
}
inline void RtnTrade::set_stgyid(const std::string& value) {
  _internal_set_stgyid(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.stgyID)
}
inline std::string* RtnTrade::mutable_stgyid() {
  // @@protoc_insertion_point(field_mutable:Orders.RtnTrade.stgyID)
  return _internal_mutable_stgyid();
}
inline const std::string& RtnTrade::_internal_stgyid() const {
  return stgyid_.Get();
}
inline void RtnTrade::_internal_set_stgyid(const std::string& value) {
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RtnTrade::set_stgyid(std::string&& value) {
  
  stgyid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.RtnTrade.stgyID)
}
inline void RtnTrade::set_stgyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.RtnTrade.stgyID)
}
inline void RtnTrade::set_stgyid(const char* value,
    size_t size) {
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.RtnTrade.stgyID)
}
inline std::string* RtnTrade::_internal_mutable_stgyid() {
  
  return stgyid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RtnTrade::release_stgyid() {
  // @@protoc_insertion_point(field_release:Orders.RtnTrade.stgyID)
  return stgyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtnTrade::set_allocated_stgyid(std::string* stgyid) {
  if (stgyid != nullptr) {
    
  } else {
    
  }
  stgyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stgyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.RtnTrade.stgyID)
}
inline std::string* RtnTrade::unsafe_arena_release_stgyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.RtnTrade.stgyID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stgyid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RtnTrade::unsafe_arena_set_allocated_stgyid(
    std::string* stgyid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stgyid != nullptr) {
    
  } else {
    
  }
  stgyid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stgyid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.RtnTrade.stgyID)
}

// string prodID = 2;
inline void RtnTrade::clear_prodid() {
  prodid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RtnTrade::prodid() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.prodID)
  return _internal_prodid();
}
inline void RtnTrade::set_prodid(const std::string& value) {
  _internal_set_prodid(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.prodID)
}
inline std::string* RtnTrade::mutable_prodid() {
  // @@protoc_insertion_point(field_mutable:Orders.RtnTrade.prodID)
  return _internal_mutable_prodid();
}
inline const std::string& RtnTrade::_internal_prodid() const {
  return prodid_.Get();
}
inline void RtnTrade::_internal_set_prodid(const std::string& value) {
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RtnTrade::set_prodid(std::string&& value) {
  
  prodid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.RtnTrade.prodID)
}
inline void RtnTrade::set_prodid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.RtnTrade.prodID)
}
inline void RtnTrade::set_prodid(const char* value,
    size_t size) {
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.RtnTrade.prodID)
}
inline std::string* RtnTrade::_internal_mutable_prodid() {
  
  return prodid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RtnTrade::release_prodid() {
  // @@protoc_insertion_point(field_release:Orders.RtnTrade.prodID)
  return prodid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtnTrade::set_allocated_prodid(std::string* prodid) {
  if (prodid != nullptr) {
    
  } else {
    
  }
  prodid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prodid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.RtnTrade.prodID)
}
inline std::string* RtnTrade::unsafe_arena_release_prodid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.RtnTrade.prodID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return prodid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RtnTrade::unsafe_arena_set_allocated_prodid(
    std::string* prodid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prodid != nullptr) {
    
  } else {
    
  }
  prodid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prodid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.RtnTrade.prodID)
}

// string instID = 3;
inline void RtnTrade::clear_instid() {
  instid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RtnTrade::instid() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.instID)
  return _internal_instid();
}
inline void RtnTrade::set_instid(const std::string& value) {
  _internal_set_instid(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.instID)
}
inline std::string* RtnTrade::mutable_instid() {
  // @@protoc_insertion_point(field_mutable:Orders.RtnTrade.instID)
  return _internal_mutable_instid();
}
inline const std::string& RtnTrade::_internal_instid() const {
  return instid_.Get();
}
inline void RtnTrade::_internal_set_instid(const std::string& value) {
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RtnTrade::set_instid(std::string&& value) {
  
  instid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.RtnTrade.instID)
}
inline void RtnTrade::set_instid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.RtnTrade.instID)
}
inline void RtnTrade::set_instid(const char* value,
    size_t size) {
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.RtnTrade.instID)
}
inline std::string* RtnTrade::_internal_mutable_instid() {
  
  return instid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RtnTrade::release_instid() {
  // @@protoc_insertion_point(field_release:Orders.RtnTrade.instID)
  return instid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtnTrade::set_allocated_instid(std::string* instid) {
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.RtnTrade.instID)
}
inline std::string* RtnTrade::unsafe_arena_release_instid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.RtnTrade.instID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RtnTrade::unsafe_arena_set_allocated_instid(
    std::string* instid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.RtnTrade.instID)
}

// int32 tradedAmount = 4;
inline void RtnTrade::clear_tradedamount() {
  tradedamount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtnTrade::_internal_tradedamount() const {
  return tradedamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtnTrade::tradedamount() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.tradedAmount)
  return _internal_tradedamount();
}
inline void RtnTrade::_internal_set_tradedamount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tradedamount_ = value;
}
inline void RtnTrade::set_tradedamount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tradedamount(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.tradedAmount)
}

// double avgPrice = 5;
inline void RtnTrade::clear_avgprice() {
  avgprice_ = 0;
}
inline double RtnTrade::_internal_avgprice() const {
  return avgprice_;
}
inline double RtnTrade::avgprice() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.avgPrice)
  return _internal_avgprice();
}
inline void RtnTrade::_internal_set_avgprice(double value) {
  
  avgprice_ = value;
}
inline void RtnTrade::set_avgprice(double value) {
  _internal_set_avgprice(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.avgPrice)
}

// .Orders.OrderType order_t = 6;
inline void RtnTrade::clear_order_t() {
  order_t_ = 0;
}
inline ::Orders::OrderType RtnTrade::_internal_order_t() const {
  return static_cast< ::Orders::OrderType >(order_t_);
}
inline ::Orders::OrderType RtnTrade::order_t() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.order_t)
  return _internal_order_t();
}
inline void RtnTrade::_internal_set_order_t(::Orders::OrderType value) {
  
  order_t_ = value;
}
inline void RtnTrade::set_order_t(::Orders::OrderType value) {
  _internal_set_order_t(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.order_t)
}

// .Orders.OrderDirection real_d = 7;
inline void RtnTrade::clear_real_d() {
  real_d_ = 0;
}
inline ::Orders::OrderDirection RtnTrade::_internal_real_d() const {
  return static_cast< ::Orders::OrderDirection >(real_d_);
}
inline ::Orders::OrderDirection RtnTrade::real_d() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.real_d)
  return _internal_real_d();
}
inline void RtnTrade::_internal_set_real_d(::Orders::OrderDirection value) {
  
  real_d_ = value;
}
inline void RtnTrade::set_real_d(::Orders::OrderDirection value) {
  _internal_set_real_d(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.real_d)
}

// string exchId = 9;
inline void RtnTrade::clear_exchid() {
  exchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RtnTrade::exchid() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.exchId)
  return _internal_exchid();
}
inline void RtnTrade::set_exchid(const std::string& value) {
  _internal_set_exchid(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.exchId)
}
inline std::string* RtnTrade::mutable_exchid() {
  // @@protoc_insertion_point(field_mutable:Orders.RtnTrade.exchId)
  return _internal_mutable_exchid();
}
inline const std::string& RtnTrade::_internal_exchid() const {
  return exchid_.Get();
}
inline void RtnTrade::_internal_set_exchid(const std::string& value) {
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RtnTrade::set_exchid(std::string&& value) {
  
  exchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.RtnTrade.exchId)
}
inline void RtnTrade::set_exchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.RtnTrade.exchId)
}
inline void RtnTrade::set_exchid(const char* value,
    size_t size) {
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.RtnTrade.exchId)
}
inline std::string* RtnTrade::_internal_mutable_exchid() {
  
  return exchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RtnTrade::release_exchid() {
  // @@protoc_insertion_point(field_release:Orders.RtnTrade.exchId)
  return exchid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtnTrade::set_allocated_exchid(std::string* exchid) {
  if (exchid != nullptr) {
    
  } else {
    
  }
  exchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.RtnTrade.exchId)
}
inline std::string* RtnTrade::unsafe_arena_release_exchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.RtnTrade.exchId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RtnTrade::unsafe_arena_set_allocated_exchid(
    std::string* exchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchid != nullptr) {
    
  } else {
    
  }
  exchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.RtnTrade.exchId)
}

// int64 orderRef = 10;
inline void RtnTrade::clear_orderref() {
  orderref_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtnTrade::_internal_orderref() const {
  return orderref_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtnTrade::orderref() const {
  // @@protoc_insertion_point(field_get:Orders.RtnTrade.orderRef)
  return _internal_orderref();
}
inline void RtnTrade::_internal_set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderref_ = value;
}
inline void RtnTrade::set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_orderref(value);
  // @@protoc_insertion_point(field_set:Orders.RtnTrade.orderRef)
}

// -------------------------------------------------------------------

// RtnOrder

// string stgyID = 1;
inline void RtnOrder::clear_stgyid() {
  stgyid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RtnOrder::stgyid() const {
  // @@protoc_insertion_point(field_get:Orders.RtnOrder.stgyID)
  return _internal_stgyid();
}
inline void RtnOrder::set_stgyid(const std::string& value) {
  _internal_set_stgyid(value);
  // @@protoc_insertion_point(field_set:Orders.RtnOrder.stgyID)
}
inline std::string* RtnOrder::mutable_stgyid() {
  // @@protoc_insertion_point(field_mutable:Orders.RtnOrder.stgyID)
  return _internal_mutable_stgyid();
}
inline const std::string& RtnOrder::_internal_stgyid() const {
  return stgyid_.Get();
}
inline void RtnOrder::_internal_set_stgyid(const std::string& value) {
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RtnOrder::set_stgyid(std::string&& value) {
  
  stgyid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.RtnOrder.stgyID)
}
inline void RtnOrder::set_stgyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.RtnOrder.stgyID)
}
inline void RtnOrder::set_stgyid(const char* value,
    size_t size) {
  
  stgyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.RtnOrder.stgyID)
}
inline std::string* RtnOrder::_internal_mutable_stgyid() {
  
  return stgyid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RtnOrder::release_stgyid() {
  // @@protoc_insertion_point(field_release:Orders.RtnOrder.stgyID)
  return stgyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtnOrder::set_allocated_stgyid(std::string* stgyid) {
  if (stgyid != nullptr) {
    
  } else {
    
  }
  stgyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stgyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.RtnOrder.stgyID)
}
inline std::string* RtnOrder::unsafe_arena_release_stgyid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.RtnOrder.stgyID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stgyid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RtnOrder::unsafe_arena_set_allocated_stgyid(
    std::string* stgyid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stgyid != nullptr) {
    
  } else {
    
  }
  stgyid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stgyid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.RtnOrder.stgyID)
}

// string prodID = 2;
inline void RtnOrder::clear_prodid() {
  prodid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RtnOrder::prodid() const {
  // @@protoc_insertion_point(field_get:Orders.RtnOrder.prodID)
  return _internal_prodid();
}
inline void RtnOrder::set_prodid(const std::string& value) {
  _internal_set_prodid(value);
  // @@protoc_insertion_point(field_set:Orders.RtnOrder.prodID)
}
inline std::string* RtnOrder::mutable_prodid() {
  // @@protoc_insertion_point(field_mutable:Orders.RtnOrder.prodID)
  return _internal_mutable_prodid();
}
inline const std::string& RtnOrder::_internal_prodid() const {
  return prodid_.Get();
}
inline void RtnOrder::_internal_set_prodid(const std::string& value) {
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RtnOrder::set_prodid(std::string&& value) {
  
  prodid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.RtnOrder.prodID)
}
inline void RtnOrder::set_prodid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.RtnOrder.prodID)
}
inline void RtnOrder::set_prodid(const char* value,
    size_t size) {
  
  prodid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.RtnOrder.prodID)
}
inline std::string* RtnOrder::_internal_mutable_prodid() {
  
  return prodid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RtnOrder::release_prodid() {
  // @@protoc_insertion_point(field_release:Orders.RtnOrder.prodID)
  return prodid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtnOrder::set_allocated_prodid(std::string* prodid) {
  if (prodid != nullptr) {
    
  } else {
    
  }
  prodid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prodid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.RtnOrder.prodID)
}
inline std::string* RtnOrder::unsafe_arena_release_prodid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.RtnOrder.prodID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return prodid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RtnOrder::unsafe_arena_set_allocated_prodid(
    std::string* prodid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prodid != nullptr) {
    
  } else {
    
  }
  prodid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prodid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.RtnOrder.prodID)
}

// string instID = 3;
inline void RtnOrder::clear_instid() {
  instid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RtnOrder::instid() const {
  // @@protoc_insertion_point(field_get:Orders.RtnOrder.instID)
  return _internal_instid();
}
inline void RtnOrder::set_instid(const std::string& value) {
  _internal_set_instid(value);
  // @@protoc_insertion_point(field_set:Orders.RtnOrder.instID)
}
inline std::string* RtnOrder::mutable_instid() {
  // @@protoc_insertion_point(field_mutable:Orders.RtnOrder.instID)
  return _internal_mutable_instid();
}
inline const std::string& RtnOrder::_internal_instid() const {
  return instid_.Get();
}
inline void RtnOrder::_internal_set_instid(const std::string& value) {
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RtnOrder::set_instid(std::string&& value) {
  
  instid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.RtnOrder.instID)
}
inline void RtnOrder::set_instid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.RtnOrder.instID)
}
inline void RtnOrder::set_instid(const char* value,
    size_t size) {
  
  instid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.RtnOrder.instID)
}
inline std::string* RtnOrder::_internal_mutable_instid() {
  
  return instid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RtnOrder::release_instid() {
  // @@protoc_insertion_point(field_release:Orders.RtnOrder.instID)
  return instid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtnOrder::set_allocated_instid(std::string* instid) {
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.RtnOrder.instID)
}
inline std::string* RtnOrder::unsafe_arena_release_instid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.RtnOrder.instID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RtnOrder::unsafe_arena_set_allocated_instid(
    std::string* instid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instid != nullptr) {
    
  } else {
    
  }
  instid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.RtnOrder.instID)
}

// .Orders.OrderStatus status = 5;
inline void RtnOrder::clear_status() {
  status_ = 0;
}
inline ::Orders::OrderStatus RtnOrder::_internal_status() const {
  return static_cast< ::Orders::OrderStatus >(status_);
}
inline ::Orders::OrderStatus RtnOrder::status() const {
  // @@protoc_insertion_point(field_get:Orders.RtnOrder.status)
  return _internal_status();
}
inline void RtnOrder::_internal_set_status(::Orders::OrderStatus value) {
  
  status_ = value;
}
inline void RtnOrder::set_status(::Orders::OrderStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Orders.RtnOrder.status)
}

// .Orders.OrderDirection stgy_d = 6;
inline void RtnOrder::clear_stgy_d() {
  stgy_d_ = 0;
}
inline ::Orders::OrderDirection RtnOrder::_internal_stgy_d() const {
  return static_cast< ::Orders::OrderDirection >(stgy_d_);
}
inline ::Orders::OrderDirection RtnOrder::stgy_d() const {
  // @@protoc_insertion_point(field_get:Orders.RtnOrder.stgy_d)
  return _internal_stgy_d();
}
inline void RtnOrder::_internal_set_stgy_d(::Orders::OrderDirection value) {
  
  stgy_d_ = value;
}
inline void RtnOrder::set_stgy_d(::Orders::OrderDirection value) {
  _internal_set_stgy_d(value);
  // @@protoc_insertion_point(field_set:Orders.RtnOrder.stgy_d)
}

// .Orders.OrderDirection real_d = 7;
inline void RtnOrder::clear_real_d() {
  real_d_ = 0;
}
inline ::Orders::OrderDirection RtnOrder::_internal_real_d() const {
  return static_cast< ::Orders::OrderDirection >(real_d_);
}
inline ::Orders::OrderDirection RtnOrder::real_d() const {
  // @@protoc_insertion_point(field_get:Orders.RtnOrder.real_d)
  return _internal_real_d();
}
inline void RtnOrder::_internal_set_real_d(::Orders::OrderDirection value) {
  
  real_d_ = value;
}
inline void RtnOrder::set_real_d(::Orders::OrderDirection value) {
  _internal_set_real_d(value);
  // @@protoc_insertion_point(field_set:Orders.RtnOrder.real_d)
}

// string exchId = 8;
inline void RtnOrder::clear_exchid() {
  exchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RtnOrder::exchid() const {
  // @@protoc_insertion_point(field_get:Orders.RtnOrder.exchId)
  return _internal_exchid();
}
inline void RtnOrder::set_exchid(const std::string& value) {
  _internal_set_exchid(value);
  // @@protoc_insertion_point(field_set:Orders.RtnOrder.exchId)
}
inline std::string* RtnOrder::mutable_exchid() {
  // @@protoc_insertion_point(field_mutable:Orders.RtnOrder.exchId)
  return _internal_mutable_exchid();
}
inline const std::string& RtnOrder::_internal_exchid() const {
  return exchid_.Get();
}
inline void RtnOrder::_internal_set_exchid(const std::string& value) {
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RtnOrder::set_exchid(std::string&& value) {
  
  exchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orders.RtnOrder.exchId)
}
inline void RtnOrder::set_exchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orders.RtnOrder.exchId)
}
inline void RtnOrder::set_exchid(const char* value,
    size_t size) {
  
  exchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orders.RtnOrder.exchId)
}
inline std::string* RtnOrder::_internal_mutable_exchid() {
  
  return exchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RtnOrder::release_exchid() {
  // @@protoc_insertion_point(field_release:Orders.RtnOrder.exchId)
  return exchid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RtnOrder::set_allocated_exchid(std::string* exchid) {
  if (exchid != nullptr) {
    
  } else {
    
  }
  exchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orders.RtnOrder.exchId)
}
inline std::string* RtnOrder::unsafe_arena_release_exchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orders.RtnOrder.exchId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RtnOrder::unsafe_arena_set_allocated_exchid(
    std::string* exchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchid != nullptr) {
    
  } else {
    
  }
  exchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orders.RtnOrder.exchId)
}

// int64 orderRef = 9;
inline void RtnOrder::clear_orderref() {
  orderref_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtnOrder::_internal_orderref() const {
  return orderref_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtnOrder::orderref() const {
  // @@protoc_insertion_point(field_get:Orders.RtnOrder.orderRef)
  return _internal_orderref();
}
inline void RtnOrder::_internal_set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  orderref_ = value;
}
inline void RtnOrder::set_orderref(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_orderref(value);
  // @@protoc_insertion_point(field_set:Orders.RtnOrder.orderRef)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Orders

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Orders::OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Orders::OrderType>() {
  return ::Orders::OrderType_descriptor();
}
template <> struct is_proto_enum< ::Orders::OrderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Orders::OrderDirection>() {
  return ::Orders::OrderDirection_descriptor();
}
template <> struct is_proto_enum< ::Orders::OrderStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Orders::OrderStatus>() {
  return ::Orders::OrderStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_2eproto
